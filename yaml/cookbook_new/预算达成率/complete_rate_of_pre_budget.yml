budget_daily_env:
  context_defaults:
    delay_compute: true
    sync_result_from_cluster: true
    play_on_dask_cluster: true
    dask_client_set_as_default: true
    cluster_client_address: 'dask-scheduler-service.databus:8786'

  play:
## 财报明细表
    - name: financial_statement_copy
      sync_result: true
      cooks:
        - fetch_datasource:  # 系统team表
            datasource: qcode-biz-team-book
            ignore_null_error: true
            columns: [team_id,team_code,biz_meta.org_bu_division,biz_meta.org_bu,biz_meta.cate,book_month]
            empty_df_record:
              team_id: '-'
              team_code: '-'
              biz_meta.org_bu_division: '-'
              biz_meta.org_bu: '-'
              biz_meta.cate: '-'
              book_month: 197901
            rename:
              biz_meta.org_bu_division: org_bu_division
              biz_meta.org_bu: org_bu
              biz_meta.cate: team_cate
        - fetch_cols:
            columns: [ team_id,team_code,org_bu_division,org_bu,team_cate ]
        - stash_push_df: [ ]
        - fetch_datasource:   # 系统code表
            datasource: qcode-biz-code-book
            ignore_null_error: true
            columns: [team_id,name,code,biz_meta.industry_id,biz_meta.platform_id,biz_meta.supplier_id,biz_meta.city_code,code_id,book_month]
            empty_df_record:
              team_id: '-'
              name: '-'
              code: '-'
              biz_meta.industry_id: '-'
              biz_meta.platform_id: '-'
              biz_meta.supplier_id: '-'
              biz_meta.city_code: '-'
              code_id: '-'
              book_month: 197901
            rename:
              biz_meta.industry_id: industry_id
              biz_meta.platform_id: platform_id
              biz_meta.supplier_id: supplier_id
              biz_meta.city_code: city_code
              name: code_name
        - fetch_cols:
            columns: [ team_id,code_name,code,industry_id,platform_id,supplier_id,city_code,code_id,book_month ]
        - stash_push_df: [ ]
        - stash_join_df:   # 获取team表中code对应的team_id以及其他分部、事业部字段
            on: team_id
            how: left
            drop_stash: true
        - drop_duplicates:
            subset: [team_id,code_id,org_bu_division,org_bu]
        - push_dataset:
            key: result_mini
        - fetch_datasource:   # 财报明细表
            datasource: qcode-finance-databook
            ignore_null_error: true
            columns: [ code_id,ac_id,ac_code,money,code_name,code_code,ac_rule_kind ]
            empty_df_record:
              code_id: '-'
              ac_id: '-'
              ac_code: Q-2010101
              money: 0.0
              code_name: '-'
              code_code: '-'
              ac_rule_kind: code
        - df_select:
            - '[ac_rule_kind] == @p1'
            - p1: code
        - stash_push_df: []
        - use_df:
            key: result_mini
            columns: [code_id,code_name,team_id,team_code,org_bu_division,org_bu,team_cate,industry_id,platform_id]
        - stash_push_df: []
        - stash_join_df:
            on: [code_id,code_name]
            how: right
            drop_stash: true
        - stash_push_df: []
        - fetch_datasource:
            datasource: qcode-finance-databook
            ignore_null_error: true
            empty_df_record:
              team_id: '-'
              ac_id: '-'
              ac_code: '-'
              money: 0.0
              code_code: '-'
              ac_rule_kind: '-'
              team_code: '-'
        - df_select:
            - '[ac_rule_kind] == @p1'
            - p1: team
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - set_meta_month_column:
            - book_month
        - stash_push_df: []
        - fetch_datasource:    ## O1-O2关联关系表
            datasource: datahub
            table: datasource.biz_monthly_map
            meta_month_column_name: month
            ignore_null_error: true
            columns: [map_name,value1,value2,month]
            empty_df_record:
              map_name: '-'
              value1: '-'
              value2: '-'
              month: 197901
            rename:
              value1: team_code
              value2: team_code_O2
        - df_select:
            - '[map_name] == @p1'
            - p1: ext_budget_o1_o2_code
        - fetch_cols:
            columns: [team_code,team_code_O2]
        - stash_push_df: []
        - stash_join_df:
            on: team_code
            how: right
            drop_stash: true
        - run_py:
            - |
              df['team_code_O2'] = df['team_code_O2'].mask(df['team_code_O2'].isnull(),df['team_code'])
              result = df
        - stash_push_df: []
        - fetch_datasource:  # 系统team表
            datasource: qcode-biz-team-book
            ignore_null_error: true
            columns: [team_id,team_code,biz_meta.cate]
            empty_df_record:
              team_id: '-'
              team_code: '-'
              biz_meta.cate: '-'
            rename:
              team_id: team_id_O2
              team_code: team_code_O2
              biz_meta.cate: team_cate_O2
        - stash_push_df: []
        - stash_join_df:
            on: team_code_O2
            how: right
            drop_stash: true


## 预算数据表
    - name: budget_summary
      sync_result: true
      cooks:
        - fetch_datasource:
            datasource: datahub
            table: dapp_budget.budget
            ignore_null_error: true
            month_value: 202101
            empty_df_record:
              code_id: '-'
              code_code: '-'
              team_id: '-'
              ac_code: '-'
              ac_id: '-'
              book_month: 197901
              book_year: 1979
              money: 0.0
              biz_extra.sub_industry_name: '-'
              biz_extra.org_bu: '-'
              biz_extra.org_bu_division: '-'
              biz_extra.team_cate: '-'
              biz_extra.team_code: '-'
              biz_extra.ac_rule_kind: '-'
            rename:
              biz_extra.sub_industry_name: sub_industry_name
              biz_extra.org_bu: org_bu
              biz_extra.org_bu_division: org_bu_division
              biz_extra.team_cate: team_cate
              biz_extra.team_code: team_code
              biz_extra.ac_rule_kind: ac_rule_kind
        - stash_push_df: []
        - fetch_datasource:
            datasource: datahub
            table: dapp_budget.budget
            ignore_null_error: true
            month_value: 202102
            empty_df_record:
              code_id: '-'
              code_code: '-'
              team_id: '-'
              ac_code: '-'
              ac_id: '-'
              book_month: 197901
              book_year: 1979
              money: 0.0
              biz_extra.sub_industry_name: '-'
              biz_extra.org_bu: '-'
              biz_extra.org_bu_division: '-'
              biz_extra.team_cate: '-'
              biz_extra.team_code: '-'
              biz_extra.ac_rule_kind: '-'
            rename:
              biz_extra.sub_industry_name: sub_industry_name
              biz_extra.org_bu: org_bu
              biz_extra.org_bu_division: org_bu_division
              biz_extra.team_cate: team_cate
              biz_extra.team_code: team_code
              biz_extra.ac_rule_kind: ac_rule_kind
        - stash_push_df: []
        - fetch_datasource:
            datasource: datahub
            table: dapp_budget.budget
            ignore_null_error: true
            month_value: 202103
            empty_df_record:
              code_id: '-'
              code_code: '-'
              team_id: '-'
              ac_code: '-'
              ac_id: '-'
              book_month: 197901
              book_year: 1979
              money: 0.0
              biz_extra.sub_industry_name: '-'
              biz_extra.org_bu: '-'
              biz_extra.org_bu_division: '-'
              biz_extra.team_cate: '-'
              biz_extra.team_code: '-'
              biz_extra.ac_rule_kind: '-'
            rename:
              biz_extra.sub_industry_name: sub_industry_name
              biz_extra.org_bu: org_bu
              biz_extra.org_bu_division: org_bu_division
              biz_extra.team_cate: team_cate
              biz_extra.team_code: team_code
              biz_extra.ac_rule_kind: ac_rule_kind
        - stash_push_df: []
        - fetch_datasource:
            datasource: datahub
            table: dapp_budget.budget
            ignore_null_error: true
            month_value: 202104
            empty_df_record:
              code_id: '-'
              code_code: '-'
              team_id: '-'
              ac_code: '-'
              ac_id: '-'
              book_month: 197901
              book_year: 1979
              money: 0.0
              biz_extra.sub_industry_name: '-'
              biz_extra.org_bu: '-'
              biz_extra.org_bu_division: '-'
              biz_extra.team_cate: '-'
              biz_extra.team_code: '-'
              biz_extra.ac_rule_kind: '-'
            rename:
              biz_extra.sub_industry_name: sub_industry_name
              biz_extra.org_bu: org_bu
              biz_extra.org_bu_division: org_bu_division
              biz_extra.team_cate: team_cate
              biz_extra.team_code: team_code
              biz_extra.ac_rule_kind: ac_rule_kind
        - stash_push_df: []
        - fetch_datasource:
            datasource: datahub
            table: dapp_budget.budget
            ignore_null_error: true
            month_value: 202105
            empty_df_record:
              code_id: '-'
              code_code: '-'
              team_id: '-'
              ac_code: '-'
              ac_id: '-'
              book_month: 197901
              book_year: 1979
              money: 0.0
              biz_extra.sub_industry_name: '-'
              biz_extra.org_bu: '-'
              biz_extra.org_bu_division: '-'
              biz_extra.team_cate: '-'
              biz_extra.team_code: '-'
              biz_extra.ac_rule_kind: '-'
            rename:
              biz_extra.sub_industry_name: sub_industry_name
              biz_extra.org_bu: org_bu
              biz_extra.org_bu_division: org_bu_division
              biz_extra.team_cate: team_cate
              biz_extra.team_code: team_code
              biz_extra.ac_rule_kind: ac_rule_kind
        - stash_push_df: []
        - fetch_datasource:
            datasource: datahub
            table: dapp_budget.budget
            ignore_null_error: true
            month_value: 202106
            empty_df_record:
              code_id: '-'
              code_code: '-'
              team_id: '-'
              ac_code: '-'
              ac_id: '-'
              book_month: 197901
              book_year: 1979
              money: 0.0
              biz_extra.sub_industry_name: '-'
              biz_extra.org_bu: '-'
              biz_extra.org_bu_division: '-'
              biz_extra.team_cate: '-'
              biz_extra.team_code: '-'
              biz_extra.ac_rule_kind: '-'
            rename:
              biz_extra.sub_industry_name: sub_industry_name
              biz_extra.org_bu: org_bu
              biz_extra.org_bu_division: org_bu_division
              biz_extra.team_cate: team_cate
              biz_extra.team_code: team_code
              biz_extra.ac_rule_kind: ac_rule_kind
        - stash_push_df: []
        - fetch_datasource:
            datasource: datahub
            table: dapp_budget.budget
            ignore_null_error: true
            month_value: 202107
            empty_df_record:
              code_id: '-'
              code_code: '-'
              team_id: '-'
              ac_code: '-'
              ac_id: '-'
              book_month: 197901
              book_year: 1979
              money: 0.0
              biz_extra.sub_industry_name: '-'
              biz_extra.org_bu: '-'
              biz_extra.org_bu_division: '-'
              biz_extra.team_cate: '-'
              biz_extra.team_code: '-'
              biz_extra.ac_rule_kind: '-'
            rename:
              biz_extra.sub_industry_name: sub_industry_name
              biz_extra.org_bu: org_bu
              biz_extra.org_bu_division: org_bu_division
              biz_extra.team_cate: team_cate
              biz_extra.team_code: team_code
              biz_extra.ac_rule_kind: ac_rule_kind
        - stash_push_df: []
        - fetch_datasource:
            datasource: datahub
            table: dapp_budget.budget
            ignore_null_error: true
            month_value: 202108
            empty_df_record:
              code_id: '-'
              code_code: '-'
              team_id: '-'
              ac_code: '-'
              ac_id: '-'
              book_month: 197901
              book_year: 1979
              money: 0.0
              biz_extra.sub_industry_name: '-'
              biz_extra.org_bu: '-'
              biz_extra.org_bu_division: '-'
              biz_extra.team_cate: '-'
              biz_extra.team_code: '-'
              biz_extra.ac_rule_kind: '-'
            rename:
              biz_extra.sub_industry_name: sub_industry_name
              biz_extra.org_bu: org_bu
              biz_extra.org_bu_division: org_bu_division
              biz_extra.team_cate: team_cate
              biz_extra.team_code: team_code
              biz_extra.ac_rule_kind: ac_rule_kind
        - stash_push_df: []
        - fetch_datasource:
            datasource: datahub
            table: dapp_budget.budget
            ignore_null_error: true
            month_value: 202109
            empty_df_record:
              code_id: '-'
              code_code: '-'
              team_id: '-'
              ac_code: '-'
              ac_id: '-'
              book_month: 197901
              book_year: 1979
              money: 0.0
              biz_extra.sub_industry_name: '-'
              biz_extra.org_bu: '-'
              biz_extra.org_bu_division: '-'
              biz_extra.team_cate: '-'
              biz_extra.team_code: '-'
              biz_extra.ac_rule_kind: '-'
            rename:
              biz_extra.sub_industry_name: sub_industry_name
              biz_extra.org_bu: org_bu
              biz_extra.org_bu_division: org_bu_division
              biz_extra.team_cate: team_cate
              biz_extra.team_code: team_code
              biz_extra.ac_rule_kind: ac_rule_kind
        - stash_push_df: []
        - fetch_datasource:
            datasource: datahub
            table: dapp_budget.budget
            ignore_null_error: true
            month_value: 202110
            empty_df_record:
              code_id: '-'
              code_code: '-'
              team_id: '-'
              ac_code: '-'
              ac_id: '-'
              book_month: 197901
              book_year: 1979
              money: 0.0
              biz_extra.sub_industry_name: '-'
              biz_extra.org_bu: '-'
              biz_extra.org_bu_division: '-'
              biz_extra.team_cate: '-'
              biz_extra.team_code: '-'
              biz_extra.ac_rule_kind: '-'
            rename:
              biz_extra.sub_industry_name: sub_industry_name
              biz_extra.org_bu: org_bu
              biz_extra.org_bu_division: org_bu_division
              biz_extra.team_cate: team_cate
              biz_extra.team_code: team_code
              biz_extra.ac_rule_kind: ac_rule_kind
        - stash_push_df: []
        - fetch_datasource:
            datasource: datahub
            table: dapp_budget.budget
            ignore_null_error: true
            month_value: 202111
            empty_df_record:
              code_id: '-'
              code_code: '-'
              team_id: '-'
              ac_code: '-'
              ac_id: '-'
              book_month: 197901
              book_year: 1979
              money: 0.0
              biz_extra.sub_industry_name: '-'
              biz_extra.org_bu: '-'
              biz_extra.org_bu_division: '-'
              biz_extra.team_cate: '-'
              biz_extra.team_code: '-'
              biz_extra.ac_rule_kind: '-'
            rename:
              biz_extra.sub_industry_name: sub_industry_name
              biz_extra.org_bu: org_bu
              biz_extra.org_bu_division: org_bu_division
              biz_extra.team_cate: team_cate
              biz_extra.team_code: team_code
              biz_extra.ac_rule_kind: ac_rule_kind
        - stash_push_df: []
        - fetch_datasource:
            datasource: datahub
            table: dapp_budget.budget
            ignore_null_error: true
            month_value: 202112
            empty_df_record:
              code_id: '-'
              code_code: '-'
              team_id: '-'
              ac_code: '-'
              ac_id: '-'
              book_month: 197901
              book_year: 1979
              money: 0.0
              biz_extra.sub_industry_name: '-'
              biz_extra.org_bu: '-'
              biz_extra.org_bu_division: '-'
              biz_extra.team_cate: '-'
              biz_extra.team_code: '-'
              biz_extra.ac_rule_kind: '-'
            rename:
              biz_extra.sub_industry_name: sub_industry_name
              biz_extra.org_bu: org_bu
              biz_extra.org_bu_division: org_bu_division
              biz_extra.team_cate: team_cate
              biz_extra.team_code: team_code
              biz_extra.ac_rule_kind: ac_rule_kind
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true



### 1月数据，与第一季度数据计算环比用到20年决算数据，将决算数据12月份，与10-12月份，单独计算出每个月的实际值，用来调用
    - name: final_summary_copy
      sync_result: true
      cooks:
        - fetch_dataset: # 获取20年决算数据
            dataset_type_code: final_summary
            dataset_cate: std
            month_value: 202012
            columns: [org_bu_division,org_bu,sub_industry_name,money,book_month,ac_code]
            ignore_null_error: true
            empty_df_record:
              org_bu_division: '-'
              org_bu: '-'
              sub_industry_name: '-'
              money: 0.0
              book_month: 197901
              ac_code: '-'
            rename:
              ac_code: subject_code
        - run_py:
            - |
              df['subject_code'] = df['subject_code'].apply(lambda x:x.replace('Y-QS-4','利润'))
              result = df
        - push_dataset:
            key: final_summary_copy_mini
        - use_df:    ## 月维度-事业部，12月份实际数值
            key: final_summary_copy_mini
        - run_py:
            - |
              df = df[df['org_bu'].notnull()]
              result = df
        - df_select:
            - '[book_month] == @p1'
            - p1: 202012
        - df_groupby:
            by: [ org_bu,subject_code ]
        - df_sum:
            column: money
            rename: monthly_actual
        - df_reset_index: [ ]
        - stash_push_df: [ ]
        - use_df:     ## 季度维度-事业部，10-12月份实际数值
            key: final_summary_copy_mini
        - run_py:
            - |
              df = df[df['org_bu'].notnull()]
              result = df
        - df_select:
            - '[book_month] in @p1'
            - p1: [ 202012,202011,202010 ]
        - df_groupby:
            by: [ org_bu,subject_code ]
        - df_sum:
            column: money
            rename: quarter_actual
        - df_reset_index: [ ]
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ org_bu,subject_code ]
            how: outer
            drop_stash: true
        - add_cols:
            - type: org_bu
        - push_dataset:
            key: final_summary_copy_mini1

        - use_df:   ## 月维度-分部，12月份实际数值
            key: final_summary_copy_mini
        - run_py:
            - |
              df = df[df['org_bu_division'].notnull()]
              result = df
        - df_select:
            - '[book_month] == @p1'
            - p1: 202012
        - df_groupby:
            by: [ org_bu_division,subject_code ]
        - df_sum:
            column: money
            rename: monthly_actual
        - df_reset_index: [ ]
        - stash_push_df: [ ]
        - use_df:      ## 季度维度-分部，10-12月份实际数值
            key: final_summary_copy_mini
        - run_py:
            - |
              df = df[df['org_bu_division'].notnull()]
              result = df
        - df_select:
            - '[book_month] in @p1'
            - p1: [ 202012,202011,202010 ]
        - df_groupby:
            by: [ org_bu_division,subject_code ]
        - df_sum:
            column: money
            rename: quarter_actual
        - df_reset_index: [ ]
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ org_bu_division,subject_code ]
            how: outer
            drop_stash: true
        - add_cols:
            - type: org_bu_division
        - stash_push_df: []
        - use_df:
            key: final_summary_copy_mini1
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - push_dataset:
            key: final_summary_copy_mini2

        - use_df:     ## 月维度-code-事业部，12月份实际数值
            key: final_summary_copy_mini
        - run_py:
            - |
              df = df[df['org_bu'].notnull()]
              result = df
        - df_select:
            - '[book_month] == @p1'
            - p1: 202012
        - df_groupby:
            by: [ org_bu,subject_code,sub_industry_name ]
        - df_sum:
            column: money
            rename: monthly_actual
        - df_reset_index: [ ]
        - stash_push_df: [ ]
        - use_df:      ## 季度维度-code-事业部，10-12月份实际数值
            key: final_summary_copy_mini
        - run_py:
            - |
              df = df[df['org_bu'].notnull()]
              result = df
        - df_select:
            - '[book_month] in @p1'
            - p1: [ 202012,202011,202010 ]
        - df_groupby:
            by: [ org_bu,subject_code,sub_industry_name ]
        - df_sum:
            column: money
            rename: quarter_actual
        - df_reset_index: [ ]
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ org_bu,subject_code,sub_industry_name ]
            how: outer
            drop_stash: true
        - add_cols:
            - type: org_bu_platform
        - push_dataset:
            key: final_summary_copy_mini3

        - use_df:      ## 月维度-code-分部，12月份实际数值
            key: final_summary_copy_mini
        - run_py:
            - |
              df = df[df['org_bu_division'].notnull()]
              result = df
        - df_select:
            - '[book_month] == @p1'
            - p1: 202012
        - df_groupby:
            by: [ org_bu_division,subject_code,sub_industry_name ]
        - df_sum:
            column: money
            rename: monthly_actual
        - df_reset_index: [ ]
        - stash_push_df: [ ]
        - use_df:      ## 季度维度-code-分部，10-12月份实际数值
            key: final_summary_copy_mini
        - run_py:
            - |
              df = df[df['org_bu_division'].notnull()]
              result = df
        - df_select:
            - '[book_month] in @p1'
            - p1: [ 202012,202011,202010 ]
        - df_groupby:
            by: [ org_bu_division,subject_code,sub_industry_name ]
        - df_sum:
            column: money
            rename: quarter_actual
        - df_reset_index: [ ]
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ org_bu_division,subject_code,sub_industry_name ]
            how: outer
            drop_stash: true
        - add_cols:
            - type: org_bu_division_platform
        - stash_push_df: []
        - use_df:
            key: final_summary_copy_mini3
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - stash_push_df: []
        - use_df:
            key: final_summary_copy_mini2
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - add_cols:
            - book_month: 202012


### 汇总月维度、季度维度、年维度-code维度-实际值，下个月读取，计算环比，防止自循环
    - name: code_Pre_computation_actual_table
      sync_result: true
      cooks:
### 月度维度
        - use_df:
            key: financial_statement_copy
        - df_pivot_table: # 透视表
            values: money
            index: [ code_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:   ## 财报明细中，关于收入的单位都为分，后面除收入意外的需要在重新 * 100
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:   # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [ C-101,C-201,C-202,C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-10301,Q-10302,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20601,Q-20602,Q-20603,Q-20604,Q-20605,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-20704,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-3020101,Q-3020102,Q-30101,Q-30102,Q-30103,Q-30104,Q-30105,Q-30106,Q-30107,Q-30108,Q-30202,Q-30203,Q-30204,Q-30205,Q-30206,Q-30207,Q-30208,Q-30209,Q-30210,Q-3030201,Q-3030202,Q-3030203,Q-30301,Q-30303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:   # 计算所需的指标
            - |
              df['C-101'] = df['C-101'] * 100

              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100

              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['QS-10101014'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-102']
              df['QS-103012'] = df['Q-10301'] + df['Q-10302']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201']
              df['QS-104013'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']
              df['Y-QS-1'] = df['QS-10101014'] + df['QS-103012'] + df['QS-104013']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20602'] + df['Q-20603'] + df['Q-20604'] + df['Q-20605']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703'] + df['Q-20704']
              df['QS-2017'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['QS-204010'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['Y-QS-2'] = df['QS-2017'] + df['QS-204010']

              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Y-QS-3'] = df['Q-301'] + df['Q-302'] + df['Q-303']

              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - pad_cols: # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [ C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率 ]
            default_value: 0
        - fetch_cols:
            columns: [code_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - sort_by_columns:    #  按照列名进行排序
            sort_list: [code_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - run_py:    # 将列转换为行，格式要求，拼接预算数据进行计算
            - |
              df = df.melt(id_vars='code_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - stash_push_df: []
### 季度维度
        - fetch_dataset:   # 一个季度，获取本月以及前两个月的数据
            dataset_type_code: financial_statement_copy
            dataset_cate: std
            month_range: True
            month_delta: -2
            columns: [book_month,code_id,ac_code,money]
            ignore_null_error: true
            empty_df_record:
              code_id: '-'
              book_month: 197901
              ac_code: '-'
              money: 0.0
        - run_py:    # 判断并获取一个季度的数据，若为8月，则上面拼接为6、7、8月份数据，筛选过后为7、8月份数据
            - |
              df = df[df['book_month'].notnull()]
              df['month'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month'] = df['month'].astype(int)
              month_now = df['month'].max()
              df['时间先后情况'] = df['month']-((month_now//3-(month_now-(month_now//3*3) ==0))*3+1)
              df = df[df['时间先后情况']>=0]
              result = df
        - df_pivot_table: # 透视表
            values: money
            index: [ code_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:   # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [ C-101,C-201,C-202,C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-10301,Q-10302,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20601,Q-20602,Q-20603,Q-20604,Q-20605,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-20704,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-3020101,Q-3020102,Q-30101,Q-30102,Q-30103,Q-30104,Q-30105,Q-30106,Q-30107,Q-30108,Q-30202,Q-30203,Q-30204,Q-30205,Q-30206,Q-30207,Q-30208,Q-30209,Q-30210,Q-3030201,Q-3030202,Q-3030203,Q-30301,Q-30303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:   # 计算所需的指标
            - |
              df['C-101'] = df['C-101'] * 100

              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100

              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['QS-10101014'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-102']
              df['QS-103012'] = df['Q-10301'] + df['Q-10302']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201']
              df['QS-104013'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']
              df['Y-QS-1'] = df['QS-10101014'] + df['QS-103012'] + df['QS-104013']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20602'] + df['Q-20603'] + df['Q-20604'] + df['Q-20605']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703'] + df['Q-20704']
              df['QS-2017'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['QS-204010'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['Y-QS-2'] = df['QS-2017'] + df['QS-204010']

              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Y-QS-3'] = df['Q-301'] + df['Q-302'] + df['Q-303']

              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - pad_cols: # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
            default_value: 0
        - fetch_cols:
            columns: [code_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - sort_by_columns:    #  按照列名进行排序
            sort_list: [code_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - run_py:    # 将列转换为行，格式要求，拼接预算数据进行计算
            - |
              df = df.melt(id_vars='code_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - stash_push_df: []

### 年维度
        - fetch_dataset:   # 获取近一年的数据
            dataset_type_code: financial_statement_copy
            dataset_cate: std
            month_range: True
            month_delta: -11
            columns: [book_month,code_id,ac_code,money]
            ignore_null_error: true
            empty_df_record:
              code_id: '-'
              book_month: 197901
              ac_code: '-'
              money: 0.0
        - df_pivot_table: # 透视表
            values: money
            index: [ code_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:   # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [ C-101,C-201,C-202,C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-10301,Q-10302,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20601,Q-20602,Q-20603,Q-20604,Q-20605,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-20704,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-3020101,Q-3020102,Q-30101,Q-30102,Q-30103,Q-30104,Q-30105,Q-30106,Q-30107,Q-30108,Q-30202,Q-30203,Q-30204,Q-30205,Q-30206,Q-30207,Q-30208,Q-30209,Q-30210,Q-3030201,Q-3030202,Q-3030203,Q-30301,Q-30303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:   # 计算所需的指标
            - |
              df['C-101'] = df['C-101'] * 100

              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100

              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['QS-10101014'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-102']
              df['QS-103012'] = df['Q-10301'] + df['Q-10302']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201']
              df['QS-104013'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']
              df['Y-QS-1'] = df['QS-10101014'] + df['QS-103012'] + df['QS-104013']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20602'] + df['Q-20603'] + df['Q-20604'] + df['Q-20605']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703'] + df['Q-20704']
              df['QS-2017'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['QS-204010'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['Y-QS-2'] = df['QS-2017'] + df['QS-204010']

              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Y-QS-3'] = df['Q-301'] + df['Q-302'] + df['Q-303']

              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - pad_cols: # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
            default_value: 0
        - fetch_cols:
            columns: [code_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - sort_by_columns:    #  按照列名进行排序
            sort_list: [code_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - run_py:    # 将列转换为行，格式要求，拼接预算数据进行计算
            - |
              df = df.melt(id_vars='code_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - stash_push_df: []
        - stash_join_df:
            on: [code_id,subject_code]
            how: outer
            drop_stash: true
        - set_meta_month_column:
            - book_month
        - df_fillna:
            value: 0
        - fetch_cols:
            columns: [code_id,subject_code,monthly_actual,quarter_actual,year_actual,book_month]
        - drop_duplicates:
            subset: [code_id,subject_code,monthly_actual,quarter_actual,year_actual,book_month]


### 汇总-月维度-code维度
    - name: code_Pre_computation_table
      sync_result: true
      cooks:
        - use_df:    ## 读取本月，本季度以及本年度的实际值
            key: code_Pre_computation_actual_table
        - stash_push_df: []
        - fetch_dataset:  ## 获取上个月实际值，用来月度计算环比
            dataset_type_code: code_Pre_computation_actual_table
            dataset_cate: std
            month_offset: -1
            columns: [code_id,subject_code,monthly_actual]
            ignore_null_error: true
            empty_df_record:
              code_id: '-'
              subject_code: '-'
              monthly_actual: 0.0
            rename:
              monthly_actual: monthly_actual_before
        - stash_push_df: []
        - stash_join_df:
            on: [code_id,subject_code]
            how: right
            drop_stash: true
        - stash_push_df: []
### 计算环比，获取上个季度最全的数据，例如（7-9月属于Q3，我要获取Q2的数据，获取最全的6月份数据）每个月动态获取，用来季度计算环比
        - fetch_dataset:
            dataset_type_code: code_Pre_computation_actual_table
            dataset_cate: std
            month_range: True
            month_delta: -3
            ignore_null_error: true
            columns: [code_id,subject_code,quarter_actual,book_month]
            empty_df_record:
              code_id: '-'
              subject_code: '-'
              quarter_actual: 0.0
              book_month: 197901
            rename:
              quarter_actual: quarter_actual_before
        - run_py:
            - |
              df['month'] = df['book_month'].apply(lambda x:str(x)[4:])
              df['month'] = df['month'].astype(int)
              month_now1 = df['month'].max()
              df = df[df['month'] == (month_now1//3-(month_now1-(month_now1//3*3)==0)+4*((month_now1//3-(month_now1-(month_now1//3*3)==0))==0))*3]
              result = df
        - fetch_cols:
            columns: [code_id,subject_code,quarter_actual_before]
        - stash_push_df: []
        - stash_join_df:
            on: [code_id,subject_code]
            how: right
            drop_stash: true
        - pad_cols:
            columns: [ quarter_actual_before,monthly_actual_before ]
            default_value: 0
        - push_dataset:
            key: miqi

        - fetch_dataset:     ## 预算数据
            dataset_type_code: budget_summary
            dataset_cate: std
            ignore_null_error: true
            empty_df_record:
              ac_code: '-'
              code_id: '-'
              team_id: '-'
              ac_id: '-'
              book_year: 1979
              book_month: 197901
              money: 0.0
              sub_industry_name: '-'
              org_bu: '-'
              org_bu_division: '-'
              team_code: '-'
              team_cate: '-'
              ac_rule_kind: '-'
            rename:
              ac_code: subject_code
              money: budget
              book_month: month
        - df_select:     ## 筛选 ac_rule_kind  为 code 的对应数据
            - '[ac_rule_kind] == @p1'
            - p1: code
        - set_meta_month_column:
            - book_month
        - push_dataset:
            key: miqi1
        ## 月度
        - use_df:
            key: miqi1
        - when_empty_use_df:
            key: miqi11
            ignore_null_error: true
            empty_df_record:
              book_month: 197901
              month: 197901
              code_id: '-'
              subject_code: Y-QS-1
              budget: 0.0
        - df_select:    ## 筛选当前月份预算数据
            - '[book_month] == [month]'
        - df_pivot_table: # 透视表
            values: budget
            index: [ code_id ]
            columns: [ subject_code ]
            aggfunc: sum
        - df_reset_index: []
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [code_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - df_fillna:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            value: 0
        - run_py:   ## 求得利润、利润率、code利润、code利润率预算数据后期进行匹配
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars='code_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_budget
        - stash_push_df: []
        ## 季度
        - use_df:
            key: miqi1
        - when_empty_use_df:
            key: miqi11
            ignore_null_error: true
            empty_df_record:
              book_month: 197901
              month: 197901
              code_id: '-'
              subject_code: Y-QS-1
              budget: 0.0
        - run_py:   ## 自动筛选当前季度月份数据，假设当前为8月份，应筛选为7、8、9月份数据，当前为6月份，筛选4、5、6月份数据
            - |
              df['月份_now'] = df['month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['月份_now'] = df['月份_now'].astype(int)
              df['month_now'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_now2 = df['month_now'].max()
              df = df[df['月份_now'] >= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1)]
              df = df[df['月份_now'] <= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1) + 2]
              result = df
        - df_pivot_table: # 透视表
            values: budget
            index: [ code_id ]
            columns: [ subject_code ]
            aggfunc: sum
        - df_reset_index: []
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [code_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - df_fillna:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            value: 0
        - run_py:   # 计算code利润等指标，并进行行列格式转换
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars='code_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_budget
        - stash_push_df: []
        ## 年度
        - use_df:
            key: miqi1
        - when_empty_use_df:
            key: miqi11
            ignore_null_error: true
            empty_df_record:
              book_month: 197901
              month: 197901
              code_id: '-'
              subject_code: Y-QS-1
              budget: 0.0
        - df_pivot_table: # 透视表
            values: budget
            index: [ code_id ]
            columns: [ subject_code ]
            aggfunc: sum
        - df_reset_index: []
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [code_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - df_fillna:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            value: 0
        - run_py:  # 指标计算以及，行列格式转换
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars='code_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_budget
        - stash_push_df: []
        - stash_join_df:
            on: [code_id,subject_code]
            how: outer
            drop_stash: true
        - stash_push_df: []
        - use_df:    ## 拼接本月、本季度、本年度实际值，以及上月、上季度实际值
            key: miqi
        - fetch_cols:
            columns: [ code_id,subject_code,quarter_actual_before,monthly_actual_before,book_month,year_actual,quarter_actual,monthly_actual ]
        - stash_push_df: []
        - stash_join_df:    ## 新增code，有预算数据定为新增code，所以拼接时预算数据为主
            on: [code_id,subject_code]
            how: right
            drop_stash: true
        - df_fillna:
            value: 0
        - push_dataset:
            key: result_code
        - use_df:
            key: result_code
        - df_select:
            - '[subject_code] != @p1'
            - p1: [code利润率,利润率]
        - run_py: ## 计算月环比、预算达成率
            - |
              df['MOM'] = 0.0
              df['QOQ'] = 0.0
              df['monthly_budget_achievement_rate'] = 0.0
              df['quarter_budget_achievement_rate'] = 0.0
              df['year_budget_achievement_rate'] = 0.0
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] > 0,(df['monthly_actual'] - df['monthly_actual_before']) / df['monthly_actual_before'])
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] < 0,(df['monthly_actual'] - df['monthly_actual_before']) / (-df['monthly_actual_before']))
              df['monthly_budget_achievement_rate'] = df['monthly_budget_achievement_rate'].mask(df['monthly_budget'] > 0,df['monthly_actual'] / df['monthly_budget'])
              df['monthly_budget_achievement_rate'] = df['monthly_budget_achievement_rate'].mask(df['monthly_budget'] < 0,2 - df['monthly_actual'] / df['monthly_budget'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] > 0,(df['quarter_actual'] - df['quarter_actual_before']) / df['quarter_actual_before'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] < 0,(df['quarter_actual'] - df['quarter_actual_before']) / (-df['quarter_actual_before']))
              df['quarter_budget_achievement_rate'] = df['quarter_budget_achievement_rate'].mask(df['quarter_budget'] > 0,df['quarter_actual'] / df['quarter_budget'])
              df['quarter_budget_achievement_rate'] = df['quarter_budget_achievement_rate'].mask(df['quarter_budget'] < 0,2 - df['quarter_actual'] / df['quarter_budget'])
              df['year_budget_achievement_rate'] = df['year_budget_achievement_rate'].mask(df['year_budget'] > 0,df['year_actual'] / df['year_budget'])
              df['year_budget_achievement_rate'] = df['year_budget_achievement_rate'].mask(df['year_budget'] < 0,2 - df['year_actual'] / df['year_budget'])
              df = df[df['code_id'].notnull()]
              df['book_day'] = np.datetime64('now')
              result = df
        - stash_push_df: []
        - use_df:
            key: result_code
        - df_select:
            - '[subject_code] == @p1'
            - p1: [code利润率,利润率]
        - run_py: ## 计算月环比、预算达成率
            - |
              df['MOM'] = 0.0
              df['QOQ'] = 0.0
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] > 0,(df['monthly_actual'] - df['monthly_actual_before']) / df['monthly_actual_before'])
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] < 0,(df['monthly_actual'] - df['monthly_actual_before']) / (-df['monthly_actual_before']))
              df['monthly_budget_achievement_rate'] = df['monthly_actual'] - df['monthly_budget']
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] > 0,(df['quarter_actual'] - df['quarter_actual_before']) / df['quarter_actual_before'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] < 0,(df['quarter_actual'] - df['quarter_actual_before']) / (-df['quarter_actual_before']))
              df['quarter_budget_achievement_rate'] = df['quarter_actual'] - df['quarter_budget']
              df['year_budget_achievement_rate'] = df['year_actual'] - df['year_budget']
              df = df[df['code_id'].notnull()]
              df['book_day'] = np.datetime64('now')
              result = df
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - set_meta_month_column:
            - book_month
        - stash_push_df: []
        - use_df:
            key: financial_statement_copy
            columns: [team_id,team_cate,code_id,team_id_O2,org_bu_division,org_bu,industry_id,platform_id]
        - stash_push_df: []
        - stash_join_df:
            on: code_id
            how: right
            drop_stash: true
        - drop_duplicates:
            subset: [ code_id,quarter_actual,team_id,monthly_actual_before,book_month,year_actual,monthly_actual,subject_code,quarter_actual_before,year_budget,monthly_budget,quarter_budget,MOM,QOQ,monthly_budget_achievement_rate,quarter_budget_achievement_rate,year_budget_achievement_rate,book_day,team_id_O2,org_bu_division,org_bu,industry_id,platform_id ]



### 汇总月维度、季度维度、年维度-team维度-实际值，下个月读取，计算环比，防止自循环
    - name: team_Pre_computation_actual_table
      sync_result: true
      cooks:
### 月度维度
        - use_df:
            key: financial_statement_copy
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:   # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [ C-101,C-201,C-202,C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-10301,Q-10302,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20601,Q-20602,Q-20603,Q-20604,Q-20605,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-20704,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-3020101,Q-3020102,Q-30101,Q-30102,Q-30103,Q-30104,Q-30105,Q-30106,Q-30107,Q-30108,Q-30202,Q-30203,Q-30204,Q-30205,Q-30206,Q-30207,Q-30208,Q-30209,Q-30210,Q-3030201,Q-3030202,Q-3030203,Q-30301,Q-30303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:   # 计算所需的指标
            - |
              df['C-101'] = df['C-101'] * 100

              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100

              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['QS-10101014'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-102']
              df['QS-103012'] = df['Q-10301'] + df['Q-10302']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201']
              df['QS-104013'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']
              df['Y-QS-1'] = df['QS-10101014'] + df['QS-103012'] + df['QS-104013']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20602'] + df['Q-20603'] + df['Q-20604'] + df['Q-20605']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703'] + df['Q-20704']
              df['QS-2017'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['QS-204010'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['Y-QS-2'] = df['QS-2017'] + df['QS-204010']

              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Y-QS-3'] = df['Q-301'] + df['Q-302'] + df['Q-303']

              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - pad_cols: # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
            default_value: 0
        - fetch_cols:
            columns: [team_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - sort_by_columns:    #  按照列名进行排序
            sort_list: [team_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - run_py:    # 将列转换为行，格式要求，拼接预算数据进行计算
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - stash_push_df: []
### 季度维度
        - fetch_dataset:   # 一个季度，获取本月以及前两个月的数据
            dataset_type_code: financial_statement_copy
            dataset_cate: std
            month_range: True
            month_delta: -2
            columns: [book_month,money,team_id,ac_code]
            ignore_null_error: true
            empty_df_record:
              team_id: '-'
              book_month: 197901
              ac_code: '-'
              money: 0.0
        - run_py:    # 判断并获取一个季度的数据，若为8月，则上面拼接为6、7、8月份数据，筛选过后为7、8月份数据
            - |
              df = df[df['book_month'].notnull()]
              df['month'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month'] = df['month'].astype(int)
              month_now = df['month'].max()
              df['时间先后情况'] = df['month']-((month_now//3-(month_now-(month_now//3*3) ==0))*3+1)
              df = df[df['时间先后情况']>=0]
              result = df
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:   # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [ C-101,C-201,C-202,C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-10301,Q-10302,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20601,Q-20602,Q-20603,Q-20604,Q-20605,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-20704,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-3020101,Q-3020102,Q-30101,Q-30102,Q-30103,Q-30104,Q-30105,Q-30106,Q-30107,Q-30108,Q-30202,Q-30203,Q-30204,Q-30205,Q-30206,Q-30207,Q-30208,Q-30209,Q-30210,Q-3030201,Q-3030202,Q-3030203,Q-30301,Q-30303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:   # 计算所需的指标
            - |
              df['C-101'] = df['C-101'] * 100

              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100

              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['QS-10101014'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-102']
              df['QS-103012'] = df['Q-10301'] + df['Q-10302']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201']
              df['QS-104013'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']
              df['Y-QS-1'] = df['QS-10101014'] + df['QS-103012'] + df['QS-104013']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20602'] + df['Q-20603'] + df['Q-20604'] + df['Q-20605']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703'] + df['Q-20704']
              df['QS-2017'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['QS-204010'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['Y-QS-2'] = df['QS-2017'] + df['QS-204010']

              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Y-QS-3'] = df['Q-301'] + df['Q-302'] + df['Q-303']

              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - pad_cols: # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
            default_value: 0
        - fetch_cols:
            columns: [team_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - sort_by_columns:    #  按照列名进行排序
            sort_list: [team_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - run_py:    # 将列转换为行，格式要求，拼接预算数据进行计算
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - stash_push_df: []

### 年维度
        - fetch_dataset:   # 获取近一年的数据
            dataset_type_code: financial_statement_copy
            dataset_cate: std
            month_range: True
            month_delta: -11
            columns: [book_month,money,team_id,ac_code]
            ignore_null_error: true
            empty_df_record:
              team_id: '-'
              book_month: 197901
              ac_code: '-'
              money: 0.0
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:   # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [ C-101,C-201,C-202,C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-10301,Q-10302,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20601,Q-20602,Q-20603,Q-20604,Q-20605,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-20704,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-3020101,Q-3020102,Q-30101,Q-30102,Q-30103,Q-30104,Q-30105,Q-30106,Q-30107,Q-30108,Q-30202,Q-30203,Q-30204,Q-30205,Q-30206,Q-30207,Q-30208,Q-30209,Q-30210,Q-3030201,Q-3030202,Q-3030203,Q-30301,Q-30303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:   # 计算所需的指标
            - |
              df['C-101'] = df['C-101'] * 100

              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100

              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['QS-10101014'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-102']
              df['QS-103012'] = df['Q-10301'] + df['Q-10302']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201']
              df['QS-104013'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']
              df['Y-QS-1'] = df['QS-10101014'] + df['QS-103012'] + df['QS-104013']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20602'] + df['Q-20603'] + df['Q-20604'] + df['Q-20605']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703'] + df['Q-20704']
              df['QS-2017'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['QS-204010'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['Y-QS-2'] = df['QS-2017'] + df['QS-204010']

              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Y-QS-3'] = df['Q-301'] + df['Q-302'] + df['Q-303']

              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - pad_cols: # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
            default_value: 0
        - fetch_cols:
            columns: [team_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - sort_by_columns:    #  按照列名进行排序
            sort_list: [team_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - run_py:    # 将列转换为行，格式要求，拼接预算数据进行计算
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - stash_push_df: []
        - stash_join_df:
            on: [team_id,subject_code]
            how: outer
            drop_stash: true
        - set_meta_month_column:
            - book_month
        - df_fillna:
            value: 0
        - fetch_cols:
            columns: [team_id,subject_code,monthly_actual,quarter_actual,year_actual,book_month]
        - drop_duplicates:
            subset: [team_id,subject_code,monthly_actual,quarter_actual,year_actual,book_month]


### 汇总-月维度-team维度
    - name: team_Pre_computation_table
      sync_result: true
      cooks:
        - use_df:
            key: team_Pre_computation_actual_table
        - stash_push_df: []
        - fetch_dataset:
            dataset_type_code: team_Pre_computation_actual_table
            dataset_cate: std
            month_offset: -1
            columns: [team_id,subject_code,monthly_actual]
            ignore_null_error: true
            empty_df_record:
              team_id: '-'
              subject_code: '-'
              monthly_actual: 0.0
            rename:
              monthly_actual: monthly_actual_before
        - stash_push_df: []
        - stash_join_df:
            on: [team_id,subject_code]
            how: right
            drop_stash: true
        - stash_push_df: []
### 计算环比，获取上个季度最全的数据，例如（7-9月属于Q3，我要获取Q2的数据，获取最全的6月份数据）每个月动态获取
        - fetch_dataset:
            dataset_type_code: team_Pre_computation_actual_table
            dataset_cate: std
            month_range: True
            month_delta: -3
            ignore_null_error: true
            columns: [team_id,subject_code,quarter_actual,book_month]
            empty_df_record:
              team_id: '-'
              subject_code: '-'
              quarter_actual: 0.0
              book_month: 197901
            rename:
              quarter_actual: quarter_actual_before
        - run_py:
            - |
              df['month'] = df['book_month'].apply(lambda x:str(x)[4:])
              df['month'] = df['month'].astype(int)
              month_now1 = df['month'].max()
              df = df[df['month'] == (month_now1//3-(month_now1-(month_now1//3*3)==0)+4*((month_now1//3-(month_now1-(month_now1//3*3)==0))==0))*3]
              result = df
        - fetch_cols:
            columns: [team_id,subject_code,quarter_actual_before]
        - stash_push_df: []
        - stash_join_df:
            on: [team_id,subject_code]
            how: right
            drop_stash: true
        - pad_cols:
            columns: [ quarter_actual_before,monthly_actual_before ]
            default_value: 0
        - push_dataset:
            key: mini

        - fetch_dataset:     ## 预算数据
            dataset_type_code: budget_summary
            dataset_cate: std
            ignore_null_error: true
            empty_df_record:
              ac_code: '-'
              team_id: '-'
              ac_id: '-'
              book_year: 1979
              book_month: 197901
              money: 0.0
              sub_industry_name: '-'
              org_bu: '-'
              org_bu_division: '-'
              team_code: '-'
              team_cate: '-'
            rename:
              ac_code: subject_code
              money: budget
              book_month: month
        - run_py:     ## 筛选 team_cate  不为空的即为 O1\O2 对应数据
            - |
              df = df[df['team_cate'].notnull()]
              result = df
        - set_meta_month_column:
            - book_month
        - push_dataset:
            key: mini1
        - use_df:
            key: mini1
        - df_select:    ## 筛选当前月份预算数据
            - '[book_month] == [month]'
        - df_pivot_table: # 透视表
            values: budget
            index: [ team_id ]
            columns: [ subject_code ]
            aggfunc: sum
        - df_reset_index: []
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [team_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - df_fillna:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            value: 0
        - run_py:   ## 求得利润、利润率、code利润、code利润率预算数据后期进行匹配
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_budget
        - stash_push_df: []
        - use_df:
            key: mini1
        - run_py:   ## 自动筛选当前季度月份数据，假设当前为8月份，应筛选为7、8、9月份数据，当前为6月份，筛选4、5、6月份数据
            - |
              df['月份_now'] = df['month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['月份_now'] = df['月份_now'].astype(int)
              df['month_now'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_now2 = df['month_now'].max()
              df = df[df['月份_now'] >= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1)]
              df = df[df['月份_now'] <= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1) + 2]
              result = df
        - df_pivot_table: # 透视表
            values: budget
            index: [ team_id ]
            columns: [ subject_code ]
            aggfunc: sum
        - df_reset_index: []
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [team_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - df_fillna:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            value: 0
        - run_py:   # 计算code利润等指标，并进行行列格式转换
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_budget
        - stash_push_df: []
        - use_df:
            key: mini1
        - df_pivot_table: # 透视表
            values: budget
            index: [ team_id ]
            columns: [ subject_code ]
            aggfunc: sum
        - df_reset_index: []
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [team_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - df_fillna:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            value: 0
        - run_py:  # 指标计算以及，行列格式转换
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_budget
        - stash_push_df: []
        - stash_join_df:
            on: [team_id,subject_code]
            how: outer
            drop_stash: true
        - stash_push_df: []
        - use_df:
            key: mini
        - fetch_cols:
            columns: [ team_id,subject_code,quarter_actual_before,monthly_actual_before,book_month,year_actual,quarter_actual,monthly_actual ]
        - stash_push_df: []
        - stash_join_df:
            on: [team_id,subject_code]
            how: outer
            drop_stash: true
        - df_fillna:
            value: 0
        - push_dataset:
            key: aiai
        - use_df:
            key: aiai
        - df_select:
            - '[subject_code] != @p1'
            - p1: [code利润率,利润率]
        - run_py: ## 计算月环比、预算达成率
            - |
              df['MOM'] = 0.0
              df['QOQ'] = 0.0
              df['monthly_budget_achievement_rate'] = 0.0
              df['quarter_budget_achievement_rate'] = 0.0
              df['year_budget_achievement_rate'] = 0.0
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] > 0,(df['monthly_actual'] - df['monthly_actual_before']) / df['monthly_actual_before'])
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] < 0,(df['monthly_actual'] - df['monthly_actual_before']) / (-df['monthly_actual_before']))
              df['monthly_budget_achievement_rate'] = df['monthly_budget_achievement_rate'].mask(df['monthly_budget'] > 0,df['monthly_actual'] / df['monthly_budget'])
              df['monthly_budget_achievement_rate'] = df['monthly_budget_achievement_rate'].mask(df['monthly_budget'] < 0,2 - df['monthly_actual'] / df['monthly_budget'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] > 0,(df['quarter_actual'] - df['quarter_actual_before']) / df['quarter_actual_before'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] < 0,(df['quarter_actual'] - df['quarter_actual_before']) / (-df['quarter_actual_before']))
              df['quarter_budget_achievement_rate'] = df['quarter_budget_achievement_rate'].mask(df['quarter_budget'] > 0,df['quarter_actual'] / df['quarter_budget'])
              df['quarter_budget_achievement_rate'] = df['quarter_budget_achievement_rate'].mask(df['quarter_budget'] < 0,2 - df['quarter_actual'] / df['quarter_budget'])
              df['year_budget_achievement_rate'] = df['year_budget_achievement_rate'].mask(df['year_budget'] > 0,df['year_actual'] / df['year_budget'])
              df['year_budget_achievement_rate'] = df['year_budget_achievement_rate'].mask(df['year_budget'] < 0,2 - df['year_actual'] / df['year_budget'])
              df = df[df['team_id'].notnull()]
              df['book_day'] = np.datetime64('now')
              result = df
        - stash_push_df: []
        - use_df:
            key: aiai
        - df_select:
            - '[subject_code] == @p1'
            - p1: [code利润率,利润率]
        - run_py: ## 计算月环比、预算达成率
            - |
              df['MOM'] = 0.0
              df['QOQ'] = 0.0
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] > 0,(df['monthly_actual'] - df['monthly_actual_before']) / df['monthly_actual_before'])
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] < 0,(df['monthly_actual'] - df['monthly_actual_before']) / (-df['monthly_actual_before']))
              df['monthly_budget_achievement_rate'] = df['monthly_actual'] - df['monthly_budget']
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] > 0,(df['quarter_actual'] - df['quarter_actual_before']) / df['quarter_actual_before'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] < 0,(df['quarter_actual'] - df['quarter_actual_before']) / (-df['quarter_actual_before']))
              df['quarter_budget_achievement_rate'] = df['quarter_actual'] - df['quarter_budget']
              df['year_budget_achievement_rate'] = df['year_actual'] - df['year_budget']
              df = df[df['team_id'].notnull()]
              df['book_day'] = np.datetime64('now')
              result = df
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - set_meta_month_column:
            - book_month
        - stash_push_df: []
        - fetch_datasource:  # 系统team表
            datasource: qcode-biz-team-book
            ignore_null_error: true
            columns: [team_id,biz_meta.cate]
            empty_df_record:
              team_id: '-'
              biz_meta.cate: '-'
            rename:
              biz_meta.cate: team_cate
        - fetch_cols:
            columns: [ team_id,team_cate ]
        - stash_push_df: []
        - stash_join_df:
            on: team_id
            how: right
            drop_stash: true
        - stash_push_df: []
        - use_df:
            key: financial_statement_copy
            columns: [team_id,team_id_O2]
        - stash_push_df: []
        - stash_join_df:
            on: team_id
            how: right
            drop_stash: true
        - drop_duplicates:
            subset: [ quarter_actual,team_id,monthly_actual_before,book_month,year_actual,monthly_actual,subject_code,quarter_actual_before,year_budget,monthly_budget,quarter_budget,MOM,QOQ,monthly_budget_achievement_rate,quarter_budget_achievement_rate,year_budget_achievement_rate,book_day ]



### 汇总月维度、季度维度、年维度-team维度-O2-实际值，下个月读取，计算环比，防止自循环
    - name: team_Pre_computation_actual_table_O2
      sync_result: true
      cooks:
### 月度维度
        - use_df:
            key: financial_statement_copy
        - fetch_cols:
            columns: [ team_cate_O2,money,team_id_O2,ac_code ]
        - df_select:
            - '[team_cate_O2] == @p1'
            - p1: O2
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:   # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [ C-101,C-201,C-202,C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-10301,Q-10302,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20601,Q-20602,Q-20603,Q-20604,Q-20605,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-20704,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-3020101,Q-3020102,Q-30101,Q-30102,Q-30103,Q-30104,Q-30105,Q-30106,Q-30107,Q-30108,Q-30202,Q-30203,Q-30204,Q-30205,Q-30206,Q-30207,Q-30208,Q-30209,Q-30210,Q-3030201,Q-3030202,Q-3030203,Q-30301,Q-30303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:   # 计算所需的指标
            - |
              df['C-101'] = df['C-101'] * 100

              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100

              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['QS-10101014'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-102']
              df['QS-103012'] = df['Q-10301'] + df['Q-10302']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201']
              df['QS-104013'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']
              df['Y-QS-1'] = df['QS-10101014'] + df['QS-103012'] + df['QS-104013']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20602'] + df['Q-20603'] + df['Q-20604'] + df['Q-20605']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703'] + df['Q-20704']
              df['QS-2017'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['QS-204010'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['Y-QS-2'] = df['QS-2017'] + df['QS-204010']

              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Y-QS-3'] = df['Q-301'] + df['Q-302'] + df['Q-303']

              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - pad_cols: # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
            default_value: 0
        - fetch_cols:
            columns: [team_id_O2,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - sort_by_columns:    #  按照列名进行排序
            sort_list: [team_id_O2,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - run_py:    # 将列转换为行，格式要求，拼接预算数据进行计算
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - stash_push_df: []
### 季度维度
        - fetch_dataset:   # 一个季度，获取本月以及前两个月的数据
            dataset_type_code: financial_statement_copy
            dataset_cate: std
            month_range: True
            month_delta: -2
            columns: [ team_cate_O2,money,team_id_O2,ac_code,book_month ]
            ignore_null_error: true
            empty_df_record:
              book_month: 197901
              ac_code: '-'
              money: 0.0
              team_id_O2: '-'
              team_cate_O2: '-'
        - df_select:
            - '[team_cate_O2] == @p1'
            - p1: O2
        - df_to_int:
            - book_month
        - run_py:    # 判断并获取一个季度的数据，若为8月，则上面拼接为6、7、8月份数据，筛选过后为7、8月份数据
            - |
              df = df[df['book_month'].notnull()]
              df['month'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month'] = df['month'].astype(int)
              month_now = df['month'].max()
              df['时间先后情况'] = df['month']-((month_now//3-(month_now-(month_now//3*3) ==0))*3+1)
              df = df[df['时间先后情况']>=0]
              result = df
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:   # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [ C-101,C-201,C-202,C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-10301,Q-10302,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20601,Q-20602,Q-20603,Q-20604,Q-20605,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-20704,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-3020101,Q-3020102,Q-30101,Q-30102,Q-30103,Q-30104,Q-30105,Q-30106,Q-30107,Q-30108,Q-30202,Q-30203,Q-30204,Q-30205,Q-30206,Q-30207,Q-30208,Q-30209,Q-30210,Q-3030201,Q-3030202,Q-3030203,Q-30301,Q-30303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:   # 计算所需的指标
            - |
              df['C-101'] = df['C-101'] * 100

              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100

              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['QS-10101014'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-102']
              df['QS-103012'] = df['Q-10301'] + df['Q-10302']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201']
              df['QS-104013'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']
              df['Y-QS-1'] = df['QS-10101014'] + df['QS-103012'] + df['QS-104013']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20602'] + df['Q-20603'] + df['Q-20604'] + df['Q-20605']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703'] + df['Q-20704']
              df['QS-2017'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['QS-204010'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['Y-QS-2'] = df['QS-2017'] + df['QS-204010']

              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Y-QS-3'] = df['Q-301'] + df['Q-302'] + df['Q-303']

              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - pad_cols: # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
            default_value: 0
        - fetch_cols:
            columns: [team_id_O2,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - sort_by_columns:    #  按照列名进行排序
            sort_list: [team_id_O2,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - run_py:    # 将列转换为行，格式要求，拼接预算数据进行计算
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - stash_push_df: []

### 年维度
        - fetch_dataset:   # 获取近一年的数据
            dataset_type_code: financial_statement_copy
            dataset_cate: std
            month_range: True
            month_delta: -11
            columns: [ team_cate_O2,money,team_id_O2,ac_code,book_month ]
            ignore_null_error: true
            empty_df_record:
              book_month: 197901
              money: 0.0
              ac_code: '-'
              team_id_O2: '-'
              team_cate_O2: '-'
        - df_select:
            - '[team_cate_O2] == @p1'
            - p1: O2
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:   # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [ C-101,C-201,C-202,C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-10301,Q-10302,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20601,Q-20602,Q-20603,Q-20604,Q-20605,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-20704,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-3020101,Q-3020102,Q-30101,Q-30102,Q-30103,Q-30104,Q-30105,Q-30106,Q-30107,Q-30108,Q-30202,Q-30203,Q-30204,Q-30205,Q-30206,Q-30207,Q-30208,Q-30209,Q-30210,Q-3030201,Q-3030202,Q-3030203,Q-30301,Q-30303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:   # 计算所需的指标
            - |
              df['C-101'] = df['C-101'] * 100

              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100

              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['QS-10101014'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-102']
              df['QS-103012'] = df['Q-10301'] + df['Q-10302']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201']
              df['QS-104013'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']
              df['Y-QS-1'] = df['QS-10101014'] + df['QS-103012'] + df['QS-104013']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20602'] + df['Q-20603'] + df['Q-20604'] + df['Q-20605']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703'] + df['Q-20704']
              df['QS-2017'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['QS-204010'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['Y-QS-2'] = df['QS-2017'] + df['QS-204010']

              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Y-QS-3'] = df['Q-301'] + df['Q-302'] + df['Q-303']

              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - pad_cols: # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
            default_value: 0
        - fetch_cols:
            columns: [team_id_O2,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - sort_by_columns:    #  按照列名进行排序
            sort_list: [team_id_O2,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - run_py:   # 行列格式转换
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - stash_push_df: []
        - stash_join_df:
            on: [team_id_O2,subject_code]
            how: outer
            drop_stash: true
        - set_meta_month_column:
            - book_month
        - df_fillna:
            value: 0
        - df_rename_columns:
            - team_id_O2: team_id
        - fetch_cols:
            columns: [team_id,subject_code,monthly_actual,quarter_actual,year_actual,book_month]
        - drop_duplicates:
            subset: [team_id,subject_code,monthly_actual,quarter_actual,year_actual,book_month]


### 汇总-月维度-team维度-O2
    - name: team_Pre_computation_table_O2
      sync_result: true
      cooks:
        - use_df:
            key: team_Pre_computation_actual_table_O2
        - stash_push_df: []
        - fetch_dataset:
            dataset_type_code: team_Pre_computation_actual_table_O2
            dataset_cate: std
            month_offset: -1
            columns: [team_id,subject_code,monthly_actual]
            ignore_null_error: true
            empty_df_record:
              team_id: '-'
              subject_code: '-'
              monthly_actual: 0.0
            rename:
              monthly_actual: monthly_actual_before
        - stash_push_df: []
        - stash_join_df:
            on: [team_id,subject_code]
            how: right
            drop_stash: true
        - stash_push_df: []
### 计算环比，获取上个季度最全的数据，例如（7-9月属于Q3，我要获取Q2的数据，获取最全的6月份数据）每个月动态获取
        - fetch_dataset:
            dataset_type_code: team_Pre_computation_actual_table_O2
            dataset_cate: std
            month_range: True
            month_delta: -3
            ignore_null_error: true
            columns: [team_id,subject_code,quarter_actual,book_month]
            empty_df_record:
              team_id: '-'
              subject_code: '-'
              quarter_actual: 0.0
              book_month: 197901
            rename:
              quarter_actual: quarter_actual_before
        - df_to_str:
            - book_month
        - run_py:
            - |
              df['month'] = df['book_month'].apply(lambda x:x[4:])
              df['month'] = df['month'].astype(int)
              month_now1 = df['month'].max()
              df = df[df['month'] == (month_now1//3-(month_now1-(month_now1//3*3)==0)+4*((month_now1//3-(month_now1-(month_now1//3*3)==0))==0))*3]
              result = df
        - fetch_cols:
            columns: [team_id,subject_code,quarter_actual_before]
        - stash_push_df: []
        - stash_join_df:
            on: [team_id,subject_code]
            how: right
            drop_stash: true
        - pad_cols:
            columns: [ quarter_actual_before,monthly_actual_before ]
            default_value: 0
        - push_dataset:
            key: mini

        - fetch_dataset:     ## 预算数据
            dataset_type_code: budget_summary
            dataset_cate: std
            ignore_null_error: true
            empty_df_record:
              ac_code: '-'
              team_id: '-'
              ac_id: '-'
              book_year: 1979
              book_month: 197901
              money: 0.0
              sub_industry_name: '-'
              org_bu: '-'
              org_bu_division: '-'
              team_code: '-'
              team_cate: '-'
            rename:
              ac_code: subject_code
              money: budget
              book_month: month
        - df_select:
            - '[team_cate] == @p1'
            - p1: O2
        - set_meta_month_column:
            - book_month
        - push_dataset:
            key: mini1
        - use_df:
            key: mini1
        - df_select:    ## 筛选当前月份预算数据
            - '[book_month] == [month]'
        - df_pivot_table: # 透视表
            values: budget
            index: [ team_id ]
            columns: [ subject_code ]
            aggfunc: sum
        - df_reset_index: []
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [team_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - df_fillna:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            value: 0
        - run_py:   ## 求得利润、利润率、code利润、code利润率预算数据后期进行匹配
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_budget
        - stash_push_df: []
        - use_df:
            key: mini1
        - run_py:   ## 自动筛选当前季度月份数据，假设当前为8月份，应筛选为7、8、9月份数据，当前为6月份，筛选4、5、6月份数据
            - |
              df['月份_now'] = df['month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['月份_now'] = df['月份_now'].astype(int)
              df['month_now'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_now2 = df['month_now'].max()
              df = df[df['月份_now'] >= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1)]
              df = df[df['月份_now'] <= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1) + 2]
              result = df
        - df_pivot_table: # 透视表
            values: budget
            index: [ team_id ]
            columns: [ subject_code ]
            aggfunc: sum
        - df_reset_index: []
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [team_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - df_fillna:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            value: 0
        - run_py:   # 计算code利润等指标，并进行行列格式转换
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_budget
        - stash_push_df: []
        - use_df:
            key: mini1
        - df_pivot_table: # 透视表
            values: budget
            index: [ team_id ]
            columns: [ subject_code ]
            aggfunc: sum
        - df_reset_index: []
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [team_id,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - df_fillna:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            value: 0
        - run_py:  # 指标计算以及，行列格式转换
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_budget
        - stash_push_df: []
        - stash_join_df:
            on: [team_id,subject_code]
            how: outer
            drop_stash: true
        - stash_push_df: []
        - use_df:
            key: mini
        - fetch_cols:
            columns: [ team_id,subject_code,quarter_actual_before,monthly_actual_before,book_month,year_actual,quarter_actual,monthly_actual ]
        - stash_push_df: []
        - stash_join_df:
            on: [team_id,subject_code]
            how: outer
            drop_stash: true
        - df_fillna:
            columns: [ monthly_actual_before,quarter_actual,year_actual,quarter_actual_before,monthly_actual,year_budget,monthly_budget,quarter_budget ]
            value: 0
        - push_dataset:
            key: aiai
        - use_df:
            key: aiai
        - df_select:
            - '[subject_code] != @p1'
            - p1: [code利润率,利润率]
        - run_py: ## 计算月环比、预算达成率
            - |
              df['MOM'] = 0.0
              df['QOQ'] = 0.0
              df['monthly_budget_achievement_rate'] = 0.0
              df['quarter_budget_achievement_rate'] = 0.0
              df['year_budget_achievement_rate'] = 0.0
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] > 0,(df['monthly_actual'] - df['monthly_actual_before']) / df['monthly_actual_before'])
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] < 0,(df['monthly_actual'] - df['monthly_actual_before']) / (-df['monthly_actual_before']))
              df['monthly_budget_achievement_rate'] = df['monthly_budget_achievement_rate'].mask(df['monthly_budget'] > 0,df['monthly_actual'] / df['monthly_budget'])
              df['monthly_budget_achievement_rate'] = df['monthly_budget_achievement_rate'].mask(df['monthly_budget'] < 0,2 - df['monthly_actual'] / df['monthly_budget'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] > 0,(df['quarter_actual'] - df['quarter_actual_before']) / df['quarter_actual_before'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] < 0,(df['quarter_actual'] - df['quarter_actual_before']) / (-df['quarter_actual_before']))
              df['quarter_budget_achievement_rate'] = df['quarter_budget_achievement_rate'].mask(df['quarter_budget'] > 0,df['quarter_actual'] / df['quarter_budget'])
              df['quarter_budget_achievement_rate'] = df['quarter_budget_achievement_rate'].mask(df['quarter_budget'] < 0,2 - df['quarter_actual'] / df['quarter_budget'])
              df['year_budget_achievement_rate'] = df['year_budget_achievement_rate'].mask(df['year_budget'] > 0,df['year_actual'] / df['year_budget'])
              df['year_budget_achievement_rate'] = df['year_budget_achievement_rate'].mask(df['year_budget'] < 0,2 - df['year_actual'] / df['year_budget'])
              df = df[df['team_id'].notnull()]
              df['book_day'] = np.datetime64('now')
              result = df
        - stash_push_df: []
        - use_df:
            key: aiai
        - df_select:
            - '[subject_code] == @p1'
            - p1: [code利润率,利润率]
        - run_py: ## 计算月环比、预算达成率
            - |
              df['MOM'] = 0.0
              df['QOQ'] = 0.0
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] > 0,(df['monthly_actual'] - df['monthly_actual_before']) / df['monthly_actual_before'])
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] < 0,(df['monthly_actual'] - df['monthly_actual_before']) / (-df['monthly_actual_before']))
              df['monthly_budget_achievement_rate'] = df['monthly_actual'] - df['monthly_budget']
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] > 0,(df['quarter_actual'] - df['quarter_actual_before']) / df['quarter_actual_before'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] < 0,(df['quarter_actual'] - df['quarter_actual_before']) / (-df['quarter_actual_before']))
              df['quarter_budget_achievement_rate'] = df['quarter_actual'] - df['quarter_budget']
              df['year_budget_achievement_rate'] = df['year_actual'] - df['year_budget']
              df = df[df['team_id'].notnull()]
              df['book_day'] = np.datetime64('now')
              result = df
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - set_meta_month_column:
            - book_month
        - drop_duplicates:
            subset: [ quarter_actual,team_id,monthly_actual_before,book_month,year_actual,monthly_actual,subject_code,quarter_actual_before,year_budget,monthly_budget,quarter_budget,MOM,QOQ,monthly_budget_achievement_rate,quarter_budget_achievement_rate,year_budget_achievement_rate,book_day ]



### 汇总月维度、季度维度、年维度-分部维度-实际值，  下个月读取，计算环比，防止自循环
    - name: org_bu_division_Pre_computation_actual_table
      sync_result: true
      cooks:
### 月维度
        - use_df:
            key: financial_statement_copy
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:   # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [ C-101,C-201,C-202,C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-10301,Q-10302,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20601,Q-20602,Q-20603,Q-20604,Q-20605,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-20704,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-3020101,Q-3020102,Q-30101,Q-30102,Q-30103,Q-30104,Q-30105,Q-30106,Q-30107,Q-30108,Q-30202,Q-30203,Q-30204,Q-30205,Q-30206,Q-30207,Q-30208,Q-30209,Q-30210,Q-3030201,Q-3030202,Q-3030203,Q-30301,Q-30303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:   # 计算所需的指标
            - |
              df['C-101'] = df['C-101'] * 100

              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100

              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['QS-10101014'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-102']
              df['QS-103012'] = df['Q-10301'] + df['Q-10302']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201']
              df['QS-104013'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']
              df['Y-QS-1'] = df['QS-10101014'] + df['QS-103012'] + df['QS-104013']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20602'] + df['Q-20603'] + df['Q-20604'] + df['Q-20605']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703'] + df['Q-20704']
              df['QS-2017'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['QS-204010'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['Y-QS-2'] = df['QS-2017'] + df['QS-204010']

              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Y-QS-3'] = df['Q-301'] + df['Q-302'] + df['Q-303']

              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - pad_cols: # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
            default_value: 0
        - fetch_cols:
            columns: [org_bu_division,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - sort_by_columns:    #  按照列名进行排序
            sort_list: [org_bu_division,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - run_py:    # 将列转换为行，格式要求，拼接预算数据进行计算
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - stash_push_df: []

### 季度维度-分部维度
        - fetch_dataset:   # 一个季度，获取本月以及前两个月的数据
            dataset_type_code: financial_statement_copy
            dataset_cate: std
            month_range: True
            month_delta: -2
            columns: [book_month,org_bu_division,ac_code,money]
            ignore_null_error: true
            empty_df_record:
              org_bu_division: '-'
              book_month: 197901
              ac_code: '-'
              money: 0.0
        - run_py:    # 判断并获取一个季度的数据，若为8月，则上面拼接为6、7、8月份数据，筛选过后为7、8月份数据
            - |
              df = df[df['book_month'].notnull()]
              df['month'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month'] = df['month'].astype(int)
              month_now = df['month'].max()
              df['时间先后情况'] = df['month']-((month_now//3-(month_now-(month_now//3*3) ==0))*3+1)
              df = df[df['时间先后情况']>=0]
              result = df
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:   # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [ C-101,C-201,C-202,C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-10301,Q-10302,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20601,Q-20602,Q-20603,Q-20604,Q-20605,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-20704,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-3020101,Q-3020102,Q-30101,Q-30102,Q-30103,Q-30104,Q-30105,Q-30106,Q-30107,Q-30108,Q-30202,Q-30203,Q-30204,Q-30205,Q-30206,Q-30207,Q-30208,Q-30209,Q-30210,Q-3030201,Q-3030202,Q-3030203,Q-30301,Q-30303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:   # 计算所需的指标
            - |
              df['C-101'] = df['C-101'] * 100

              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100

              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['QS-10101014'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-102']
              df['QS-103012'] = df['Q-10301'] + df['Q-10302']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201']
              df['QS-104013'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']
              df['Y-QS-1'] = df['QS-10101014'] + df['QS-103012'] + df['QS-104013']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20602'] + df['Q-20603'] + df['Q-20604'] + df['Q-20605']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703'] + df['Q-20704']
              df['QS-2017'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['QS-204010'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['Y-QS-2'] = df['QS-2017'] + df['QS-204010']

              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Y-QS-3'] = df['Q-301'] + df['Q-302'] + df['Q-303']

              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - pad_cols: # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
            default_value: 0
        - fetch_cols:
            columns: [org_bu_division,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - sort_by_columns:    #  按照列名进行排序
            sort_list: [org_bu_division,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - run_py:    # 将列转换为行，格式要求，拼接预算数据进行计算
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - stash_push_df: []

### 年维度-分部维度
        - fetch_dataset:   # 获取近一年的数据
            dataset_type_code: financial_statement_copy
            dataset_cate: std
            month_range: True
            month_delta: -11
            columns: [book_month,org_bu_division,ac_code,money]
            ignore_null_error: true
            empty_df_record:
              org_bu_division: '-'
              book_month: 197901
              ac_code: '-'
              money: 0.0
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:   # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [ C-101,C-201,C-202,C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-10301,Q-10302,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20601,Q-20602,Q-20603,Q-20604,Q-20605,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-20704,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-3020101,Q-3020102,Q-30101,Q-30102,Q-30103,Q-30104,Q-30105,Q-30106,Q-30107,Q-30108,Q-30202,Q-30203,Q-30204,Q-30205,Q-30206,Q-30207,Q-30208,Q-30209,Q-30210,Q-3030201,Q-3030202,Q-3030203,Q-30301,Q-30303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:   # 计算所需的指标
            - |
              df['C-101'] = df['C-101'] * 100

              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100

              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['QS-10101014'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-102']
              df['QS-103012'] = df['Q-10301'] + df['Q-10302']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201']
              df['QS-104013'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']
              df['Y-QS-1'] = df['QS-10101014'] + df['QS-103012'] + df['QS-104013']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20602'] + df['Q-20603'] + df['Q-20604'] + df['Q-20605']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703'] + df['Q-20704']
              df['QS-2017'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['QS-204010'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['Y-QS-2'] = df['QS-2017'] + df['QS-204010']

              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Y-QS-3'] = df['Q-301'] + df['Q-302'] + df['Q-303']

              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - pad_cols: # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
            default_value: 0
        - fetch_cols:
            columns: [org_bu_division,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - sort_by_columns:    #  按照列名进行排序
            sort_list: [org_bu_division,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - run_py:   # 行列格式转换
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu_division,subject_code]
            how: outer
            drop_stash: true
        - df_fillna:
            value: 0
        - set_meta_month_column:
            - book_month
        - fetch_cols:
            columns: [org_bu_division,subject_code,monthly_actual,quarter_actual,year_actual,book_month]
        - drop_duplicates:
            subset: [ org_bu_division,subject_code,monthly_actual,quarter_actual,year_actual,book_month ]


### 汇总-分部维度-team维度
    - name: org_bu_division_Pre_computation_table
      sync_result: true
      cooks:
        - use_df:
            key: org_bu_division_Pre_computation_actual_table
        - push_dataset:
            key: org_bu_division_Pre_computation_table_mini
        - fetch_dataset:
            dataset_type_code: org_bu_division_Pre_computation_actual_table
            dataset_cate: std
            month_range: True
            month_delta: -1
            columns: [org_bu_division,subject_code,monthly_actual,book_month]
            ignore_null_error: true
            empty_df_record:
              org_bu_division: '-'
              subject_code: '-'
              monthly_actual: 0.0
              book_month: 197901
            rename:
              monthly_actual: monthly_actual_before
        - stash_push_df: []
        - use_df:    ## 运行数据为1月份时，获取20年决算数据计算环比
            key: final_summary_copy
            rename:
              monthly_actual: monthly_actual_before
        - df_select:
            - '[type] == @p1'
            - p1: org_bu_division
        - fetch_cols:
            columns: [org_bu_division,subject_code,monthly_actual_before,book_month]
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - run_py:
            - |
              df = to_df(df).copy()
              max_month = df['book_month'].max()
              year = int(str(max_month)[:4])
              month = int(str(max_month)[4:])
              if month - 1 == 0:
                  year = year - 1
                  month = 12
                  df['book_now'] = year * 100 + month
              else:
                  month = month - 1
                  df['book_now'] = year * 100 + month
              result = to_dd(df)
        - df_select:
            - '[book_month] == [book_now]'
        - fetch_cols:
            columns: [org_bu_division,subject_code,monthly_actual_before]
        - stash_push_df: []
        - use_df:
            key: org_bu_division_Pre_computation_table_mini
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu_division,subject_code]
            how: left
            drop_stash: true
        - push_dataset:
            key: org_bu_division_Pre_computation_table_mini1
#### 计算环比，获取上个季度最全的数据，例如（7-9月属于Q3，我要获取Q2的数据，获取最全的6月份数据）每个月动态获取
        - fetch_dataset:
            dataset_type_code: org_bu_division_Pre_computation_actual_table
            dataset_cate: std
            month_range: True
            month_delta: -3
            ignore_null_error: true
            columns: [org_bu_division,subject_code,quarter_actual,book_month]
            empty_df_record:
              org_bu_division: '-'
              subject_code: '-'
              quarter_actual: 0
              book_month: 197901
            rename:
              quarter_actual: quarter_actual_before
        - stash_push_df: []
        - use_df:
            key: final_summary_copy
            rename:
              quarter_actual: quarter_actual_before
        - df_select:
            - '[type] == @p1'
            - p1: org_bu_division
        - fetch_cols:
            columns: [org_bu_division,subject_code,quarter_actual_before,book_month]
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - df_to_int:
            - book_month
        - run_py:
            - |
              df['month'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month'] = df['month'].astype(int)
              df['max_month'] = df['book_month'].max()
              df['month_now'] = df['max_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_now1 = df['month_now'].max()
              df = df[df['month'] == (month_now1//3-(month_now1-(month_now1//3*3)==0)+4*((month_now1//3-(month_now1-(month_now1//3*3)==0))==0))*3]
              result = df
        - fetch_cols:
            columns: [org_bu_division,subject_code,quarter_actual_before]
        - stash_push_df: []
        - use_df:
            key: org_bu_division_Pre_computation_table_mini1
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu_division,subject_code]
            how: left
            drop_stash: true
        - pad_cols:
            columns: [ quarter_actual_before,monthly_actual_before ]
            default_value: 0
        - push_dataset:
            key: mili

        - fetch_dataset:     ## 预算数据
            dataset_type_code: budget_summary
            dataset_cate: std
            ignore_null_error: true
            empty_df_record:
              ac_code: '-'
              team_id: '-'
              ac_id: '-'
              book_year: 1979
              book_month: 197901
              money: 0.0
              sub_industry_name: '-'
              org_bu: '-'
              org_bu_division: '-'
              team_code: '-'
              team_cate: '-'
            rename:
              ac_code: subject_code
              money: budget
              book_month: month
        - run_py:  ## 筛选 team_cate 为空,并且 org_bu_division 不为空的即为 分部 对应数据
            - |
              df = df[df['team_cate'].isnull()]
              df = df[df['org_bu_division'].notnull()]
              result = df
        - set_meta_month_column:
            - book_month
        - push_dataset:
            key: mili1
        - use_df:
            key: mili1
        - df_select:    ## 筛选当前月份预算数据
            - '[book_month] == [month]'
        - df_pivot_table: # 透视表
            values: budget
            index: [ org_bu_division ]
            columns: [ subject_code ]
            aggfunc: sum
        - df_reset_index: []
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [org_bu_division,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - df_fillna:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            value: 0
        - run_py:   ## 求得利润、利润率、code利润、code利润率预算数据后期进行匹配
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_budget
        - stash_push_df: []
        - use_df:
            key: mili1
        - run_py:   ## 自动筛选当前季度月份数据，假设当前为8月份，应筛选为7、8月份数据，当前为6月份，筛选4、5、6月份数据
            - |
              df['月份_now'] = df['month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['月份_now'] = df['月份_now'].astype(int)
              df['month_now'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_now2 = df['month_now'].max()
              df = df[df['月份_now'] >= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1)]
              df = df[df['月份_now'] <= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1) + 2]
              result = df
        - df_pivot_table: # 透视表
            values: budget
            index: [ org_bu_division ]
            columns: [ subject_code ]
            aggfunc: sum
        - df_reset_index: []
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [org_bu_division,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - df_fillna:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            value: 0
        - run_py:   # 计算code利润等指标，并进行行列格式转换
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_budget
        - stash_push_df: []
        - use_df:
            key: mili1
        - df_pivot_table: # 透视表
            values: budget
            index: [ org_bu_division ]
            columns: [ subject_code ]
            aggfunc: sum
        - df_reset_index: []
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [org_bu_division,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - df_fillna:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            value: 0
        - run_py:  # 指标计算以及，行列格式转换
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_budget
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu_division,subject_code]
            how: outer
            drop_stash: true
        - stash_push_df: []
        - use_df:
            key: mili
        - stash_push_df: []
        - stash_join_df:
            on: [ org_bu_division,subject_code ]
            how: outer
            drop_stash: true
        - push_dataset:
            key: mili2

        - fetch_dataset:  # 获取20年决算数据
            dataset_type_code: final_summary
            dataset_cate: std
            month_value: 202012
            ignore_null_error: true
            empty_df_record:
              ac_code: '-'
              team_id: '-'
              ac_id: '-'
              book_year: 1979
              book_month: 197901
              money: 0.0
              sub_industry_name: '-'
              org_bu: '-'
              org_bu_division: '-'
              team_code: '-'
              team_cate: '-'
            rename:
              ac_code: subject_code
              money: actual_before_20
        - run_py: # org_bu_division 不为空则为20年分部决算数据
            - |
              df = df[df['org_bu_division'].notnull()]
              df['subject_code'] = df['subject_code'].apply(lambda x:x.replace('Y-QS-4','利润'))
              result = df
        - set_meta_month_column:
            - month
        - df_to_int:
            - book_month
        - push_dataset:
            key: mili3
        ## 月度
        - use_df:
            key: mili3
        - run_py:
            - |
              df['month_now'] = df['month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_2020 = 202000 + df['month_now'].max()
              df = df[df['book_month'] == month_2020]
              result = df
        - df_groupby:
            by: [org_bu_division,subject_code]
        - df_sum:
            column: actual_before_20
            rename: monthly_actual_before_20
        - df_reset_index: []
        - stash_push_df: []
        ## 季度
        - use_df:
            key: mili3
        - run_py:
            - |
              df['月份_now'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['月份_now'] = df['月份_now'].astype(int)
              df['month_now'] = df['month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_now2 = df['month_now'].max()
              df = df[df['月份_now'] >= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1)]
              df = df[df['月份_now'] <= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1) + 2]
              result = df
        - df_groupby:
            by: [org_bu_division,subject_code]
        - df_sum:
            column: actual_before_20
            rename: quarter_actual_before_20
        - df_reset_index: []
        - stash_push_df: []
        ## 年度
        - use_df:
            key: mili3
        - df_groupby:
            by: [org_bu_division,subject_code]
        - df_sum:
            column: actual_before_20
            rename: year_actual_before_20
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu_division,subject_code]
            how: outer
            drop_stash: true
        - stash_push_df: []
        - use_df:
            key: mili2
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu_division,subject_code]
            how: left
            drop_stash: true
        - df_fillna:
            value: 0
        - push_dataset:
            key: aibi
        - use_df:
            key: aibi
        - df_select:
            - '[subject_code] != @p1'
            - p1: [ code利润率,利润率 ]
        - run_py:  ## 计算月环比、预算达成率、同比
            - |
              df['MOM'] = 0.0
              df['QOQ'] = 0.0
              df['month_on_month'] = 0.0
              df['quarter_on_quarter'] = 0.0
              df['year_on_year'] = 0.0
              df['monthly_budget_achievement_rate'] = 0.0
              df['quarter_budget_achievement_rate'] = 0.0
              df['year_budget_achievement_rate'] = 0.0
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] > 0,(df['monthly_actual'] - df['monthly_actual_before']) / df['monthly_actual_before'])
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] < 0,(df['monthly_actual'] - df['monthly_actual_before']) / (-df['monthly_actual_before']))
              df['monthly_budget_achievement_rate'] = df['monthly_budget_achievement_rate'].mask(df['monthly_budget'] > 0,df['monthly_actual'] / df['monthly_budget'])
              df['monthly_budget_achievement_rate'] = df['monthly_budget_achievement_rate'].mask(df['monthly_budget'] < 0,2 - df['monthly_actual'] / df['monthly_budget'])
              df['month_on_month'] = df['month_on_month'].mask(df['monthly_actual_before_20'] > 0,(df['monthly_actual'] - df['monthly_actual_before_20']) / df['monthly_actual_before_20'])
              df['month_on_month'] = df['month_on_month'].mask(df['monthly_actual_before_20'] < 0,(df['monthly_actual'] - df['monthly_actual_before_20']) / (-df['monthly_actual_before_20']))
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] > 0,(df['quarter_actual'] - df['quarter_actual_before']) / df['quarter_actual_before'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] < 0,(df['quarter_actual'] - df['quarter_actual_before']) / (-df['quarter_actual_before']))
              df['quarter_budget_achievement_rate'] = df['quarter_budget_achievement_rate'].mask(df['quarter_budget'] > 0,df['quarter_actual'] / df['quarter_budget'])
              df['quarter_budget_achievement_rate'] = df['quarter_budget_achievement_rate'].mask(df['quarter_budget'] < 0,2 - df['quarter_actual'] / df['quarter_budget'])
              df['quarter_on_quarter'] = df['quarter_on_quarter'].mask(df['quarter_actual_before_20'] > 0,(df['quarter_actual'] - df['quarter_actual_before_20']) / df['quarter_actual_before_20'])
              df['quarter_on_quarter'] = df['quarter_on_quarter'].mask(df['quarter_actual_before_20'] < 0,(df['quarter_actual'] - df['quarter_actual_before_20']) / (-df['quarter_actual_before_20']))
              df['year_budget_achievement_rate'] = df['year_budget_achievement_rate'].mask(df['year_budget'] > 0,df['year_actual'] / df['year_budget'])
              df['year_budget_achievement_rate'] = df['year_budget_achievement_rate'].mask(df['year_budget'] < 0,2 - df['year_actual'] / df['year_budget'])
              df['year_on_year'] = df['year_on_year'].mask(df['year_actual_before_20'] > 0,(df['year_actual'] - df['year_actual_before_20']) / df['year_actual_before_20'])
              df['year_on_year'] = df['year_on_year'].mask(df['year_actual_before_20'] < 0,(df['year_actual'] - df['year_actual_before_20']) / (-df['year_actual_before_20']))
              df = df[df['org_bu_division'].notnull()]
              df['book_day'] = np.datetime64('now')
              result = df
        - stash_push_df: []
        - use_df:
            key: aibi
        - df_select:
            - '[subject_code] == @p1'
            - p1: [ code利润率,利润率 ]
        - run_py:  ## 计算月环比、预算达成率、同比
            - |
              df['MOM'] = 0.0
              df['QOQ'] = 0.0
              df['month_on_month'] = 0.0
              df['quarter_on_quarter'] = 0.0
              df['year_on_year'] = 0.0
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] > 0,(df['monthly_actual'] - df['monthly_actual_before']) / df['monthly_actual_before'])
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] < 0,(df['monthly_actual'] - df['monthly_actual_before']) / (-df['monthly_actual_before']))
              df['monthly_budget_achievement_rate'] = df['monthly_actual'] - df['monthly_budget']
              df['month_on_month'] = df['month_on_month'].mask(df['monthly_actual_before_20'] > 0,(df['monthly_actual'] - df['monthly_actual_before_20']) / df['monthly_actual_before_20'])
              df['month_on_month'] = df['month_on_month'].mask(df['monthly_actual_before_20'] < 0,(df['monthly_actual'] - df['monthly_actual_before_20']) / (-df['monthly_actual_before_20']))
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] > 0,(df['quarter_actual'] - df['quarter_actual_before']) / df['quarter_actual_before'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] < 0,(df['quarter_actual'] - df['quarter_actual_before']) / (-df['quarter_actual_before']))
              df['quarter_budget_achievement_rate'] = df['quarter_actual'] - df['quarter_budget']
              df['quarter_on_quarter'] = df['quarter_on_quarter'].mask(df['quarter_actual_before_20'] > 0,(df['quarter_actual'] - df['quarter_actual_before_20']) / df['quarter_actual_before_20'])
              df['quarter_on_quarter'] = df['quarter_on_quarter'].mask(df['quarter_actual_before_20'] < 0,(df['quarter_actual'] - df['quarter_actual_before_20']) / (-df['quarter_actual_before_20']))
              df['year_budget_achievement_rate'] = df['year_actual'] - df['year_budget']
              df['year_on_year'] = df['year_on_year'].mask(df['year_actual_before_20'] > 0,(df['year_actual'] - df['year_actual_before_20']) / df['year_actual_before_20'])
              df['year_on_year'] = df['year_on_year'].mask(df['year_actual_before_20'] < 0,(df['year_actual'] - df['year_actual_before_20']) / (-df['year_actual_before_20']))
              df = df[df['org_bu_division'].notnull()]
              df['book_day'] = np.datetime64('now')
              result = df
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - set_meta_month_column: # 添加当前归属月份，后面进行按照季度筛选数据获取上个季度最全数据做环比
            - book_month
        - drop_duplicates:
            subset: [ quarter_actual,org_bu_division,monthly_actual_before,book_month,year_actual,monthly_actual,subject_code,quarter_actual_before,year_budget,monthly_budget,quarter_budget,MOM,QOQ,monthly_budget_achievement_rate,quarter_budget_achievement_rate,year_budget_achievement_rate,book_day ]




### 汇总月维度、季度维度、年维度-事业部维度-实际值，下个月读取，计算环比，防止自循环
    - name: org_bu_Pre_computation_actual_table
      sync_result: true
      cooks:
        - use_df:
            key: financial_statement_copy
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:   # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [ C-101,C-201,C-202,C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-10301,Q-10302,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20601,Q-20602,Q-20603,Q-20604,Q-20605,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-20704,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-3020101,Q-3020102,Q-30101,Q-30102,Q-30103,Q-30104,Q-30105,Q-30106,Q-30107,Q-30108,Q-30202,Q-30203,Q-30204,Q-30205,Q-30206,Q-30207,Q-30208,Q-30209,Q-30210,Q-3030201,Q-3030202,Q-3030203,Q-30301,Q-30303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:   # 计算所需的指标
            - |
              df['C-101'] = df['C-101'] * 100

              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100

              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['QS-10101014'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-102']
              df['QS-103012'] = df['Q-10301'] + df['Q-10302']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201']
              df['QS-104013'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']
              df['Y-QS-1'] = df['QS-10101014'] + df['QS-103012'] + df['QS-104013']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20602'] + df['Q-20603'] + df['Q-20604'] + df['Q-20605']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703'] + df['Q-20704']
              df['QS-2017'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['QS-204010'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['Y-QS-2'] = df['QS-2017'] + df['QS-204010']

              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Y-QS-3'] = df['Q-301'] + df['Q-302'] + df['Q-303']

              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - pad_cols: # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
            default_value: 0
        - fetch_cols:
            columns: [org_bu,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - sort_by_columns:    #  按照列名进行排序
            sort_list: [org_bu,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - run_py:    # 将列转换为行，格式要求，拼接预算数据进行计算
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - stash_push_df: []

### 季度维度-事业部维度
        - fetch_dataset:   # 一个季度，获取本月以及前两个月的数据
            dataset_type_code: financial_statement_copy
            dataset_cate: std
            month_range: True
            month_delta: -2
            columns: [book_month,org_bu,ac_code,money]
            ignore_null_error: true
            empty_df_record:
              org_bu: '-'
              book_month: 197901
              ac_code: '-'
              money: 0.0
        - run_py:    # 判断并获取一个季度的数据，若为8月，则上面拼接为6、7、8月份数据，筛选过后为7、8月份数据
            - |
              df = df[df['book_month'].notnull()]
              df['month'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month'] = df['month'].astype(int)
              month_now = df['month'].max()
              df['时间先后情况'] = df['month']-((month_now//3-(month_now-(month_now//3*3) ==0))*3+1)
              df = df[df['时间先后情况']>=0]
              result = df
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:   # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [ C-101,C-201,C-202,C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-10301,Q-10302,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20601,Q-20602,Q-20603,Q-20604,Q-20605,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-20704,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-3020101,Q-3020102,Q-30101,Q-30102,Q-30103,Q-30104,Q-30105,Q-30106,Q-30107,Q-30108,Q-30202,Q-30203,Q-30204,Q-30205,Q-30206,Q-30207,Q-30208,Q-30209,Q-30210,Q-3030201,Q-3030202,Q-3030203,Q-30301,Q-30303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:   # 计算所需的指标
            - |
              df['C-101'] = df['C-101'] * 100

              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100

              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['QS-10101014'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-102']
              df['QS-103012'] = df['Q-10301'] + df['Q-10302']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201']
              df['QS-104013'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']
              df['Y-QS-1'] = df['QS-10101014'] + df['QS-103012'] + df['QS-104013']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20602'] + df['Q-20603'] + df['Q-20604'] + df['Q-20605']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703'] + df['Q-20704']
              df['QS-2017'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['QS-204010'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['Y-QS-2'] = df['QS-2017'] + df['QS-204010']

              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Y-QS-3'] = df['Q-301'] + df['Q-302'] + df['Q-303']

              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - pad_cols: # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
            default_value: 0
        - fetch_cols:
            columns: [org_bu,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - sort_by_columns:    #  按照列名进行排序
            sort_list: [org_bu,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - run_py:    # 将列转换为行，格式要求，拼接预算数据进行计算
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - stash_push_df: []

### 年维度-事业部维度
        - fetch_dataset:   # 获取近一年的数据
            dataset_type_code: financial_statement_copy
            dataset_cate: std
            month_range: True
            month_delta: -11
            columns: [book_month,org_bu,ac_code,money]
            ignore_null_error: true
            empty_df_record:
              org_bu: '-'
              book_month: 197901
              ac_code: '-'
              money: 0.0
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:   # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [ C-101,C-201,C-202,C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-10301,Q-10302,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20601,Q-20602,Q-20603,Q-20604,Q-20605,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-20704,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-3020101,Q-3020102,Q-30101,Q-30102,Q-30103,Q-30104,Q-30105,Q-30106,Q-30107,Q-30108,Q-30202,Q-30203,Q-30204,Q-30205,Q-30206,Q-30207,Q-30208,Q-30209,Q-30210,Q-3030201,Q-3030202,Q-3030203,Q-30301,Q-30303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:   # 计算所需的指标
            - |
              df['C-101'] = df['C-101'] * 100

              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100

              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['QS-10101014'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-102']
              df['QS-103012'] = df['Q-10301'] + df['Q-10302']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201']
              df['QS-104013'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']
              df['Y-QS-1'] = df['QS-10101014'] + df['QS-103012'] + df['QS-104013']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20602'] + df['Q-20603'] + df['Q-20604'] + df['Q-20605']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703'] + df['Q-20704']
              df['QS-2017'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['QS-204010'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['Y-QS-2'] = df['QS-2017'] + df['QS-204010']

              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Y-QS-3'] = df['Q-301'] + df['Q-302'] + df['Q-303']

              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - pad_cols: # 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
            default_value: 0
        - fetch_cols:
            columns: [org_bu,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - sort_by_columns:    #  按照列名进行排序
            sort_list: [org_bu,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率,Y-QS-3,Q-301,Q-302,Q-303,利润,利润率]
        - run_py:   # 行列格式转换
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu,subject_code]
            how: outer
            drop_stash: true
        - df_fillna:
            value: 0
        - set_meta_month_column:
            - book_month
        - fetch_cols:
            columns: [org_bu,subject_code,monthly_actual,quarter_actual,year_actual,book_month]
        - drop_duplicates:
            subset: [ org_bu,subject_code,monthly_actual,quarter_actual,year_actual,book_month ]



### 汇总-事业部维度
    - name: org_bu_Pre_computation_table
      sync_result: true
      cooks:
        - use_df:
            key: org_bu_Pre_computation_actual_table
        - push_dataset:
            key: org_bu_Pre_computation_table_mini
        - fetch_dataset:
            dataset_type_code: org_bu_Pre_computation_actual_table
            dataset_cate: std
            month_range: True
            month_delta: -1
            columns: [org_bu,subject_code,monthly_actual,book_month]
            ignore_null_error: true
            empty_df_record:
              org_bu: '-'
              subject_code: '-'
              monthly_actual: 0.0
              book_month: 197901
            rename:
              monthly_actual: monthly_actual_before
        - stash_push_df: []
        - use_df:
            key: final_summary_copy
            rename:
              monthly_actual: monthly_actual_before
        - df_select:
            - '[type] == @p1'
            - p1: org_bu
        - fetch_cols:
            columns: [org_bu,subject_code,monthly_actual_before,book_month]
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - run_py:
            - |
              df = to_df(df).copy()
              max_month = df['book_month'].max()
              year = int(str(max_month)[:4])
              month = int(str(max_month)[4:])
              if month - 1 == 0:
                  year = year - 1
                  month = 12
                  df['book_now'] = year * 100 + month
              else:
                  month = month - 1
                  df['book_now'] = year * 100 + month
              result = to_dd(df)
        - df_select:
            - '[book_month] == [book_now]'
        - fetch_cols:
            columns: [org_bu,subject_code,monthly_actual_before]
        - stash_push_df: []
        - use_df:
            key: org_bu_Pre_computation_table_mini
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu,subject_code]
            how: left
            drop_stash: true
        - push_dataset:
            key: org_bu_Pre_computation_table_mini1
### 计算环比，获取上个季度最全的数据，例如（7-9月属于Q3，我要获取Q2的数据，获取最全的6月份数据）每个月动态获取
        - fetch_dataset:
            dataset_type_code: org_bu_Pre_computation_actual_table
            dataset_cate: std
            month_range: True
            month_delta: -3
            ignore_null_error: true
            columns: [org_bu,subject_code,quarter_actual,book_month]
            empty_df_record:
              org_bu: '-'
              subject_code: '-'
              quarter_actual: 0
              book_month: 197901
            rename:
              quarter_actual: quarter_actual_before
        - stash_push_df: []
        - use_df:
            key: final_summary_copy
            rename:
              quarter_actual: quarter_actual_before
        - df_select:
            - '[type] == @p1'
            - p1: org_bu
        - fetch_cols:
            columns: [org_bu,subject_code,quarter_actual_before,book_month]
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - df_to_int:
            - book_month
        - run_py:
            - |
              df['month'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month'] = df['month'].astype(int)
              df['max_month'] = df['book_month'].max()
              df['month_now'] = df['max_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_now1 = df['month_now'].max()
              df = df[df['month'] == (month_now1//3-(month_now1-(month_now1//3*3)==0)+4*((month_now1//3-(month_now1-(month_now1//3*3)==0))==0))*3]
              result = df
        - fetch_cols:
            columns: [org_bu,subject_code,quarter_actual_before]
        - stash_push_df: []
        - use_df:
            key: org_bu_Pre_computation_table_mini1
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu,subject_code]
            how: left
            drop_stash: true
        - pad_cols:
            columns: [ quarter_actual_before,monthly_actual_before ]
            default_value: 0
        - push_dataset:
            key: mimi

        - fetch_dataset:     ## 预算数据
            dataset_type_code: budget_summary
            dataset_cate: std
            ignore_null_error: true
            empty_df_record:
              ac_code: '-'
              team_id: '-'
              ac_id: '-'
              book_year: 1979
              book_month: 197901
              money: 0.0
              sub_industry_name: '-'
              org_bu: '-'
              org_bu_division: '-'
              team_code: '-'
              team_cate: '-'
            rename:
              ac_code: subject_code
              money: budget
              book_month: month
        - run_py:  ## 筛选 team_cate 为空,并且 org_bu 不为空的即为 事业部 对应数据
            - |
              df = df[df['team_cate'].isnull()]
              df = df[df['org_bu'].notnull()]
              result = df
        - set_meta_month_column:
            - book_month
        - push_dataset:
            key: mimi1
        ## 月度
        - use_df:
            key: mimi1
        - df_select:    ## 筛选当前月份预算数据
            - '[book_month] == [month]'
        - df_pivot_table: # 透视表
            values: budget
            index: [ org_bu ]
            columns: [ subject_code ]
            aggfunc: sum
        - df_reset_index: []
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [org_bu,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - df_fillna:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            value: 0
        - run_py:   ## 求得利润、利润率、code利润、code利润率预算数据后期进行匹配
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_budget
        - stash_push_df: []
        ## 季度
        - use_df:
            key: mimi1
        - run_py:   ## 自动筛选当前季度月份数据，假设当前为8月份，应筛选为7、8月份数据，当前为6月份，筛选4、5、6月份数据
            - |
              df['月份_now'] = df['month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['月份_now'] = df['月份_now'].astype(int)
              df['month_now'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_now2 = df['month_now'].max()
              df = df[df['月份_now'] >= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1)]
              df = df[df['月份_now'] <= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1) + 2]
              result = df
        - df_pivot_table: # 透视表
            values: budget
            index: [ org_bu ]
            columns: [ subject_code ]
            aggfunc: sum
        - df_reset_index: []
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [org_bu,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - df_fillna:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            value: 0
        - run_py:   # 计算code利润等指标，并进行行列格式转换
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_budget
        - stash_push_df: []
        ## 年度
        - use_df:
            key: mimi1
        - df_pivot_table: # 透视表
            values: budget
            index: [ org_bu ]
            columns: [ subject_code ]
            aggfunc: sum
        - df_reset_index: []
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [org_bu,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - df_fillna:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            value: 0
        - run_py:  # 指标计算以及，行列格式转换
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_budget
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu,subject_code]
            how: outer
            drop_stash: true
        - stash_push_df: []
        - use_df:
            key: mimi
        - stash_push_df: []
        - stash_join_df:
            on: [ org_bu,subject_code ]
            how: outer
            drop_stash: true
        - push_dataset:
            key: mimi2

        - fetch_dataset:  # 获取20年决算数据
            dataset_type_code: final_summary
            dataset_cate: std
            month_value: 202012
            ignore_null_error: true
            empty_df_record:
              ac_code: '-'
              team_id: '-'
              ac_id: '-'
              book_year: 1979
              book_month: 197901
              money: 0.0
              sub_industry_name: '-'
              org_bu: '-'
              org_bu_division: '-'
              team_code: '-'
              team_cate: '-'
            rename:
              ac_code: subject_code
              money: actual_before_20
        - run_py:   # org_bu 不为空则为20年事业部决算数据
            - |
              df = df[df['org_bu'].notnull()]
              df['subject_code'] = df['subject_code'].apply(lambda x:x.replace('Y-QS-4','利润'))
              result = df
        - set_meta_month_column:
            - month
        - df_to_int:
            - book_month
        - push_dataset:
            key: mimi3
        ## 月度
        - use_df:
            key: mimi3
        - run_py: # org_bu 不为空则为20年分部决算数据
            - |
              df['month_now'] = df['month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_2020 = 202000 + df['month_now'].max()
              df = df[df['book_month'] == month_2020]
              result = df
        - df_groupby:
            by: [org_bu,subject_code]
        - df_sum:
            column: actual_before_20
            rename: monthly_actual_before_20
        - df_reset_index: []
        - stash_push_df: []
        ## 季度
        - use_df:
            key: mimi3
        - run_py:
            - |
              df['月份_now'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['月份_now'] = df['月份_now'].astype(int)
              df['month_now'] = df['month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_now2 = df['month_now'].max()
              df = df[df['月份_now'] >= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1)]
              df = df[df['月份_now'] <= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1) + 2]
              result = df
        - df_groupby:
            by: [org_bu,subject_code]
        - df_sum:
            column: actual_before_20
            rename: quarter_actual_before_20
        - df_reset_index: []
        - stash_push_df: []
        ## 年度
        - use_df:
            key: mimi3
        - df_groupby:
            by: [org_bu,subject_code]
        - df_sum:
            column: actual_before_20
            rename: year_actual_before_20
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu,subject_code]
            how: outer
            drop_stash: true
        - stash_push_df: []
        - use_df:
            key: mimi2
        - stash_push_df: []
        - stash_join_df:
            on: [ org_bu,subject_code ]
            how: left
            drop_stash: true
        - df_fillna:
            value: 0
        - push_dataset:
            key: aici
        - use_df:
            key: aici
        - df_select:
            - '[subject_code]!= @p1'
            - p1: [code利润率,利润率]
        - run_py:  ## 计算月环比、预算达成率
            - |
              df['MOM'] = 0.0
              df['QOQ'] = 0.0
              df['month_on_month'] = 0.0
              df['year_on_year'] = 0.0
              df['quarter_on_quarter'] = 0.0
              df['monthly_budget_achievement_rate'] = 0.0
              df['quarter_budget_achievement_rate'] = 0.0
              df['year_budget_achievement_rate'] = 0.0
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] > 0,(df['monthly_actual'] - df['monthly_actual_before']) / df['monthly_actual_before'])
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] < 0,(df['monthly_actual'] - df['monthly_actual_before']) / (-df['monthly_actual_before']))
              df['monthly_budget_achievement_rate'] = df['monthly_budget_achievement_rate'].mask(df['monthly_budget'] > 0,df['monthly_actual'] / df['monthly_budget'])
              df['monthly_budget_achievement_rate'] = df['monthly_budget_achievement_rate'].mask(df['monthly_budget'] < 0,2 - df['monthly_actual'] / df['monthly_budget'])
              df['month_on_month'] = df['month_on_month'].mask(df['monthly_actual_before_20'] > 0,(df['monthly_actual'] - df['monthly_actual_before_20']) / df['monthly_actual_before_20'])
              df['month_on_month'] = df['month_on_month'].mask(df['monthly_actual_before_20'] < 0,(df['monthly_actual'] - df['monthly_actual_before_20']) / (-df['monthly_actual_before_20']))
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] > 0,(df['quarter_actual'] - df['quarter_actual_before']) / df['quarter_actual_before'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] < 0,(df['quarter_actual'] - df['quarter_actual_before']) / (-df['quarter_actual_before']))
              df['quarter_budget_achievement_rate'] = df['quarter_budget_achievement_rate'].mask(df['quarter_budget'] > 0,df['quarter_actual'] / df['quarter_budget'])
              df['quarter_budget_achievement_rate'] = df['quarter_budget_achievement_rate'].mask(df['quarter_budget'] < 0,2 - df['quarter_actual'] / df['quarter_budget'])
              df['quarter_on_quarter'] = df['quarter_on_quarter'].mask(df['quarter_actual_before_20'] > 0,(df['quarter_actual'] - df['quarter_actual_before_20']) / df['quarter_actual_before_20'])
              df['quarter_on_quarter'] = df['quarter_on_quarter'].mask(df['quarter_actual_before_20'] < 0,(df['quarter_actual'] - df['quarter_actual_before_20']) / (-df['quarter_actual_before_20']))
              df['year_budget_achievement_rate'] = df['year_budget_achievement_rate'].mask(df['year_budget'] > 0,df['year_actual'] / df['year_budget'])
              df['year_budget_achievement_rate'] = df['year_budget_achievement_rate'].mask(df['year_budget'] < 0,2 - df['year_actual'] / df['year_budget'])
              df['year_on_year'] = df['year_on_year'].mask(df['year_actual_before_20'] > 0,(df['year_actual'] - df['year_actual_before_20']) / df['year_actual_before_20'])
              df['year_on_year'] = df['year_on_year'].mask(df['year_actual_before_20'] < 0,(df['year_actual'] - df['year_actual_before_20']) / (-df['year_actual_before_20']))
              df = df[df['org_bu'].notnull()]
              df['book_day'] = np.datetime64('now')
              result = df
        - stash_push_df: []
        - use_df:
            key: aici
        - df_select:
            - '[subject_code] == @p1'
            - p1: [ code利润率,利润率 ]
        - run_py:  ## 计算月环比、预算达成率
            - |
              df['MOM'] = 0.0
              df['QOQ'] = 0.0
              df['month_on_month'] = 0.0
              df['year_on_year'] = 0.0
              df['quarter_on_quarter'] = 0.0
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] > 0,(df['monthly_actual'] - df['monthly_actual_before']) / df['monthly_actual_before'])
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] < 0,(df['monthly_actual'] - df['monthly_actual_before']) / (-df['monthly_actual_before']))
              df['monthly_budget_achievement_rate'] = df['monthly_actual'] - df['monthly_budget']
              df['month_on_month'] = df['month_on_month'].mask(df['monthly_actual_before_20'] > 0,(df['monthly_actual'] - df['monthly_actual_before_20']) / df['monthly_actual_before_20'])
              df['month_on_month'] = df['month_on_month'].mask(df['monthly_actual_before_20'] < 0,(df['monthly_actual'] - df['monthly_actual_before_20']) / (-df['monthly_actual_before_20']))
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] > 0,(df['quarter_actual'] - df['quarter_actual_before']) / df['quarter_actual_before'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] < 0,(df['quarter_actual'] - df['quarter_actual_before']) / (-df['quarter_actual_before']))
              df['quarter_budget_achievement_rate'] = df['quarter_actual'] - df['quarter_budget']
              df['quarter_on_quarter'] = df['quarter_on_quarter'].mask(df['quarter_actual_before_20'] > 0,(df['quarter_actual'] - df['quarter_actual_before_20']) / df['quarter_actual_before_20'])
              df['quarter_on_quarter'] = df['quarter_on_quarter'].mask(df['quarter_actual_before_20'] < 0,(df['quarter_actual'] - df['quarter_actual_before_20']) / (-df['quarter_actual_before_20']))
              df['year_budget_achievement_rate'] = df['year_actual'] - df['year_budget']
              df['year_on_year'] = df['year_on_year'].mask(df['year_actual_before_20'] > 0,(df['year_actual'] - df['year_actual_before_20']) / df['year_actual_before_20'])
              df['year_on_year'] = df['year_on_year'].mask(df['year_actual_before_20'] < 0,(df['year_actual'] - df['year_actual_before_20']) / (-df['year_actual_before_20']))
              df = df[df['org_bu'].notnull()]
              df['book_day'] = np.datetime64('now')
              result = df
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - set_meta_month_column: # 添加当前归属月份，后面进行按照季度筛选数据获取上个季度最全数据做环比
            - book_month
        - drop_duplicates:
            subset: [ quarter_actual,org_bu,monthly_actual_before,book_month,year_actual,monthly_actual,subject_code,quarter_actual_before,year_budget,monthly_budget,quarter_budget,MOM,QOQ,monthly_budget_achievement_rate,quarter_budget_achievement_rate,year_budget_achievement_rate,book_day ]




### 汇总月维度、季度维度、年维度-team-code维度-实际值，下个月读取，计算环比，防止自循环
    - name: code_team_Pre_computation_actual_table
      sync_result: true
      cooks:
### 月维度-team-code维度
        - use_df:
            key: financial_statement_copy
        - df_select:
            - '[ac_rule_kind] == @p1'
            - p1: code
        - df_groupby:
            by: [team_id,team_code,industry_id,platform_id,ac_code]
        - df_sum:
            column: [money]
        - df_reset_index: []
        - push_dataset:
            key: monthly_code_mini
        ## 外卖
        - use_df:
            key: monthly_code_mini
        - df_select:
            - '[industry_id] == @p1'
            - p1: wai_mai
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:   ## 财报明细单位为分，换算为元，但后期车辆数与单量需在 * 100
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:  ## 判断列是否存在，不存在则创建该列赋值默认值
            columns: [ C-101,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20601,Q-20604,Q-20605,Q-20701,Q-20702,Q-20704,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['C-101'] = df['C-101'] * 100
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20604'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-206'] + df['Q-207']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 外卖
        - stash_push_df: []
        ## 单车
        - use_df:
            key: monthly_code_mini
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [qingju, haluo, mobike, gofun, tianmao]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20602,Q-20603,Q-20605,Q-20701,Q-20702,Q-20704,Q-701,C-201,C-202,Q-10301,Q-10302 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-206'] = df['Q-20602'] + df['Q-20603'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['Y-QS-1'] = df['Q-10301'] + df['Q-10302']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 单车
        - stash_push_df: []
        ## 网约车
        - use_df:
            key: monthly_code_mini
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [didi, caocaochuxing]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204']
              df['Y-QS-1'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Y-QS-2'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 网约车
        - stash_push_df: []
        ## 橙途
        - use_df:
            key: monthly_code_mini
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [chengtu]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010202,Q-1010203,Q-1010204,Q-1010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-1010102'] + df['Q-102']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 橙途
        - stash_push_df: []
        ## 来来
        - use_df:
            key: monthly_code_mini
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [lailai,kfcdayang,mcdayang]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010101,Q-1010102,Q-1010202,Q-2010101,Q-2010102,Q-20201,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010202']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 来来
        - stash_push_df: []
        ##  其他
        - use_df:
            key: monthly_code_mini
        - df_select:
            - '[industry_id] == @p1'
            - p1: qi_ta
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010203,Q-1010101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010203'] + df['Q-1010101']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 其他
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - push_dataset:
            key: miki

### 季度维度-team-code维度
        - fetch_dataset:
            dataset_type_code: financial_statement_copy
            dataset_cate: std
            month_range: True
            month_delta: -2
            ignore_null_error: true
            empty_df_record:
              code_id: '-'
              code_name: '-'
              team_id: '-'
              team_code: '-'
              org_bu_division: '-'
              org_bu: '-'
              team_cate: '-'
              industry_id: '-'
              platform_id: '-'
              book_month: 197901
              ac_id: '-'
              ac_code: '-'
              money: 0.0
              code_code: '-'
              ac_rule_kind: '-'
        - df_to_int:
            - book_month
        - run_py:
            - |
              df = df[df['book_month'].notnull()]
              df['book_month_before'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['book_month_before'] = df['book_month_before'].astype(int)
              month_now = df['book_month_before'].max()
              df['时间先后情况'] = df['book_month_before']-((month_now//3-(month_now-(month_now//3*3) ==0))*3+1)
              df = df[df['时间先后情况']>=0]
              result = to_dd(df)
        - df_select:
            - '[ac_rule_kind] == @p1'
            - p1: code
        - df_groupby:
            by: [team_id,team_code,industry_id,platform_id,ac_code]
        - df_sum:
            column: [money]
        - df_reset_index: []
        - push_dataset:
            key: monthly_code_mini_1
        ## 外卖
        - use_df:
            key: monthly_code_mini_1
        - df_select:
            - '[industry_id] == @p1'
            - p1: wai_mai
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ C-101,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-20101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20601,Q-20604,Q-20605,Q-20701,Q-20702,Q-20704,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['C-101'] = df['C-101'] * 100
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20604'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-206'] + df['Q-207']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 外卖
        - stash_push_df: []
        ## 单车
        - use_df:
            key: monthly_code_mini_1
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [qingju, haluo, mobike, gofun, tianmao]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20602,Q-20603,Q-20605,Q-20701,Q-20702,Q-20704,Q-701,C-201,C-202,Q-10301,Q-10302 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-206'] = df['Q-20602'] + df['Q-20603'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['Y-QS-1'] = df['Q-10301'] + df['Q-10302']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 单车
        - stash_push_df: []
        ## 网约车
        - use_df:
            key: monthly_code_mini_1
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [didi, caocaochuxing]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204']
              df['Y-QS-1'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Y-QS-2'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 网约车
        - stash_push_df: []
        ## 橙途
        - use_df:
            key: monthly_code_mini_1
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [chengtu]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010202,Q-1010203,Q-1010204,Q-1010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-1010102'] + df['Q-102']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 橙途
        - stash_push_df: []
        ## 来来
        - use_df:
            key: monthly_code_mini_1
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [lailai,kfcdayang,mcdayang]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010101,Q-1010102,Q-1010202,Q-2010101,Q-2010102,Q-20201,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010202']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 来来
        - stash_push_df: []
        ##  其他
        - use_df:
            key: monthly_code_mini_1
        - df_select:
            - '[industry_id] == @p1'
            - p1: qi_ta
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010203,Q-1010101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010203'] + df['Q-1010101']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 其他
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - stash_push_df: []
        - use_df:
            key: miki
        - stash_push_df: []
        - stash_join_df:
            on: [team_id,subject_code,erji_industry]
            how: outer
            drop_stash: true
        - push_dataset:
            key: miki1

### 年度维度-team-code维度（外卖、单车）
        - fetch_dataset:   # 获取一整年的数据
            dataset_type_code: financial_statement_copy
            dataset_cate: std
            month_range: True
            month_delta: -11
            ignore_null_error: true
            empty_df_record:
              code_id: '-'
              code_name: '-'
              team_id: '-'
              team_code: '-'
              org_bu_division: '-'
              org_bu: '-'
              team_cate: '-'
              industry_id: '-'
              platform_id: '-'
              book_month: 197901
              ac_id: '-'
              ac_code: '-'
              money: 0.0
              code_code: '-'
              ac_rule_kind: '-'
        - df_select:   # 筛选为 code 的所有数据
            - '[ac_rule_kind] == @p1'
            - p1: code
        - df_groupby:
            by: [ team_id,team_code,industry_id,platform_id,ac_code ]
        - df_sum:
            column: [ money ]
        - df_reset_index: [ ]
        - push_dataset:
            key: monthly_code_mini_all
        ## 外卖
        - use_df:
            key: monthly_code_mini_all
        - df_select:
            - '[industry_id] == @p1'
            - p1: wai_mai
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: [ ]
        - pad_cols:
            columns: [ C-101,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-20101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20601,Q-20604,Q-20605,Q-20701,Q-20702,Q-20704,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['C-101'] = df['C-101'] * 100
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20604'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-206'] + df['Q-207']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 外卖
        - stash_push_df: [ ]
        ## 单车
        - use_df:
            key: monthly_code_mini_all
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [qingju, haluo, mobike, gofun, tianmao]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: [ ]
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20602,Q-20603,Q-20605,Q-20701,Q-20702,Q-20704,Q-701,C-201,C-202,Q-10301,Q-10302 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-206'] = df['Q-20602'] + df['Q-20603'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['Y-QS-1'] = df['Q-10301'] + df['Q-10302']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 单车
        - stash_push_df: [ ]
        ## 网约车
        - use_df:
            key: monthly_code_mini_all
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [didi, caocaochuxing]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204']
              df['Y-QS-1'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Y-QS-2'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - run_py:
            - |
        - run_py:
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 网约车
        - stash_push_df: []
        ## 橙途
        - use_df:
            key: monthly_code_mini_all
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [chengtu]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010202,Q-1010203,Q-1010204,Q-1010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-1010102'] + df['Q-102']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 橙途
        - stash_push_df: []
        ## 来来
        - use_df:
            key: monthly_code_mini_all
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [lailai,kfcdayang,mcdayang]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010101,Q-1010102,Q-1010202,Q-2010101,Q-2010102,Q-20201,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010202']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 来来
        - stash_push_df: []
        ##  其他
        - use_df:
            key: monthly_code_mini_all
        - df_select:
            - '[industry_id] == @p1'
            - p1: qi_ta
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010203,Q-1010101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010203'] + df['Q-1010101']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 其他
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - stash_push_df: [ ]
        - use_df:
            key: miki1
        - stash_push_df: [ ]
        - stash_join_df:
            on: [team_id,subject_code,erji_industry]
            how: outer
            drop_stash: true
        - set_meta_month_column:
            - book_month
        - df_fillna:
            value: 0
        - fetch_cols:
            columns: [team_id,subject_code,erji_industry,monthly_actual,quarter_actual,year_actual,book_month]
        - drop_duplicates:
            subset: [ team_id,subject_code,erji_industry,monthly_actual,quarter_actual,year_actual,book_month ]




### 汇总-team-code维度
    - name: code_team_Pre_computation_table
      sync_result: true
      cooks:
        - use_df:
            key: code_team_Pre_computation_actual_table
        - stash_push_df: []
        - fetch_dataset:
            dataset_type_code: code_team_Pre_computation_actual_table
            dataset_cate: std
            month_offset: -1
            ignore_null_error: true
            columns: [team_id,subject_code,monthly_actual,erji_industry]
            empty_df_record:
              team_id: '-'
              subject_code: '-'
              monthly_actual: 0
              erji_industry: '-'
            rename:
              monthly_actual: monthly_actual_before
        - stash_push_df: []
        - stash_join_df:
            on: [team_id,subject_code,erji_industry]
            how: right
            drop_stash: true
        - stash_push_df: []
### 计算环比，获取上个季度最全的数据，例如（7-9月属于Q3，我要获取Q2的数据，获取最全的6月份数据）每个月动态获取
        - fetch_dataset:
            dataset_type_code: code_team_Pre_computation_actual_table
            dataset_cate: std
            month_range: True
            month_delta: -3
            ignore_null_error: true
            empty_df_record:
              team_id: '-'
              subject_code: '-'
              quarter_actual: 0
              erji_industry: '-'
              book_month: 197901
            rename:
              quarter_actual: quarter_actual_before
        - df_to_str:
            - book_month
        - run_py:
            - |
              df['month'] = df['book_month'].apply(lambda x:x[4:])
              df['month'] = df['month'].astype(int)
              month_now1 = df['month'].max()
              df = df[df['month'] == (month_now1//3-(month_now1-(month_now1//3*3)==0)+4*((month_now1//3-(month_now1-(month_now1//3*3)==0))==0))*3]
              result = df
        - fetch_cols:
            columns: [team_id,subject_code,erji_industry,quarter_actual_before]
        - stash_push_df: []
        - stash_join_df:
            on: [team_id,subject_code,erji_industry]
            how: right
            drop_stash: true
        - pad_cols:
            columns: [ quarter_actual_before,monthly_actual_before ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['MOM'] = 0.0
              df['QOQ'] = 0.0
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] > 0,(df['monthly_actual'] - df['monthly_actual_before']) / df['monthly_actual_before'])
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] < 0,(df['monthly_actual'] - df['monthly_actual_before']) / (-df['monthly_actual_before']))
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] > 0,(df['quarter_actual'] - df['quarter_actual_before']) / df['quarter_actual_before'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] < 0,(df['quarter_actual'] - df['quarter_actual_before']) / (-df['quarter_actual_before']))
              df = df[df['team_id'].notnull()]
              df['book_day'] = np.datetime64('now')
              result = df
        - set_meta_month_column:
            - book_month
        - fetch_cols:
            columns: [ quarter_actual_before,team_id,erji_industry,subject_code,monthly_actual_before,monthly_actual,quarter_actual,book_month,year_actual,MOM,QOQ,book_day ]
        - df_select:
            - '[monthly_actual] != 0 | [quarter_actual] != 0 | [year_actual] != 0'
        - drop_duplicates:
            subset: [ quarter_actual,quarter_actual_before,book_day,subject_code,erji_industry,MOM,monthly_actual,book_month,monthly_actual_before,QOQ,team_id,year_actual ]



### 汇总月维度、季度维度、年维度-team-O2-code维度-实际值，下个月读取，计算环比，防止自循环
    - name: code_team_Pre_computation_actual_table_O2
      sync_result: true
      cooks:
### 月维度-team-O2-code维度
        - use_df:
            key: financial_statement_copy
        - df_select:
            - '[ac_rule_kind] == @p1 & [team_cate_O2] == @p2'
            - p1: code
              p2: O2
        - df_groupby:
            by: [team_id_O2,team_code,industry_id,platform_id,ac_code]
        - df_sum:
            column: [money]
        - df_reset_index: []
        - push_dataset:
            key: monthly_code_mini_O2
        ## 外卖
        - use_df:
            key: monthly_code_mini_O2
        - df_select:
            - '[industry_id] == @p1'
            - p1: wai_mai
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:   ## 财报明细单位为分，换算为元，但后期车辆数与单量需在 * 100
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:  ## 判断列是否存在，不存在则创建该列赋值默认值
            columns: [ C-101,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-20101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20601,Q-20604,Q-20605,Q-20701,Q-20702,Q-20704,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['C-101'] = df['C-101'] * 100
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20604'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-206'] + df['Q-207']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id_O2,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id_O2,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 外卖
        - stash_push_df: []
        ## 单车
        - use_df:
            key: monthly_code_mini_O2
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [qingju, haluo, mobike, gofun, tianmao]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20602,Q-20603,Q-20605,Q-20701,Q-20702,Q-20704,Q-701,C-201,C-202,Q-10301,Q-10302 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-206'] = df['Q-20602'] + df['Q-20603'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['Y-QS-1'] = df['Q-10301'] + df['Q-10302']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id_O2,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id_O2,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 单车
        - stash_push_df: []
        ## 网约车
        - use_df:
            key: monthly_code_mini_O2
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [didi, caocaochuxing]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204']
              df['Y-QS-1'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Y-QS-2'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id_O2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id_O2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 网约车
        - stash_push_df: []
        ## 橙途
        - use_df:
            key: monthly_code_mini_O2
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [chengtu]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010202,Q-1010203,Q-1010204,Q-1010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-1010102'] + df['Q-102']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id_O2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id_O2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 橙途
        - stash_push_df: []
        ## 来来
        - use_df:
            key: monthly_code_mini_O2
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [lailai,kfcdayang,mcdayang]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010101,Q-1010102,Q-1010202,Q-2010101,Q-2010102,Q-20201,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010202']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id_O2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id_O2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 来来
        - stash_push_df: []
        ##  其他
        - use_df:
            key: monthly_code_mini_O2
        - df_select:
            - '[industry_id] == @p1'
            - p1: qi_ta
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010203,Q-1010101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010203'] + df['Q-1010101']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id_O2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id_O2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 其他
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - push_dataset:
            key: miki

### 季度维度-team-code维度
        - fetch_dataset:
            dataset_type_code: financial_statement_copy
            dataset_cate: std
            month_range: True
            month_delta: -2
            ignore_null_error: true
            empty_df_record:
              code_id: '-'
              code_name: '-'
              team_id: '-'
              team_code: '-'
              org_bu_division: '-'
              org_bu: '-'
              team_cate: '-'
              industry_id: '-'
              platform_id: '-'
              book_month: 197901
              ac_id: '-'
              ac_code: '-'
              money: 0.0
              code_code: '-'
              ac_rule_kind: '-'
              team_id_O2: '-'
              team_code_O2: '-'
              team_cate_O2: '-'
        - df_to_int:
            - book_month
        - run_py:
            - |
              df = df[df['book_month'].notnull()]
              df['book_month_before'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['book_month_before'] = df['book_month_before'].astype(int)
              month_now = df['book_month_before'].max()
              df['时间先后情况'] = df['book_month_before']-((month_now//3-(month_now-(month_now//3*3) ==0))*3+1)
              df = df[df['时间先后情况']>=0]
              result = to_dd(df)
        - df_select:
            - '[ac_rule_kind] == @p1 & [team_cate_O2] == @p2'
            - p1: code
              p2: O2
        - df_groupby:
            by: [team_id_O2,team_code,industry_id,platform_id,ac_code]
        - df_sum:
            column: [money]
        - df_reset_index: []
        - push_dataset:
            key: monthly_code_mini_O2_1
        ## 外卖
        - use_df:
            key: monthly_code_mini_O2_1
        - df_select:
            - '[industry_id] == @p1'
            - p1: wai_mai
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ C-101,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-20101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20601,Q-20604,Q-20605,Q-20701,Q-20702,Q-20704,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['C-101'] = df['C-101'] * 100
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20604'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-206'] + df['Q-207']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id_O2,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id_O2,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 外卖
        - stash_push_df: []
        ## 单车
        - use_df:
            key: monthly_code_mini_O2_1
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [qingju, haluo, mobike, gofun, tianmao]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20602,Q-20603,Q-20605,Q-20701,Q-20702,Q-20704,Q-701,C-201,C-202,Q-10301,Q-10302 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-206'] = df['Q-20602'] + df['Q-20603'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['Y-QS-1'] = df['Q-10301'] + df['Q-10302']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id_O2,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id_O2,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 单车
        - stash_push_df: []
        ## 网约车
        - use_df:
            key: monthly_code_mini_O2_1
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [didi, caocaochuxing]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204']
              df['Y-QS-1'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Y-QS-2'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id_O2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id_O2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 网约车
        - stash_push_df: []
        ## 橙途
        - use_df:
            key: monthly_code_mini_O2_1
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [chengtu]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010202,Q-1010203,Q-1010204,Q-1010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-1010102'] + df['Q-102']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id_O2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id_O2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 橙途
        - stash_push_df: []
        ## 来来
        - use_df:
            key: monthly_code_mini_O2_1
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [lailai,kfcdayang,mcdayang]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010101,Q-1010102,Q-1010202,Q-2010101,Q-2010102,Q-20201,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010202']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id_O2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id_O2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 来来
        - stash_push_df: []
        ##  其他
        - use_df:
            key: monthly_code_mini_O2_1
        - df_select:
            - '[industry_id] == @p1'
            - p1: qi_ta
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010203,Q-1010101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010203'] + df['Q-1010101']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id_O2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id_O2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 其他
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - stash_push_df: []
        - use_df:
            key: miki
        - stash_push_df: []
        - stash_join_df:
            on: [team_id_O2,subject_code,erji_industry]
            how: outer
            drop_stash: true
        - push_dataset:
            key: miki1

### 年度维度-team-code维度（外卖、单车）
        - fetch_dataset:   # 获取一整年的数据
            dataset_type_code: financial_statement_copy
            dataset_cate: std
            month_range: True
            month_delta: -11
            ignore_null_error: true
            empty_df_record:
              code_id: '-'
              code_name: '-'
              team_id: '-'
              team_code: '-'
              org_bu_division: '-'
              org_bu: '-'
              team_cate: '-'
              industry_id: '-'
              platform_id: '-'
              book_month: 197901
              ac_id: '-'
              ac_code: '-'
              money: 0.0
              code_code: '-'
              ac_rule_kind: '-'
              team_id_O2: '-'
              team_code_O2: '-'
              team_cate_O2: '-'
        - df_select:   # 筛选为 code 的所有数据
            - '[ac_rule_kind] == @p1 & [team_cate_O2] == @p2'
            - p1: code
              p2: O2
        - df_groupby:
            by: [ team_id_O2,team_code,industry_id,platform_id,ac_code ]
        - df_sum:
            column: [ money ]
        - df_reset_index: [ ]
        - push_dataset:
            key: monthly_code_mini_O2_all
        ## 外卖
        - use_df:
            key: monthly_code_mini_O2_all
        - df_select:
            - '[industry_id] == @p1'
            - p1: wai_mai
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: [ ]
        - pad_cols:
            columns: [ C-101,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-20101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20601,Q-20604,Q-20605,Q-20701,Q-20702,Q-20704,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['C-101'] = df['C-101'] * 100
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20604'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-206'] + df['Q-207']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id_O2,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id_O2,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 外卖
        - stash_push_df: [ ]
        ## 单车
        - use_df:
            key: monthly_code_mini_O2_all
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [qingju, haluo, mobike, gofun, tianmao]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: [ ]
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20602,Q-20603,Q-20605,Q-20701,Q-20702,Q-20704,Q-701,C-201,C-202,Q-10301,Q-10302 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-206'] = df['Q-20602'] + df['Q-20603'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['Y-QS-1'] = df['Q-10301'] + df['Q-10302']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id_O2,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id_O2,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 单车
        - stash_push_df: [ ]
        ## 网约车
        - use_df:
            key: monthly_code_mini_O2_all
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [didi, caocaochuxing]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204']
              df['Y-QS-1'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Y-QS-2'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id_O2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id_O2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 网约车
        - stash_push_df: []
        ## 橙途
        - use_df:
            key: monthly_code_mini_O2_all
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [chengtu]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010202,Q-1010203,Q-1010204,Q-1010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-1010102'] + df['Q-102']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id_O2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id_O2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 橙途
        - stash_push_df: []
        ## 来来
        - use_df:
            key: monthly_code_mini_O2_all
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [lailai,kfcdayang,mcdayang]
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010101,Q-1010102,Q-1010202,Q-2010101,Q-2010102,Q-20201,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010202']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id_O2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id_O2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 来来
        - stash_push_df: []
        ##  其他
        - use_df:
            key: monthly_code_mini_O2_all
        - df_select:
            - '[industry_id] == @p1'
            - p1: qi_ta
        - df_pivot_table: # 透视表
            values: money
            index: [ team_id_O2 ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010203,Q-1010101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010203'] + df['Q-1010101']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [team_id_O2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [team_id_O2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='team_id_O2')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 其他
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - stash_push_df: [ ]
        - use_df:
            key: miki1
        - stash_push_df: [ ]
        - stash_join_df:
            on: [team_id_O2,subject_code,erji_industry]
            how: outer
            drop_stash: true
        - set_meta_month_column:
            - book_month
        - df_fillna:
            value: 0
        - fetch_cols:
            columns: [team_id_O2,subject_code,erji_industry,monthly_actual,quarter_actual,year_actual,book_month]
        - df_rename_columns:
            - team_id_O2: team_id
        - drop_duplicates:
            subset: [ team_id,subject_code,erji_industry,monthly_actual,quarter_actual,year_actual,book_month ]




### 汇总-team-O2-code维度
    - name: code_team_Pre_computation_table_O2
      sync_result: true
      cooks:
        - use_df:
            key: code_team_Pre_computation_actual_table_O2
        - stash_push_df: []
        - fetch_dataset:
            dataset_type_code: code_team_Pre_computation_actual_table_O2
            dataset_cate: std
            month_offset: -1
            ignore_null_error: true
            columns: [team_id,subject_code,monthly_actual,erji_industry]
            empty_df_record:
              team_id: '-'
              subject_code: '-'
              monthly_actual: 0
              erji_industry: '-'
            rename:
              monthly_actual: monthly_actual_before
        - stash_push_df: []
        - stash_join_df:
            on: [team_id,subject_code,erji_industry]
            how: right
            drop_stash: true
        - stash_push_df: []
### 计算环比，获取上个季度最全的数据，例如（7-9月属于Q3，我要获取Q2的数据，获取最全的6月份数据）每个月动态获取
        - fetch_dataset:
            dataset_type_code: code_team_Pre_computation_actual_table_O2
            dataset_cate: std
            month_range: True
            month_delta: -3
            ignore_null_error: true
            empty_df_record:
              team_id: '-'
              subject_code: '-'
              quarter_actual: 0
              erji_industry: '-'
              book_month: 197901
            rename:
              quarter_actual: quarter_actual_before
        - df_to_str:
            - book_month
        - run_py:
            - |
              df['month'] = df['book_month'].apply(lambda x:x[4:])
              df['month'] = df['month'].astype(int)
              month_now1 = df['month'].max()
              df = df[df['month'] == (month_now1//3-(month_now1-(month_now1//3*3)==0)+4*((month_now1//3-(month_now1-(month_now1//3*3)==0))==0))*3]
              result = df
        - fetch_cols:
            columns: [team_id,subject_code,erji_industry,quarter_actual_before]
        - stash_push_df: []
        - stash_join_df:
            on: [team_id,subject_code,erji_industry]
            how: right
            drop_stash: true
        - pad_cols:
            columns: [ quarter_actual_before,monthly_actual_before ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['MOM'] = 0.0
              df['QOQ'] = 0.0
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] > 0,(df['monthly_actual'] - df['monthly_actual_before']) / df['monthly_actual_before'])
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] < 0,(df['monthly_actual'] - df['monthly_actual_before']) / (-df['monthly_actual_before']))
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] > 0,(df['quarter_actual'] - df['quarter_actual_before']) / df['quarter_actual_before'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] < 0,(df['quarter_actual'] - df['quarter_actual_before']) / (-df['quarter_actual_before']))
              df = df[df['team_id'].notnull()]
              df['book_day'] = np.datetime64('now')
              result = df
        - set_meta_month_column:
            - book_month
        - fetch_cols:
            columns: [ quarter_actual_before,team_id,erji_industry,subject_code,monthly_actual_before,monthly_actual,quarter_actual,book_month,year_actual,MOM,QOQ,book_day ]
        - df_select:
            - '[monthly_actual] != 0 | [quarter_actual] != 0 | [year_actual] != 0'
        - drop_duplicates:
            subset: [ quarter_actual,quarter_actual_before,book_day,subject_code,erji_industry,MOM,monthly_actual,book_month,monthly_actual_before,QOQ,team_id,year_actual ]




### 汇总月维度、季度维度、年维度-分部-code维度-实际值，下个月读取，计算环比，防止自循环
    - name: code_org_bu_division_Pre_computation_actual_table
      sync_result: true
      cooks:
### 月维度-分部-code维度
        - use_df:
            key: financial_statement_copy
        - df_select:
            - '[ac_rule_kind] == @p1'
            - p1: code
        - df_groupby:
            by: [org_bu_division,industry_id,platform_id,ac_code]
        - df_sum:
            column: [money]
        - df_reset_index: []
        - push_dataset:
            key: monthly_branch_code_mini
        ## 外卖
        - use_df:
            key: monthly_branch_code_mini
        - df_select:
            - '[industry_id] == @p1'
            - p1: wai_mai
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ C-101,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-20101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20601,Q-20604,Q-20605,Q-20701,Q-20702,Q-20704,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['C-101'] = df['C-101'] * 100
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20604'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-206'] + df['Q-207']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu_division,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu_division,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 外卖
        - stash_push_df: []
        ## 单车
        - use_df:
            key: monthly_branch_code_mini
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [qingju, haluo, mobike, gofun, tianmao]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20602,Q-20603,Q-20605,Q-20701,Q-20702,Q-20704,Q-701,C-201,C-202,Q-10301,Q-10302 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-206'] = df['Q-20602'] + df['Q-20603'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['Y-QS-1'] = df['Q-10301'] + df['Q-10302']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu_division,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu_division,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 单车
        - stash_push_df: []
        ## 网约车
        - use_df:
            key: monthly_branch_code_mini
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [didi, caocaochuxing]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204']
              df['Y-QS-1'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Y-QS-2'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu_division,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu_division,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 网约车
        - stash_push_df: []
        ## 橙途
        - use_df:
            key: monthly_branch_code_mini
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [chengtu]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010202,Q-1010203,Q-1010204,Q-1010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-1010102'] + df['Q-102']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu_division,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu_division,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 橙途
        - stash_push_df: []
        ## 来来
        - use_df:
            key: monthly_branch_code_mini
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [lailai,kfcdayang,mcdayang]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010101,Q-1010102,Q-1010202,Q-2010101,Q-2010102,Q-20201,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010202']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu_division,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu_division,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 来来
        - stash_push_df: []
        ##  其他
        - use_df:
            key: monthly_branch_code_mini
        - df_select:
            - '[industry_id] == @p1'
            - p1: qi_ta
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010203,Q-1010101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010203'] + df['Q-1010101']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu_division,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu_division,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 其他
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - push_dataset:
            key: miyi

### 季度维度-分部-code维度
        - fetch_dataset:   # 一个季度，获取本月以及前两个月的数据
            dataset_type_code: financial_statement_copy
            dataset_cate: std
            month_range: True
            month_delta: -2
            ignore_null_error: true
            empty_df_record:
              code_id: '-'
              code_name: '-'
              team_id: '-'
              team_code: '-'
              org_bu_division: '-'
              org_bu: '-'
              team_cate: '-'
              industry_id: '-'
              platform_id: '-'
              book_month: 197901
              ac_id: '-'
              ac_code: '-'
              money: 0.0
              code_code: '-'
              ac_rule_kind: '-'
        # 判断并获取一个季度的数据，若为8月，则上面拼接为6、7、8月份数据，筛选过后为7、8月份数据
        - run_py:
            - |
              df = df[df['book_month'].notnull()]
              df['month'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month'] = df['month'].astype(int)
              month_now = df['month'].max()
              df['时间先后情况'] = df['month']-((month_now//3-(month_now-(month_now//3*3) ==0))*3+1)
              df = df[df['时间先后情况']>=0]
              result = df
        - df_select:
            - '[ac_rule_kind] == @p1'
            - p1: code
        - df_groupby:
            by: [org_bu_division,industry_id,platform_id,ac_code]
        - df_sum:
            column: [money]
        - df_reset_index: []
        - push_dataset:
            key: monthly_branch_code_mini_1
        ## 外卖
        - use_df:
            key: monthly_branch_code_mini_1
        - df_select:
            - '[industry_id] == @p1'
            - p1: wai_mai
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
# 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
        - pad_cols:
            columns: [ C-101,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-20101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20601,Q-20604,Q-20605,Q-20701,Q-20702,Q-20704,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:   # 计算所需的指标
            - |
              df['C-101'] = df['C-101'] * 100
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20604'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-206'] + df['Q-207']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu_division,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu_division,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 外卖
        - stash_push_df: []
        ## 单车
        - use_df:
            key: monthly_branch_code_mini_1
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [qingju, haluo, mobike, gofun, tianmao]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20602,Q-20603,Q-20605,Q-20701,Q-20702,Q-20704,Q-701,C-201,C-202,Q-10301,Q-10302 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-206'] = df['Q-20602'] + df['Q-20603'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['Y-QS-1'] = df['Q-10301'] + df['Q-10302']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu_division,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu_division,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 单车
        - stash_push_df: []
        ## 网约车
        - use_df:
            key: monthly_branch_code_mini_1
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [didi, caocaochuxing]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204']
              df['Y-QS-1'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Y-QS-2'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu_division,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu_division,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 网约车
        - stash_push_df: []
        ## 橙途
        - use_df:
            key: monthly_branch_code_mini_1
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [chengtu]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010202,Q-1010203,Q-1010204,Q-1010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-1010102'] + df['Q-102']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu_division,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu_division,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 橙途
        - stash_push_df: []
        ## 来来
        - use_df:
            key: monthly_branch_code_mini_1
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [lailai,kfcdayang,mcdayang]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010101,Q-1010102,Q-1010202,Q-2010101,Q-2010102,Q-20201,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010202']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu_division,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu_division,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 来来
        - stash_push_df: []
        ##  其他
        - use_df:
            key: monthly_branch_code_mini_1
        - df_select:
            - '[industry_id] == @p1'
            - p1: qi_ta
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010203,Q-1010101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010203'] + df['Q-1010101']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu_division,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu_division,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 其他
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - stash_push_df: []
        - use_df:
            key: miyi
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu_division,subject_code,erji_industry]
            how: outer
            drop_stash: true
        - push_dataset:
            key: miyi1

### 年度维度-分部-code维度（外卖、单车）
        - fetch_dataset:  # 获取近一年的数据
            dataset_type_code: financial_statement_copy
            dataset_cate: std
            month_range: True
            month_delta: -11
            ignore_null_error: true
            empty_df_record:
              code_id: '-'
              code_name: '-'
              team_id: '-'
              team_code: '-'
              org_bu_division: '-'
              org_bu: '-'
              team_cate: '-'
              industry_id: '-'
              platform_id: '-'
              book_month: 197901
              ac_id: '-'
              ac_code: '-'
              money: 0.0
              code_code: '-'
              ac_rule_kind: '-'
        - df_select:   # 筛选code的数据
            - '[ac_rule_kind] == @p1'
            - p1: code
        - df_groupby:
            by: [ org_bu_division,industry_id,platform_id,ac_code ]
        - df_sum:
            column: [ money ]
        - df_reset_index: [ ]
        - push_dataset:
            key: monthly_branch_code_mini_all
        ## 外卖
        - use_df:
            key: monthly_branch_code_mini_all
        - df_select:   # 先筛去外卖的数据进行计算
            - '[industry_id] == @p1'
            - p1: wai_mai
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: [ ]
        - pad_cols:
            columns: [ C-101,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-20101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20601,Q-20604,Q-20605,Q-20701,Q-20702,Q-20704,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['C-101'] = df['C-101'] * 100
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20604'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-206'] + df['Q-207']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu_division,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:  # 按照列进行排序
            sort_list: [org_bu_division,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 外卖
        - stash_push_df: [ ]
        ## 单车
        - use_df:
            key: monthly_branch_code_mini_all
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [qingju, haluo, mobike, gofun, tianmao]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: [ ]
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20602,Q-20603,Q-20605,Q-20701,Q-20702,Q-20704,Q-701,C-201,C-202,Q-10301,Q-10302 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-206'] = df['Q-20602'] + df['Q-20603'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['Y-QS-1'] = df['Q-10301'] + df['Q-10302']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu_division,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu_division,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 单车
        - stash_push_df: [ ]
        ## 网约车
        - use_df:
            key: monthly_branch_code_mini_all
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [didi, caocaochuxing]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204']
              df['Y-QS-1'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Y-QS-2'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu_division,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu_division,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 网约车
        - stash_push_df: []
        ## 橙途
        - use_df:
            key: monthly_branch_code_mini_all
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [chengtu]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010202,Q-1010203,Q-1010204,Q-1010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-1010102'] + df['Q-102']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu_division,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu_division,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 橙途
        - stash_push_df: []
        ## 来来
        - use_df:
            key: monthly_branch_code_mini_all
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [lailai,kfcdayang,mcdayang]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010101,Q-1010102,Q-1010202,Q-2010101,Q-2010102,Q-20201,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010202']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu_division,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu_division,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 来来
        - stash_push_df: []
        ##  其他
        - use_df:
            key: monthly_branch_code_mini_all
        - df_select:
            - '[industry_id] == @p1'
            - p1: qi_ta
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu_division ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010203,Q-1010101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010203'] + df['Q-1010101']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu_division,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu_division,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu_division')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 其他
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - stash_push_df: [ ]
        - use_df:
            key: miyi1
        - stash_push_df: [ ]
        - stash_join_df:
            on: [org_bu_division,subject_code,erji_industry]
            how: outer
            drop_stash: true
        - set_meta_month_column:
            - book_month
        - df_fillna:
            value: 0
        - fetch_cols:
            columns: [org_bu_division,subject_code,erji_industry,monthly_actual,quarter_actual,year_actual,book_month]
        - drop_duplicates:
            subset: [ org_bu_division,subject_code,erji_industry,monthly_actual,quarter_actual,year_actual,book_month ]


### 汇总-分部-code维度
    - name: code_org_bu_division_Pre_computation_table
      sync_result: true
      cooks:
        - use_df:
            key: code_org_bu_division_Pre_computation_actual_table
        - push_dataset:
            key: code_org_bu_division_Pre_computation_table_mini
        - fetch_dataset:    ## 读取上个月数据进行计算环比
            dataset_type_code: code_org_bu_division_Pre_computation_actual_table
            dataset_cate: std
            month_range: True
            month_delta: -1
            ignore_null_error: true
            columns: [org_bu_division,subject_code,monthly_actual,erji_industry,book_month]
            empty_df_record:
              org_bu_division: '-'
              subject_code: '-'
              monthly_actual: 0
              erji_industry: '-'
              book_month: 197901
            rename:
              monthly_actual: monthly_actual_before
        - stash_push_df: []
        - use_df:
            key: final_summary_copy
            rename:
              monthly_actual: monthly_actual_before
              sub_industry_name: erji_industry
        - df_select:
            - '[type] == @p1'
            - p1: org_bu_division_platform
        - fetch_cols:
            columns: [org_bu_division,subject_code,monthly_actual_before,erji_industry,book_month]
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - run_py:
            - |
              df = to_df(df).copy()
              max_month = df['book_month'].max()
              year = int(str(max_month)[:4])
              month = int(str(max_month)[4:])
              if month - 1 == 0:
                  year = year - 1
                  month = 12
                  df['book_now'] = year * 100 + month
              else:
                  month = month - 1
                  df['book_now'] = year * 100 + month
              result = to_dd(df)
        - df_select:
            - '[book_month] == [book_now]'
        - fetch_cols:
            columns: [org_bu_division,subject_code,monthly_actual_before,erji_industry]
        - stash_push_df: []
        - use_df:
            key: code_org_bu_division_Pre_computation_table_mini
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu_division,subject_code,erji_industry]
            how: left
            drop_stash: true
        - push_dataset:
            key: code_org_bu_division_Pre_computation_table_mini1
### 计算环比，获取上个季度最全的数据，例如（7-9月属于Q3，我要获取Q2的数据，获取最全的6月份数据）每个月动态获取
        - fetch_dataset:
            dataset_type_code: code_org_bu_division_Pre_computation_actual_table
            dataset_cate: std
            month_range: True
            month_delta: -3
            columns: [org_bu_division,subject_code,quarter_actual,erji_industry,book_month]
            ignore_null_error: true
            empty_df_record:
              org_bu_division: '-'
              subject_code: '-'
              quarter_actual: 0
              erji_industry: '-'
              book_month: 197901
            rename:
              quarter_actual: quarter_actual_before
        - stash_push_df: []
        - use_df:
            key: final_summary_copy
            rename:
              quarter_actual: quarter_actual_before
              sub_industry_name: erji_industry
        - df_select:
            - '[type] == @p1'
            - p1: org_bu_division_platform
        - fetch_cols:
            columns: [org_bu_division,subject_code,quarter_actual_before,erji_industry,book_month]
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - df_to_int:
            - book_month
        - run_py:
            - |
              df['month'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month'] = df['month'].astype(int)
              df['max_month'] = df['book_month'].max()
              df['month_now'] = df['max_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_now1 = df['month_now'].max()
              df = df[df['month'] == (month_now1//3-(month_now1-(month_now1//3*3)==0)+4*((month_now1//3-(month_now1-(month_now1//3*3)==0))==0))*3]
              result = df
        - fetch_cols:
            columns: [org_bu_division,subject_code,erji_industry,quarter_actual_before]
        - stash_push_df: []
        - use_df:
            key: code_org_bu_division_Pre_computation_table_mini1
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu_division,subject_code,erji_industry]
            how: left
            drop_stash: true
        - pad_cols:
            columns: [ quarter_actual_before,monthly_actual_before ]
            default_value: 0
        - push_dataset:
            key: miai

        - fetch_dataset: ## 预算数据
            dataset_type_code: budget_summary
            dataset_cate: std
            ignore_null_error: true
            empty_df_record:
              ac_code: '-'
              team_id: '-'
              ac_id: '-'
              book_year: 1979
              book_month: 197901
              money: 0.0
              sub_industry_name: '-'
              org_bu: '-'
              org_bu_division: '-'
              team_code: '-'
              team_cate: '-'
            rename:
              ac_code: subject_code
              money: budget
        - set_meta_month_column:
            - month
        - run_py: ## 筛选 team_cate 为空,并且 org_bu_division 不为空的即为 分部 对应数据
            - |
              df = df[df['team_cate'].isnull()]
              df = df[df['org_bu_division'].notnull()]
              df['月份_now'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['月份_now'] = df['月份_now'].astype(int)
              df['month_now'] = df['month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_now2 = df['month_now'].max()
              df = df[df['月份_now'] >= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1)]
              df = df[df['月份_now'] <= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1) + 2]
              result = df
        - push_dataset:
            key: miai1
        ## 月度
        - use_df:
            key: miai1
        - df_select:
            - '[book_month] == [month]'
        - run_py:   ## 透视表
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="budget",index=['org_bu_division','sub_industry_name'],columns="subject_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [org_bu_division,sub_industry_name,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - run_py:
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars=['org_bu_division','sub_industry_name'])
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_budget
              sub_industry_name: erji_industry
        - stash_push_df: []
        ## 季度
        - use_df:
            key: miai1
        - run_py:   ## 透视表
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="budget",index=['org_bu_division','sub_industry_name'],columns="subject_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [org_bu_division,sub_industry_name,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - run_py:
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars=['org_bu_division','sub_industry_name'])
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_budget
              sub_industry_name: erji_industry
        - stash_push_df: []
        ## 年度
        - fetch_dataset: ## 预算数据
            dataset_type_code: budget_summary
            dataset_cate: std
            ignore_null_error: true
            rename:
              ac_code: subject_code
              money: budget
        - run_py: ## 筛选 team_cate 为空,并且 org_bu_division 不为空的即为 分部 对应数据
            - |
              df = to_df(df).copy()
              df = df[df['team_cate'].isnull()]
              df = df[df['org_bu_division'].notnull()]
              df = df.pivot_table(values="budget",index=['org_bu_division','sub_industry_name'],columns="subject_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [org_bu_division,sub_industry_name,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - run_py:
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars=['org_bu_division','sub_industry_name'])
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_budget
              sub_industry_name: erji_industry
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu_division,subject_code,erji_industry]
            how: outer
            drop_stash: true
        - stash_push_df: []
        - use_df:
            key: miai
            columns: [ subject_code,quarter_actual_before,erji_industry,org_bu_division,monthly_actual_before,monthly_actual,quarter_actual,year_actual,book_month ]
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu_division,subject_code,erji_industry]
            how: outer
            drop_stash: true
        - push_dataset:
            key: miai4

        - fetch_dataset:  # 获取20年决算数据
            dataset_type_code: final_summary
            dataset_cate: std
            month_value: 202012
            ignore_null_error: true
            empty_df_record:
              ac_code: '-'
              team_id: '-'
              ac_id: '-'
              book_year: 1979
              book_month: 197901
              money: 0.0
              sub_industry_name: '-'
              org_bu: '-'
              org_bu_division: '-'
              team_code: '-'
              team_cate: '-'
            rename:
              ac_code: subject_code
              money: actual_before_20
              sub_industry_name: erji_industry
        - set_meta_month_column:
            - month
        - df_to_int:
            - book_month
        - run_py: # org_bu_division 不为空则为20年分部决算数据
            - |
              df = df[df['org_bu_division'].notnull()]
              df['subject_code'] = df['subject_code'].apply(lambda x:x.replace('Y-QS-4','利润'))
              result = df
        - push_dataset:
            key: miai5
        ## 决算-月度
        - use_df:
            key: miai5
        - run_py:
            - |
              df['month_now'] = df['month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_2020 = 202000 + df['month_now'].max()
              df = df[df['book_month'] == month_2020]
              result = df
        - df_groupby:
            by: [org_bu_division,subject_code,erji_industry]
        - df_sum:
            column: actual_before_20
            rename: monthly_actual_before_20
        - df_reset_index: []
        - stash_push_df: []
        ## 决算-季度
        - use_df:
            key: miai5
        - run_py:
            - |
              df['月份_now'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['月份_now'] = df['月份_now'].astype(int)
              df['month_now'] = df['month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_now2 = df['month_now'].max()
              df = df[df['月份_now'] >= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1)]
              df = df[df['月份_now'] <= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1) + 1]
              result = df
        - df_groupby:
            by: [org_bu_division,subject_code,erji_industry]
        - df_sum:
            column: actual_before_20
            rename: quarter_actual_before_20
        - df_reset_index: []
        - stash_push_df: []
        ## 决算-年度
        - use_df:
            key: miai5
        - df_groupby:
            by: [org_bu_division,subject_code,erji_industry]
        - df_sum:
            column: actual_before_20
            rename: year_actual_before_20
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu_division,subject_code,erji_industry]
            how: outer
            drop_stash: true
        - stash_push_df: []
        - use_df:
            key: miai4
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu_division,subject_code,erji_industry]
            how: left
            drop_stash: true
        - df_fillna:
            value: 0
        - push_dataset:
            key: aidi
        - use_df:
            key: aidi
        - df_select:
            - '[subject_code]!= @p1'
            - p1: [code利润率,利润率]
        - run_py:
            - |
              df['MOM'] = 0.0
              df['QOQ'] = 0.0
              df['month_on_month'] = 0.0
              df['quarter_on_quarter'] = 0.0
              df['year_on_year'] = 0.0
              df['monthly_budget_achievement_rate'] = 0.0
              df['quarter_budget_achievement_rate'] = 0.0
              df['year_budget_achievement_rate'] = 0.0
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] > 0,(df['monthly_actual'] - df['monthly_actual_before']) / df['monthly_actual_before'])
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] < 0,(df['monthly_actual'] - df['monthly_actual_before']) / (-df['monthly_actual_before']))
              df['monthly_budget_achievement_rate'] = df['monthly_budget_achievement_rate'].mask(df['monthly_budget'] > 0,df['monthly_actual'] / df['monthly_budget'])
              df['monthly_budget_achievement_rate'] = df['monthly_budget_achievement_rate'].mask(df['monthly_budget'] < 0,2 - df['monthly_actual'] / df['monthly_budget'])
              df['month_on_month'] = df['month_on_month'].mask(df['monthly_actual_before_20'] > 0,(df['monthly_actual'] - df['monthly_actual_before_20']) / df['monthly_actual_before_20'])
              df['month_on_month'] = df['month_on_month'].mask(df['monthly_actual_before_20'] < 0,(df['monthly_actual'] - df['monthly_actual_before_20']) / (-df['monthly_actual_before_20']))
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] > 0,(df['quarter_actual'] - df['quarter_actual_before']) / df['quarter_actual_before'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] < 0,(df['quarter_actual'] - df['quarter_actual_before']) / (-df['quarter_actual_before']))
              df['quarter_budget_achievement_rate'] = df['quarter_budget_achievement_rate'].mask(df['quarter_budget'] > 0,df['quarter_actual'] / df['quarter_budget'])
              df['quarter_budget_achievement_rate'] = df['quarter_budget_achievement_rate'].mask(df['quarter_budget'] < 0,2 - df['quarter_actual'] / df['quarter_budget'])
              df['quarter_on_quarter'] = df['quarter_on_quarter'].mask(df['quarter_actual_before_20'] > 0,(df['quarter_actual'] - df['quarter_actual_before_20']) / df['quarter_actual_before_20'])
              df['quarter_on_quarter'] = df['quarter_on_quarter'].mask(df['quarter_actual_before_20'] < 0,(df['quarter_actual'] - df['quarter_actual_before_20']) / (-df['quarter_actual_before_20']))
              df['year_budget_achievement_rate'] = df['year_budget_achievement_rate'].mask(df['year_budget'] > 0,df['year_actual'] / df['year_budget'])
              df['year_budget_achievement_rate'] = df['year_budget_achievement_rate'].mask(df['year_budget'] < 0,2 - df['year_actual'] / df['year_budget'])
              df['year_on_year'] = df['year_on_year'].mask(df['year_actual_before_20'] > 0,(df['year_actual'] - df['year_actual_before_20']) / df['year_actual_before_20'])
              df['year_on_year'] = df['year_on_year'].mask(df['year_actual_before_20'] < 0,(df['year_actual'] - df['year_actual_before_20']) / (-df['year_actual_before_20']))
              df = df[df['org_bu_division'].notnull()]
              df['book_day'] = np.datetime64('now')
              result = df
        - stash_push_df: []
        - use_df:
            key: aidi
        - df_select:
            - '[subject_code]== @p1'
            - p1: [code利润率,利润率]
        - run_py:
            - |
              df['MOM'] = 0.0
              df['QOQ'] = 0.0
              df['month_on_month'] = 0.0
              df['quarter_on_quarter'] = 0.0
              df['year_on_year'] = 0.0
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] > 0,(df['monthly_actual'] - df['monthly_actual_before']) / df['monthly_actual_before'])
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] < 0,(df['monthly_actual'] - df['monthly_actual_before']) / (-df['monthly_actual_before']))
              df['monthly_budget_achievement_rate'] = df['monthly_actual'] - df['monthly_budget']
              df['month_on_month'] = df['month_on_month'].mask(df['monthly_actual_before_20'] > 0,(df['monthly_actual'] - df['monthly_actual_before_20']) / df['monthly_actual_before_20'])
              df['month_on_month'] = df['month_on_month'].mask(df['monthly_actual_before_20'] < 0,(df['monthly_actual'] - df['monthly_actual_before_20']) / (-df['monthly_actual_before_20']))
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] > 0,(df['quarter_actual'] - df['quarter_actual_before']) / df['quarter_actual_before'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] < 0,(df['quarter_actual'] - df['quarter_actual_before']) / (-df['quarter_actual_before']))
              df['quarter_budget_achievement_rate'] = df['quarter_actual'] - df['quarter_budget']
              df['quarter_on_quarter'] = df['quarter_on_quarter'].mask(df['quarter_actual_before_20'] > 0,(df['quarter_actual'] - df['quarter_actual_before_20']) / df['quarter_actual_before_20'])
              df['quarter_on_quarter'] = df['quarter_on_quarter'].mask(df['quarter_actual_before_20'] < 0,(df['quarter_actual'] - df['quarter_actual_before_20']) / (-df['quarter_actual_before_20']))
              df['year_budget_achievement_rate'] = df['year_actual'] - df['year_budget']
              df['year_on_year'] = df['year_on_year'].mask(df['year_actual_before_20'] > 0,(df['year_actual'] - df['year_actual_before_20']) / df['year_actual_before_20'])
              df['year_on_year'] = df['year_on_year'].mask(df['year_actual_before_20'] < 0,(df['year_actual'] - df['year_actual_before_20']) / (-df['year_actual_before_20']))
              df = df[df['org_bu_division'].notnull()]
              df['book_day'] = np.datetime64('now')
              result = df
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - set_meta_month_column:
            - book_month
        - df_select:
            - '[monthly_budget] != 0 | [monthly_actual] != 0 | [quarter_budget] != 0 | [quarter_actual] != 0 | [year_budget] != 0 | [year_actual] != 0'
        - drop_duplicates:
            subset: [ quarter_actual,org_bu_division,monthly_actual_before,book_month,year_actual,monthly_actual,subject_code,quarter_actual_before,year_budget,monthly_budget,quarter_budget,MOM,QOQ,monthly_budget_achievement_rate,quarter_budget_achievement_rate,year_budget_achievement_rate,book_day,erji_industry ]



### 汇总月维度、季度维度、年维度-事业部-code维度-实际值，下个月读取，计算环比，防止自循环
    - name: code_org_bu_Pre_computation_actual_table
      sync_result: true
      cooks:
### 月维度-事业部-code维度
        - use_df:
            key: financial_statement_copy
        - df_select:
            - '[ac_rule_kind] == @p1'
            - p1: code
        - df_groupby:
            by: [org_bu,industry_id,platform_id,ac_code]
        - df_sum:
            column: [money]
        - df_reset_index: []
        - push_dataset:
            key: monthly_org_bu_code_mini
        ## 外卖
        - use_df:
            key: monthly_org_bu_code_mini
        - df_select:
            - '[industry_id] == @p1'
            - p1: wai_mai
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ C-101,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-20101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20601,Q-20604,Q-20605,Q-20701,Q-20702,Q-20704,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['C-101'] = df['C-101'] * 100
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20604'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-206'] + df['Q-207']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 外卖
        - stash_push_df: []
        ## 单车
        - use_df:
            key: monthly_org_bu_code_mini
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [qingju, haluo, mobike, gofun, tianmao]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20602,Q-20603,Q-20605,Q-20701,Q-20702,Q-20704,Q-701,C-201,C-202,Q-10301,Q-10302 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-206'] = df['Q-20602'] + df['Q-20603'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['Y-QS-1'] = df['Q-10301'] + df['Q-10302']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 单车
        - stash_push_df: []
        ## 网约车
        - use_df:
            key: monthly_org_bu_code_mini
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [didi, caocaochuxing]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204']
              df['Y-QS-1'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Y-QS-2'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 网约车
        - stash_push_df: []
        ## 橙途
        - use_df:
            key: monthly_org_bu_code_mini
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [chengtu]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010202,Q-1010203,Q-1010204,Q-1010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-1010102'] + df['Q-102']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 橙途
        - stash_push_df: []
        ## 来来
        - use_df:
            key: monthly_org_bu_code_mini
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [lailai,kfcdayang,mcdayang]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010101,Q-1010102,Q-1010202,Q-2010101,Q-2010102,Q-20201,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010202']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 来来
        - stash_push_df: []
        ##  其他
        - use_df:
            key: monthly_org_bu_code_mini
        - df_select:
            - '[industry_id] == @p1'
            - p1: qi_ta
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010203,Q-1010101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010203'] + df['Q-1010101']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_actual
        - add_cols:
            - erji_industry: 其他
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - push_dataset:
            key: mibi

### 季度维度-事业部-code维度
        - fetch_dataset:   # 一个季度，获取本月以及前两个月的数据
            dataset_type_code: financial_statement_copy
            dataset_cate: std
            month_range: True
            month_delta: -2
            ignore_null_error: true
            empty_df_record:
              code_id: '-'
              code_name: '-'
              team_id: '-'
              team_code: '-'
              org_bu_division: '-'
              org_bu: '-'
              team_cate: '-'
              industry_id: '-'
              platform_id: '-'
              book_month: 197901
              ac_id: '-'
              ac_code: '-'
              money: 0.0
              code_code: '-'
              ac_rule_kind: '-'
        # 判断并获取一个季度的数据，若为8月，则上面拼接为6、7、8月份数据，筛选过后为7、8月份数据
        - run_py:
            - |
              df = df[df['book_month'].notnull()]
              df['month'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month'] = df['month'].astype(int)
              month_now = df['month'].max()
              df['时间先后情况'] = df['month']-((month_now//3-(month_now-(month_now//3*3) ==0))*3+1)
              df = df[df['时间先后情况']>=0]
              result = df
        - df_select:
            - '[ac_rule_kind] == @p1'
            - p1: code
        - df_groupby:
            by: [org_bu,industry_id,platform_id,ac_code]
        - df_sum:
            column: [money]
        - df_reset_index: []
        - push_dataset:
            key: monthly_org_bu_code_mini_1
        ## 外卖
        - use_df:
            key: monthly_org_bu_code_mini_1
        - df_select:
            - '[industry_id] == @p1'
            - p1: wai_mai
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
# 判断当前列是否存在，若存在返回当前列，若不存在创建列为默认值，防止计算时不存在列报错
        - pad_cols:
            columns: [ C-101,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-20101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20601,Q-20604,Q-20605,Q-20701,Q-20702,Q-20704,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:   # 计算所需的指标
            - |
              df['C-101'] = df['C-101'] * 100
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20604'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-206'] + df['Q-207']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 外卖
        - stash_push_df: []
        ## 单车
        - use_df:
            key: monthly_org_bu_code_mini_1
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [qingju, haluo, mobike, gofun, tianmao]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20602,Q-20603,Q-20605,Q-20701,Q-20702,Q-20704,Q-701,C-201,C-202,Q-10301,Q-10302 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-206'] = df['Q-20602'] + df['Q-20603'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['Y-QS-1'] = df['Q-10301'] + df['Q-10302']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 单车
        - stash_push_df: []
        ## 网约车
        - use_df:
            key: monthly_org_bu_code_mini_1
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [didi, caocaochuxing]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204']
              df['Y-QS-1'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Y-QS-2'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 网约车
        - stash_push_df: []
        ## 橙途
        - use_df:
            key: monthly_org_bu_code_mini_1
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [chengtu]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010202,Q-1010203,Q-1010204,Q-1010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-1010102'] + df['Q-102']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 橙途
        - stash_push_df: []
        ## 来来
        - use_df:
            key: monthly_org_bu_code_mini_1
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [lailai,kfcdayang,mcdayang]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010101,Q-1010102,Q-1010202,Q-2010101,Q-2010102,Q-20201,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010202']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 来来
        - stash_push_df: []
        ##  其他
        - use_df:
            key: monthly_org_bu_code_mini_1
        - df_select:
            - '[industry_id] == @p1'
            - p1: qi_ta
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010203,Q-1010101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010203'] + df['Q-1010101']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_actual
        - add_cols:
            - erji_industry: 其他
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - stash_push_df: []
        - use_df:
            key: mibi
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu,subject_code,erji_industry]
            how: outer
            drop_stash: true
        - push_dataset:
            key: mibi1

### 年度维度-事业部-code维度（外卖、单车）
        - fetch_dataset:  # 获取近一年的数据
            dataset_type_code: financial_statement_copy
            dataset_cate: std
            month_range: True
            month_delta: -11
            ignore_null_error: true
            empty_df_record:
              code_id: '-'
              code_name: '-'
              team_id: '-'
              team_code: '-'
              org_bu_division: '-'
              org_bu: '-'
              team_cate: '-'
              industry_id: '-'
              platform_id: '-'
              book_month: 197901
              ac_id: '-'
              ac_code: '-'
              money: 0.0
              code_code: '-'
              ac_rule_kind: '-'
        - df_select:   # 筛选code的数据
            - '[ac_rule_kind] == @p1'
            - p1: code
        - df_groupby:
            by: [ org_bu,industry_id,platform_id,ac_code ]
        - df_sum:
            column: [ money ]
        - df_reset_index: [ ]
        - push_dataset:
            key: monthly_org_bu_code_mini_all
        ## 外卖
        - use_df:
            key: monthly_org_bu_code_mini_all
        - df_select:   # 先筛去外卖的数据进行计算
            - '[industry_id] == @p1'
            - p1: wai_mai
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: [ ]
        - pad_cols:
            columns: [ C-101,Q-1010101,Q-1010102,Q-1010103,Q-1010104,Q-20101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20601,Q-20604,Q-20605,Q-20701,Q-20702,Q-20704,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['C-101'] = df['C-101'] * 100
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010103'] + df['Q-1010104']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20601'] + df['Q-20604'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-206'] + df['Q-207']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:  # 按照列进行排序
            sort_list: [org_bu,C-101,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 外卖
        - stash_push_df: [ ]
        ## 单车
        - use_df:
            key: monthly_org_bu_code_mini_all
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [qingju, haluo, mobike, gofun, tianmao]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: [ ]
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20602,Q-20603,Q-20605,Q-20701,Q-20702,Q-20704,Q-701,C-201,C-202,Q-10301,Q-10302 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-206'] = df['Q-20602'] + df['Q-20603'] + df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20704']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['Y-QS-1'] = df['Q-10301'] + df['Q-10302']
              df['QS-1'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['Y-C-2'] = df['C-201'] * 100 + df['C-202'] * 100
              df['code利润'] = df['QS-1'] + df['Q-20704']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu,Y-C-2,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 单车
        - stash_push_df: [ ]
        ## 网约车
        - use_df:
            key: monthly_org_bu_code_mini_all
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: chu_xing
              p2: [didi, caocaochuxing]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ C-301,C-302,C-304,C-305,C-307,C-308,C-309,C-310,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030303,Q-1010201,Q-1010202,Q-1010203,Q-1010204,Q-2110201,Q-2110202,Q-21101,Q-21201,Q-21202,Q-21301,Q-21302,Q-21303,Q-21304,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-2080301,Q-2080302,Q-2080303,Q-2080201,Q-2080202,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-20804,Q-214,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['CS-3078'] = df['C-307'] * 100 + df['C-308'] * 100
              df['CS-30910'] = df['C-309'] * 100 + df['C-310'] * 100
              df['Y-CS-3016'] = df['CS-3078'] + df['CS-30910']

              df['CS-3013'] = df['C-301'] * 100 + df['C-302'] * 100
              df['CS-3046'] = df['C-304'] * 100 + df['C-305'] * 100
              df['Y-CS-3014'] = df['CS-3013'] + df['CS-3046']

              df['Q-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['Q-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['Q-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030303']
              df['Q-10102'] = df['Q-1010201'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204']
              df['Y-QS-1'] = df['Q-10401'] + df['Q-10402'] + df['Q-10102'] + df['Q-10303']

              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-20805'] = df['Q-2080501'] +  df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Y-QS-2'] = df['Q-211'] + df['Q-212'] + df['Q-213'] + df['Q-214'] + df['Q-20401'] + df['Q-20402'] + df['Q-208']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 网约车
        - stash_push_df: []
        ## 橙途
        - use_df:
            key: monthly_org_bu_code_mini_all
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [chengtu]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-2010101,Q-2010102,Q-10201,Q-10202,Q-10203,Q-1010101,Q-1010202,Q-1010203,Q-1010204,Q-1010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-1010102'] + df['Q-102']

              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-203'] + df['Q-205'] + df['Q-206'] + df['Q-207']

              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 橙途
        - stash_push_df: []
        ## 来来
        - use_df:
            key: monthly_org_bu_code_mini_all
        - df_select:
            - '[industry_id] == @p1 & [platform_id] in @p2'
            - p1: bao_jie
              p2: [lailai,kfcdayang,mcdayang]
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010101,Q-1010102,Q-1010202,Q-2010101,Q-2010102,Q-20201,Q-20605,Q-20701,Q-20702,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010101'] + df['Q-1010102'] + df['Q-1010202']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201']
              df['Q-206'] = df['Q-20605']
              df['Q-207'] = df['Q-20701'] + df['Q-20702']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-206'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-206,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 来来
        - stash_push_df: []
        ##  其他
        - use_df:
            key: monthly_org_bu_code_mini_all
        - df_select:
            - '[industry_id] == @p1'
            - p1: qi_ta
        - df_pivot_table: # 透视表
            values: money
            index: [ org_bu ]
            columns: [ ac_code ]
            aggfunc: sum
        - run_py:
            - |
              df = df / 100
              result = df
        - df_reset_index: []
        - pad_cols:
            columns: [ Q-1010203,Q-1010101,Q-2010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20501,Q-20502,Q-20701,Q-20702,Q-2070301,Q-2070302,Q-2070303,Q-701 ]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['Y-QS-1'] = df['Q-1010203'] + df['Q-1010101']
              df['Q-20101'] = df['Q-2010101'] + df['Q-2010102']
              df['Q-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['Q-205'] = df['Q-20501'] + df['Q-20502']
              df['Q-20703'] = df['Q-2070301'] + df['Q-2070302'] + df['Q-2070303']
              df['Q-207'] = df['Q-20701'] + df['Q-20702'] + df['Q-20703']
              df['Y-QS-2'] = df['Q-20101'] + df['Q-202'] + df['Q-205'] + df['Q-207']
              df['code利润'] = df['Y-QS-1'] + df['Q-701'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [org_bu,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - sort_by_columns:
            sort_list: [org_bu,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-205,Q-207,code利润,code利润率]
        - run_py:
            - |
              df = df.melt(id_vars='org_bu')
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_actual
        - add_cols:
            - erji_industry: 其他
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - stash_push_df: [ ]
        - use_df:
            key: mibi1
        - stash_push_df: [ ]
        - stash_join_df:
            on: [org_bu,subject_code,erji_industry]
            how: outer
            drop_stash: true
        - set_meta_month_column:
            - book_month
        - df_fillna:
            value: 0
        - fetch_cols:
            columns: [org_bu,subject_code,erji_industry,monthly_actual,quarter_actual,year_actual,book_month]
        - drop_duplicates:
            subset: [ org_bu,subject_code,erji_industry,monthly_actual,quarter_actual,year_actual,book_month ]


### 汇总-事业部-code维度
    - name: code_org_bu_Pre_computation_table
      sync_result: true
      cooks:
        - use_df:
            key: code_org_bu_Pre_computation_actual_table
        - push_dataset:
            key: code_org_bu_Pre_computation_table_mini
        - fetch_dataset:    ## 读取上个月数据进行计算环比
            dataset_type_code: code_org_bu_Pre_computation_actual_table
            dataset_cate: std
            month_range: True
            month_delta: -1
            ignore_null_error: true
            columns: [org_bu,subject_code,monthly_actual,erji_industry,book_month]
            empty_df_record:
              org_bu: '-'
              subject_code: '-'
              monthly_actual: 0
              erji_industry: '-'
              book_month: 197901
            rename:
              monthly_actual: monthly_actual_before
        - stash_push_df: []
        - use_df:
            key: final_summary_copy
            rename:
              monthly_actual: monthly_actual_before
              sub_industry_name: erji_industry
        - df_select:
            - '[type] == @p1'
            - p1: org_bu_platform
        - fetch_cols:
            columns: [org_bu,subject_code,monthly_actual_before,erji_industry,book_month]
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - run_py:
            - |
              df = to_df(df).copy()
              max_month = df['book_month'].max()
              year = int(str(max_month)[:4])
              month = int(str(max_month)[4:])
              if month - 1 == 0:
                  year = year - 1
                  month = 12
                  df['book_now'] = year * 100 + month
              else:
                  month = month - 1
                  df['book_now'] = year * 100 + month
              result = to_df(df)
        - df_select:
            - '[book_month] == [book_now]'
        - fetch_cols:
            columns: [org_bu,subject_code,monthly_actual_before,erji_industry]
        - stash_push_df: []
        - use_df:
            key: code_org_bu_Pre_computation_table_mini
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu,subject_code,erji_industry]
            how: left
            drop_stash: true
        - push_dataset:
            key: code_org_bu_Pre_computation_table_mini1
### 计算环比，获取上个季度最全的数据，例如（7-9月属于Q3，我要获取Q2的数据，获取最全的6月份数据）每个月动态获取
        - fetch_dataset:
            dataset_type_code: code_org_bu_Pre_computation_actual_table
            dataset_cate: std
            month_range: True
            month_delta: -3
            columns: [org_bu,subject_code,quarter_actual,erji_industry,book_month]
            ignore_null_error: true
            empty_df_record:
              org_bu: '-'
              subject_code: '-'
              quarter_actual: 0
              erji_industry: '-'
              book_month: 197901
            rename:
              quarter_actual: quarter_actual_before
        - stash_push_df: []
        - use_df:
            key: final_summary_copy
            rename:
              quarter_actual: quarter_actual_before
              sub_industry_name: erji_industry
        - df_select:
            - '[type] == @p1'
            - p1: org_bu_platform
        - fetch_cols:
            columns: [org_bu,subject_code,quarter_actual_before,erji_industry,book_month]
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - df_to_int:
            - book_month
        - run_py:
            - |
              df['month'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month'] = df['month'].astype(int)
              df['max_month'] = df['book_month'].max()
              df['month_now'] = df['max_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_now1 = df['month_now'].max()
              df = df[df['month'] == (month_now1//3-(month_now1-(month_now1//3*3)==0)+4*((month_now1//3-(month_now1-(month_now1//3*3)==0))==0))*3]
              result = df
        - fetch_cols:
            columns: [org_bu,subject_code,erji_industry,quarter_actual_before]
        - stash_push_df: []
        - use_df:
            key: code_org_bu_Pre_computation_table_mini1
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu,subject_code,erji_industry]
            how: left
            drop_stash: true
        - pad_cols:
            columns: [ monthly_actual_before,quarter_actual_before ]
            default_value: 0
        - push_dataset:
            key: mici

        - fetch_dataset: ## 预算数据
            dataset_type_code: budget_summary
            dataset_cate: std
            ignore_null_error: true
            empty_df_record:
              ac_code: '-'
              team_id: '-'
              ac_id: '-'
              book_year: 1979
              book_month: 197901
              money: 0.0
              sub_industry_name: '-'
              org_bu: '-'
              org_bu_division: '-'
              team_code: '-'
              team_cate: '-'
            rename:
              ac_code: subject_code
              money: budget
        - set_meta_month_column:
            - month
        - run_py: ## 筛选 team_cate 为空,并且 org_bu 不为空的即为 事业部 对应数据
            - |
              df = df[df['team_cate'].isnull()]
              df = df[df['org_bu'].notnull()]
              df['月份_now'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['月份_now'] = df['月份_now'].astype(int)
              df['month_now'] = df['month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_now2 = df['month_now'].max()
              df = df[df['月份_now'] >= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1)]
              df = df[df['月份_now'] <= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1) + 2]
              result = df
        - push_dataset:
            key: mici1
        ## 月度
        - use_df:
            key: mici1
        - df_select:
            - '[book_month] == [month]'
        - run_py: ## 透视表
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="budget",index=['org_bu','sub_industry_name'],columns="subject_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [org_bu,sub_industry_name,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - run_py:
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars=['org_bu','sub_industry_name'])
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: monthly_budget
              sub_industry_name: erji_industry
        - stash_push_df: []
        ## 季度
        - use_df:
            key: mici1
        - run_py: ## 透视表
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="budget",index=['org_bu','sub_industry_name'],columns="subject_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [org_bu,sub_industry_name,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - run_py:
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars=['org_bu','sub_industry_name'])
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: quarter_budget
              sub_industry_name: erji_industry
        - stash_push_df: []
        ## 年度
        - fetch_dataset: ## 预算数据
            dataset_type_code: budget_summary
            dataset_cate: std
            ignore_null_error: true
            rename:
              ac_code: subject_code
              money: budget
        - run_py: ## 筛选 team_cate 为空,并且 org_bu 不为空的即为 事业部 对应数据
            - |
              df = to_df(df).copy()
              df = df[df['team_cate'].isnull()]
              df = df[df['org_bu'].notnull()]
              df = df.pivot_table(values="budget",index=['org_bu','sub_industry_name'],columns="subject_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - pad_cols:
            columns: [C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
            default_value: 0.0
        - fetch_cols:
            columns: [org_bu,sub_industry_name,C-101,Y-C-2,Y-CS-3016,Y-CS-3014,Y-QS-1,Y-QS-2,Q-20101,Q-202,Q-203,Q-205,Q-206,Q-207,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214,Y-QS-3,Q-301,Q-302,Q-303]
        - run_py:
            - |
              df['code利润'] = df['Y-QS-1'] - df['Y-QS-2']
              df['code利润率'] = (df['code利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df['利润'] = df['code利润'] - df['Y-QS-3']
              df['利润率'] = (df['利润'] / df['Y-QS-1']).replace([np.inf, -np.inf, "", np.nan],0)
              df = df.melt(id_vars=['org_bu','sub_industry_name'])
              result = df
        - df_rename_columns:
            - ac_code: subject_code
              value: year_budget
              sub_industry_name: erji_industry
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu,subject_code,erji_industry]
            how: outer
            drop_stash: true
        - stash_push_df: []
        - use_df:
            key: mici
        - fetch_cols:
            columns: [org_bu,erji_industry,quarter_actual_before,subject_code,monthly_actual_before,year_actual,book_month,quarter_actual,monthly_actual]
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu,subject_code,erji_industry]
            how: outer
            drop_stash: true
        - push_dataset:
            key: mici5

        - fetch_dataset:  # 获取20年决算数据
            dataset_type_code: final_summary
            dataset_cate: std
            month_value: 202012
            ignore_null_error: true
            empty_df_record:
              ac_code: '-'
              team_id: '-'
              ac_id: '-'
              book_year: 1979
              book_month: 197901
              money: 0.0
              sub_industry_name: '-'
              org_bu: '-'
              org_bu_division: '-'
              team_code: '-'
              team_cate: '-'
            rename:
              ac_code: subject_code
              money: actual_before_20
              sub_industry_name: erji_industry
        - run_py:   # org_bu 不为空则为20年事业部决算数据
            - |
              df = df[df['org_bu'].notnull()]
              df['subject_code'] = df['subject_code'].apply(lambda x:x.replace('Y-QS-4','利润'))
              result = df
        - df_to_int:
            - book_month
        - set_meta_month_column:
            - month
        - push_dataset:
            key: mici6
        ## 月度20年决算数据
        - use_df:
            key: mici6
        - run_py: # org_bu 不为空则为20年分部决算数据
            - |
              df['month_now'] = df['month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_2020 = 202000 + df['month_now'].max()
              df = df[df['book_month'] == month_2020]
              result = df
        - df_groupby:
            by: [org_bu,subject_code,erji_industry]
        - df_sum:
            column: actual_before_20
            rename: monthly_actual_before_20
        - df_reset_index: []
        - stash_push_df: []
        ## 季度20年决算数据
        - use_df:
            key: mici6
        - run_py:
            - |
              df['月份_now'] = df['book_month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['月份_now'] = df['月份_now'].astype(int)
              df['month_now'] = df['month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['month_now'] = df['month_now'].astype(int)
              month_now2 = df['month_now'].max()
              df = df[df['月份_now'] >= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1)]
              df = df[df['月份_now'] <= ((month_now2//3-(month_now2-(month_now2//3*3) ==0))*3+1) + 2]
              result = df
        - df_groupby:
            by: [org_bu,subject_code,erji_industry]
        - df_sum:
            column: actual_before_20
            rename: quarter_actual_before_20
        - df_reset_index: []
        - stash_push_df: []
        ## 年度20年决算数据
        - use_df:
            key: mici6
        - df_groupby:
            by: [org_bu,subject_code,erji_industry]
        - df_sum:
            column: actual_before_20
            rename: year_actual_before_20
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [org_bu,subject_code,erji_industry]
            how: outer
            drop_stash: true
        - stash_push_df: []
        - use_df:
            key: mici5
        - stash_push_df: []
        - stash_join_df:
            on: [ org_bu,subject_code,erji_industry ]
            how: left
            drop_stash: true
        - df_fillna:
            value: 0
        - push_dataset:
            key: aiei
        - use_df:
            key: aiei
        - df_select:
            - '[subject_code]!= @p1'
            - p1: [code利润率,利润率]
        - run_py:
            - |
              df['MOM'] = 0.0
              df['QOQ'] = 0.0
              df['month_on_month'] = 0.0
              df['quarter_on_quarter'] = 0.0
              df['year_on_year'] = 0.0
              df['monthly_budget_achievement_rate'] = 0.0
              df['quarter_budget_achievement_rate'] = 0.0
              df['year_budget_achievement_rate'] = 0.0
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] > 0,(df['monthly_actual'] - df['monthly_actual_before']) / df['monthly_actual_before'])
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] < 0,(df['monthly_actual'] - df['monthly_actual_before']) / (-df['monthly_actual_before']))
              df['monthly_budget_achievement_rate'] = df['monthly_budget_achievement_rate'].mask(df['monthly_budget'] > 0,df['monthly_actual'] / df['monthly_budget'])
              df['monthly_budget_achievement_rate'] = df['monthly_budget_achievement_rate'].mask(df['monthly_budget'] < 0,2 - df['monthly_actual'] / df['monthly_budget'])
              df['month_on_month'] = df['month_on_month'].mask(df['monthly_actual_before_20'] > 0,(df['monthly_actual'] - df['monthly_actual_before_20']) / df['monthly_actual_before_20'])
              df['month_on_month'] = df['month_on_month'].mask(df['monthly_actual_before_20'] < 0,(df['monthly_actual'] - df['monthly_actual_before_20']) / (-df['monthly_actual_before_20']))
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] > 0,(df['quarter_actual'] - df['quarter_actual_before']) / df['quarter_actual_before'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] < 0,(df['quarter_actual'] - df['quarter_actual_before']) / (-df['quarter_actual_before']))
              df['quarter_budget_achievement_rate'] = df['quarter_budget_achievement_rate'].mask(df['quarter_budget'] > 0,df['quarter_actual'] / df['quarter_budget'])
              df['quarter_budget_achievement_rate'] = df['quarter_budget_achievement_rate'].mask(df['quarter_budget'] < 0,2 - df['quarter_actual'] / df['quarter_budget'])
              df['quarter_on_quarter'] = df['quarter_on_quarter'].mask(df['quarter_actual_before_20'] > 0,(df['quarter_actual'] - df['quarter_actual_before_20']) / df['quarter_actual_before_20'])
              df['quarter_on_quarter'] = df['quarter_on_quarter'].mask(df['quarter_actual_before_20'] < 0,(df['quarter_actual'] - df['quarter_actual_before_20']) / (-df['quarter_actual_before_20']))
              df['year_budget_achievement_rate'] = df['year_budget_achievement_rate'].mask(df['year_budget'] > 0,df['year_actual'] / df['year_budget'])
              df['year_budget_achievement_rate'] = df['year_budget_achievement_rate'].mask(df['year_budget'] < 0,2 - df['year_actual'] / df['year_budget'])
              df['year_on_year'] = df['year_on_year'].mask(df['year_actual_before_20'] > 0,(df['year_actual'] - df['year_actual_before_20']) / df['year_actual_before_20'])
              df['year_on_year'] = df['year_on_year'].mask(df['year_actual_before_20'] < 0,(df['year_actual'] - df['year_actual_before_20']) / (-df['year_actual_before_20']))
              df['book_day'] = np.datetime64('now')
              result = df
        - stash_push_df: []
        - use_df:
            key: aiei
        - df_select:
            - '[subject_code]== @p1'
            - p1: [code利润率,利润率]
        - run_py:
            - |
              df['MOM'] = 0.0
              df['QOQ'] = 0.0
              df['month_on_month'] = 0.0
              df['quarter_on_quarter'] = 0.0
              df['year_on_year'] = 0.0
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] > 0,(df['monthly_actual'] - df['monthly_actual_before']) / df['monthly_actual_before'])
              df['MOM'] = df['MOM'].mask(df['monthly_actual_before'] < 0,(df['monthly_actual'] - df['monthly_actual_before']) / (-df['monthly_actual_before']))
              df['monthly_budget_achievement_rate'] = df['monthly_actual'] - df['monthly_budget']
              df['month_on_month'] = df['month_on_month'].mask(df['monthly_actual_before_20'] > 0,(df['monthly_actual'] - df['monthly_actual_before_20']) / df['monthly_actual_before_20'])
              df['month_on_month'] = df['month_on_month'].mask(df['monthly_actual_before_20'] < 0,(df['monthly_actual'] - df['monthly_actual_before_20']) / (-df['monthly_actual_before_20']))
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] > 0,(df['quarter_actual'] - df['quarter_actual_before']) / df['quarter_actual_before'])
              df['QOQ'] = df['QOQ'].mask(df['quarter_actual_before'] < 0,(df['quarter_actual'] - df['quarter_actual_before']) / (-df['quarter_actual_before']))
              df['quarter_budget_achievement_rate'] = df['quarter_actual'] - df['quarter_budget']
              df['quarter_on_quarter'] = df['quarter_on_quarter'].mask(df['quarter_actual_before_20'] > 0,(df['quarter_actual'] - df['quarter_actual_before_20']) / df['quarter_actual_before_20'])
              df['quarter_on_quarter'] = df['quarter_on_quarter'].mask(df['quarter_actual_before_20'] < 0,(df['quarter_actual'] - df['quarter_actual_before_20']) / (-df['quarter_actual_before_20']))
              df['year_budget_achievement_rate'] = df['year_actual'] - df['year_budget']
              df['year_on_year'] = df['year_on_year'].mask(df['year_actual_before_20'] > 0,(df['year_actual'] - df['year_actual_before_20']) / df['year_actual_before_20'])
              df['year_on_year'] = df['year_on_year'].mask(df['year_actual_before_20'] < 0,(df['year_actual'] - df['year_actual_before_20']) / (-df['year_actual_before_20']))
              df['book_day'] = np.datetime64('now')
              result = df
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - set_meta_month_column:
            - book_month
        - df_select:
            - '[monthly_budget] != 0 | [monthly_actual] != 0 | [quarter_budget] != 0 | [quarter_actual] != 0 | [year_budget] != 0 | [year_actual] != 0'
        - drop_duplicates:
            subset: [ quarter_actual,org_bu,monthly_actual_before,book_month,year_actual,monthly_actual,subject_code,quarter_actual_before,year_budget,monthly_budget,quarter_budget,MOM,QOQ,monthly_budget_achievement_rate,quarter_budget_achievement_rate,year_budget_achievement_rate,book_day,erji_industry ]



### team列表
    - name: team_detail_table
      sync_result: true
      cooks:
        ## O1
        - fetch_dataset:
            dataset_type_code: team_Pre_computation_table
            dataset_cate: std
            ignore_null_error: true
            columns: [team_id,subject_code,monthly_budget_achievement_rate,team_cate,monthly_budget]
            empty_df_record:
              team_id: '-'
              subject_code: '-'
              team_cate: '-'
              monthly_budget_achievement_rate: 0.0
        - df_select:
            - '[team_cate] == @p1'
            - p1: O1
        - push_dataset:
            key: team_detail_table_mini
## 单量预算数
        - use_df:
            key: team_detail_table_mini
        - df_select:
            - '[subject_code] == @p1'
            - p1: C-101
        - df_rename_columns:
            - monthly_budget: 单量预算数
        - fetch_cols:
            columns: [team_id,单量预算数,team_cate]
        - stash_push_df: []
## 主营业务收入预算数
        - use_df:
            key: team_detail_table_mini
        - df_select:
            - '[subject_code] == @p1'
            - p1: Y-QS-1
        - df_rename_columns:
            - monthly_budget: 主营业务收入预算数
        - fetch_cols:
            columns: [team_id,主营业务收入预算数,team_cate]
        - stash_push_df: []
## 车辆数预算数
        - use_df:
            key: team_detail_table_mini
        - df_select:
            - '[subject_code] == @p1'
            - p1: Y-C-2
        - df_rename_columns:
            - monthly_budget: 车辆数预算数
        - fetch_cols:
            columns: [team_id,车辆数预算数,team_cate]
        - stash_push_df: []
## 单量达成率
        - use_df:
            key: team_detail_table_mini
        - df_select:
            - '[subject_code] == @p1'
            - p1: C-101
        - df_rename_columns:
            - monthly_budget_achievement_rate: 单量达成率
        - fetch_cols:
            columns: [team_id,单量达成率,team_cate]
        - stash_push_df: []
## 主营业务收入达成率
        - use_df:
            key: team_detail_table_mini
        - df_select:
            - '[subject_code] == @p1'
            - p1: Y-QS-1
        - df_rename_columns:
            - monthly_budget_achievement_rate: 主营业务收入达成率
        - fetch_cols:
            columns: [team_id,主营业务收入达成率,team_cate]
        - stash_push_df: []
## 主营业务成本达成率
        - use_df:
            key: team_detail_table_mini
        - df_select:
            - '[subject_code] == @p1'
            - p1: Y-QS-2
        - df_rename_columns:
            - monthly_budget_achievement_rate: 主营业务成本达成率
        - fetch_cols:
            columns: [team_id,主营业务成本达成率,team_cate]
        - stash_push_df: []
## code利润达成率
        - use_df:
            key: team_detail_table_mini
        - df_select:
            - '[subject_code] == @p1'
            - p1: code利润
        - df_rename_columns:
            - monthly_budget_achievement_rate: code利润达成率
        - fetch_cols:
            columns: [team_id,code利润达成率,team_cate]
        - stash_push_df: []
## 管理费用达成率
        - use_df:
            key: team_detail_table_mini
        - df_select:
            - '[subject_code] == @p1'
            - p1: Y-QS-3
        - df_rename_columns:
            - monthly_budget_achievement_rate: 管理费用达成率
        - fetch_cols:
            columns: [team_id,管理费用达成率,team_cate]
        - stash_push_df: []
## 利润达成率
        - use_df:
            key: team_detail_table_mini
        - df_select:
            - '[subject_code] == @p1'
            - p1: 利润
        - df_rename_columns:
            - monthly_budget_achievement_rate: 利润达成率
        - fetch_cols:
            columns: [team_id,利润达成率,team_cate]
        - stash_push_df: []
        - stash_join_df:
            on: [team_id,team_cate]
            how: outer
            drop_stash: true
        - push_dataset:
            key: team_detail_table_O1
        ## O2
        - fetch_dataset:
            dataset_type_code: team_Pre_computation_table_O2
            dataset_cate: std
            ignore_null_error: true
            columns: [ team_id,subject_code,monthly_budget_achievement_rate,monthly_budget ]
        - push_dataset:
            key: team_detail_table_mini_O2
## 单量预算数
        - use_df:
            key: team_detail_table_mini_O2
        - df_select:
            - '[subject_code] == @p1'
            - p1: C-101
        - df_rename_columns:
            - monthly_budget: 单量预算数
        - fetch_cols:
            columns: [team_id,单量预算数]
        - stash_push_df: []
## 主营业务收入预算数
        - use_df:
            key: team_detail_table_mini_O2
        - df_select:
            - '[subject_code] == @p1'
            - p1: Y-QS-1
        - df_rename_columns:
            - monthly_budget: 主营业务收入预算数
        - fetch_cols:
            columns: [team_id,主营业务收入预算数]
        - stash_push_df: []
## 车辆数预算数
        - use_df:
            key: team_detail_table_mini_O2
        - df_select:
            - '[subject_code] == @p1'
            - p1: Y-C-2
        - df_rename_columns:
            - monthly_budget: 车辆数预算数
        - fetch_cols:
            columns: [team_id,车辆数预算数]
        - stash_push_df: []
## 单量达成率
        - use_df:
            key: team_detail_table_mini_O2
        - df_select:
            - '[subject_code] == @p1'
            - p1: C-101
        - df_rename_columns:
            - monthly_budget_achievement_rate: 单量达成率
        - fetch_cols:
            columns: [team_id,单量达成率]
        - stash_push_df: []
## 主营业务收入达成率
        - use_df:
            key: team_detail_table_mini_O2
        - df_select:
            - '[subject_code] == @p1'
            - p1: Y-QS-1
        - df_rename_columns:
            - monthly_budget_achievement_rate: 主营业务收入达成率
        - fetch_cols:
            columns: [team_id,主营业务收入达成率]
        - stash_push_df: []
## 主营业务成本达成率
        - use_df:
            key: team_detail_table_mini_O2
        - df_select:
            - '[subject_code] == @p1'
            - p1: Y-QS-2
        - df_rename_columns:
            - monthly_budget_achievement_rate: 主营业务成本达成率
        - fetch_cols:
            columns: [team_id,主营业务成本达成率]
        - stash_push_df: []
## code利润达成率
        - use_df:
            key: team_detail_table_mini_O2
        - df_select:
            - '[subject_code] == @p1'
            - p1: code利润
        - df_rename_columns:
            - monthly_budget_achievement_rate: code利润达成率
        - fetch_cols:
            columns: [team_id,code利润达成率]
        - stash_push_df: []
## 管理费用达成率
        - use_df:
            key: team_detail_table_mini_O2
        - df_select:
            - '[subject_code] == @p1'
            - p1: Y-QS-3
        - df_rename_columns:
            - monthly_budget_achievement_rate: 管理费用达成率
        - fetch_cols:
            columns: [team_id,管理费用达成率]
        - stash_push_df: []
## 利润达成率
        - use_df:
            key: team_detail_table_mini_O2
        - df_select:
            - '[subject_code] == @p1'
            - p1: 利润
        - df_rename_columns:
            - monthly_budget_achievement_rate: 利润达成率
        - fetch_cols:
            columns: [team_id,利润达成率]
        - stash_push_df: []
        - stash_join_df:
            on: team_id
            how: outer
            drop_stash: true
        - add_cols:
            - team_cate: O2
        - stash_push_df: []
        - use_df:
            key: team_detail_table_O1
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - push_dataset:
            key: team_detail_table_O1_O2
        ## S-F
        - fetch_dataset:
            dataset_type_code: team_Pre_computation_table
            dataset_cate: std
            ignore_null_error: true
            columns: [team_id,subject_code,monthly_actual,team_cate]
            empty_df_record:
              team_id: '-'
              subject_code: '-'
              team_cate: '-'
              monthly_actual: 0.0
        - df_select:
            - '[team_cate] in @p1'
            - p1: [S,F]
        - push_dataset:
            key: team_detail_table_mini_S_F
## 管理费用实际值
        - use_df:
            key: team_detail_table_mini_S_F
        - df_select:
            - '[subject_code] == @p1'
            - p1: Y-QS-3
        - df_rename_columns:
            - monthly_actual: 管理费用实际值
        - fetch_cols:
            columns: [team_id,管理费用实际值,team_cate]
        - stash_push_df: []
## 工资社保费用实际值
        - use_df:
            key: team_detail_table_mini_S_F
        - df_select:
            - '[subject_code] == @p1'
            - p1: Q-301
        - df_rename_columns:
            - monthly_actual: 工资社保费用实际值
        - fetch_cols:
            columns: [team_id,工资社保费用实际值,team_cate]
        - stash_push_df: []
## 办公管理费用实际值
        - use_df:
            key: team_detail_table_mini_S_F
        - df_select:
            - '[subject_code] == @p1'
            - p1: Q-302
        - df_rename_columns:
            - monthly_actual: 办公管理费用实际值
        - fetch_cols:
            columns: [team_id,办公管理费用实际值,team_cate]
        - stash_push_df: []
## 物资采购费用实际值
        - use_df:
            key: team_detail_table_mini_S_F
        - df_select:
            - '[subject_code] == @p1'
            - p1: Q-303
        - df_rename_columns:
            - monthly_actual: 物资采购费用实际值
        - fetch_cols:
            columns: [team_id,物资采购费用实际值,team_cate]
        - stash_push_df: []
        - stash_join_df:
            on: [team_id,team_cate]
            how: outer
            drop_stash: true
        - stash_push_df: []
        - use_df:
            key: team_detail_table_O1_O2
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - run_py:
            - |
              df['book_day'] = np.datetime64('now')
              result = df
        - drop_duplicates:
            subset: [利润达成率,team_id,管理费用达成率,code利润达成率,主营业务成本达成率,主营业务收入达成率,单量达成率,book_day,team_cate,管理费用实际值,工资社保费用实际值,办公管理费用实际值,物资采购费用实际值,单量预算数,主营业务收入预算数,车辆数预算数]


### code列表
    - name: code_detail_table
      sync_result: true
      cooks:
        - fetch_dataset:
            dataset_type_code: code_Pre_computation_table
            dataset_cate: std
            ignore_null_error: true
            columns: [team_id,subject_code,team_cate,code_id,team_id_O2,org_bu_division,org_bu,monthly_budget_achievement_rate,monthly_budget]
            empty_df_record:
              team_id: '-'
              subject_code: '-'
              team_cate: '-'
              code_id: '-'
              team_id_O2: '-'
              org_bu_division: '-'
              org_bu: '-'
              monthly_budget_achievement_rate: 0.0
        - push_dataset:
            key: code_detail_table_mini
## 单量预算数
        - use_df:
            key: code_detail_table_mini
        - df_select:
            - '[subject_code] == @p1'
            - p1: C-101
        - df_rename_columns:
            - monthly_budget: 单量预算数
        - fetch_cols:
            columns: [team_id,team_cate,code_id,team_id_O2,org_bu_division,org_bu,单量预算数]
        - stash_push_df: []
## 主营业务收入预算数
        - use_df:
            key: code_detail_table_mini
        - df_select:
            - '[subject_code] == @p1'
            - p1: Y-QS-1
        - df_rename_columns:
            - monthly_budget: 主营业务收入预算数
        - fetch_cols:
            columns: [team_id,team_cate,code_id,team_id_O2,org_bu_division,org_bu,主营业务收入预算数]
        - stash_push_df: []
## 车辆数预算数
        - use_df:
            key: code_detail_table_mini
        - df_select:
            - '[subject_code] == @p1'
            - p1: Y-C-2
        - df_rename_columns:
            - monthly_budget: 车辆数预算数
        - fetch_cols:
            columns: [team_id,team_cate,code_id,team_id_O2,org_bu_division,org_bu,车辆数预算数]
        - stash_push_df: []
## 单量达成率
        - use_df:
            key: code_detail_table_mini
        - df_select:
            - '[subject_code] == @p1'
            - p1: C-101
        - df_rename_columns:
            - monthly_budget_achievement_rate: 单量达成率
        - fetch_cols:
            columns: [team_id,team_cate,code_id,team_id_O2,org_bu_division,org_bu,单量达成率]
        - stash_push_df: []
## 车辆数(单)达成率
        - use_df:
            key: code_detail_table_mini
        - df_select:
            - '[subject_code] == @p1'
            - p1: Y-C-2
        - df_rename_columns:
            - monthly_budget_achievement_rate: 车辆数(单)达成率
        - fetch_cols:
            columns: [team_id,team_cate,code_id,team_id_O2,org_bu_division,org_bu,车辆数(单)达成率]
        - stash_push_df: []
## 主营业务收入达成率
        - use_df:
            key: code_detail_table_mini
        - df_select:
            - '[subject_code] == @p1'
            - p1: Y-QS-1
        - df_rename_columns:
            - monthly_budget_achievement_rate: 主营业务收入达成率
        - fetch_cols:
            columns: [team_id,team_cate,code_id,team_id_O2,org_bu_division,org_bu,主营业务收入达成率]
        - stash_push_df: []
## 主营业务成本达成率
        - use_df:
            key: code_detail_table_mini
        - df_select:
            - '[subject_code] == @p1'
            - p1: Y-QS-2
        - df_rename_columns:
            - monthly_budget_achievement_rate: 主营业务成本达成率
        - fetch_cols:
            columns: [team_id,team_cate,code_id,team_id_O2,org_bu_division,org_bu,主营业务成本达成率]
        - stash_push_df: []
## code利润达成率
        - use_df:
            key: code_detail_table_mini
        - df_select:
            - '[subject_code] == @p1'
            - p1: code利润
        - df_rename_columns:
            - monthly_budget_achievement_rate: code利润达成率
        - fetch_cols:
            columns: [team_id,team_cate,code_id,team_id_O2,org_bu_division,org_bu,code利润达成率]
        - stash_push_df: []
        - stash_join_df:
            on: [team_id,team_cate,code_id,team_id_O2,org_bu_division,org_bu]
            how: outer
            drop_stash: true
        - stash_push_df: []
        - fetch_datasource:   # 财报明细表
            datasource: qcode-finance-databook
            ignore_null_error: true
            columns: [industry_name,region_name,city_name,platform_name,project_name,industry_id,platform_id,code_id]
            empty_df_record:
              industry_id: '-'
              platform_id: '-'
              code_id: '-'
              industry_name: '-'
              region_name: '-'
              city_name: '-'
              platform_name: '-'
              project_name: '-'
        - stash_push_df: []
        - stash_join_df:
            on: code_id
            how: right
            drop_stash: true
        - run_py:
            - |
              df['book_day'] = np.datetime64('now')
              result = df
        - drop_duplicates:
            subset: [team_id,team_cate,code_id,team_id_O2,org_bu_division,org_bu,单量预算数,主营业务收入预算数,车辆数预算数,code利润达成率,主营业务成本达成率,主营业务收入达成率,单量达成率,车辆数(单)达成率,book_day,team_cate,industry_id,platform_id]
