pre_computation_daily_env:
  context_defaults:
    delay_compute: true
    sync_result_from_cluster: true
    play_on_dask_cluster: true
    dask_client_set_as_default: true
    cluster_client_address: 'dask-scheduler-service.databus:8786'

  play:
    - name: 22_budget_summary
      sync_result: true
      cooks:
        - fetch_datasource:    # 22年预算数据表
            datasource: datahub
            table: target.value
            meta_month_column_name: book_month
            month_value: 202112
            empty_df_record:
              algorithm_id: '-'
              book_month: 199901
              team_id: '-'
              code_id: '-'
              biz_meta.202201: 0.0
              biz_meta.202202: 0.0
              biz_meta.202203: 0.0
              biz_meta.202204: 0.0
              biz_meta.202205: 0.0
              biz_meta.202206: 0.0
              biz_meta.202207: 0.0
              biz_meta.202208: 0.0
              biz_meta.202209: 0.0
              biz_meta.202210: 0.0
              biz_meta.202211: 0.0
              biz_meta.202212: 0.0
              name: '-'
            rename:
              biz_meta.202201: 1月
              biz_meta.202202: 2月
              biz_meta.202203: 3月
              biz_meta.202204: 4月
              biz_meta.202205: 5月
              biz_meta.202206: 6月
              biz_meta.202207: 7月
              biz_meta.202208: 8月
              biz_meta.202209: 9月
              biz_meta.202210: 10月
              biz_meta.202211: 11月
              biz_meta.202212: 12月
              name: ac_name
        - fetch_cols:
            columns: [algorithm_id,book_month,team_id,code_id,1月,2月,3月,4月,5月,6月,7月,8月,9月,10月,11月,12月,ac_name]
        - stash_push_df: []
        - fetch_datasource:  # 预算指标展示表
            datasource: datahub
            table: target.algorithm
            meta_month_column_name: book_month
            month_value: 202112
            columns: [_id,name,code,source,cost_center_type]
            empty_df_record:
              _id: '-'
              name: '-'
              code: '-'
              source: '-'
              cost_center_type: '-'
            rename:
              _id: algorithm_id
              name: ac_name_source
              code: ac_code
        - stash_push_df: []
        - stash_join_df:
            on: algorithm_id
            how: right
            drop_stash: true
        - fetch_cols:
            columns: [algorithm_id,ac_name_source,ac_code,source,cost_center_type,code_id,team_id,ac_name,1月,2月,3月,4月,5月,6月,7月,8月,9月,10月,11月,12月]
        - run_py:    # 将列转换为行,格式要求,拼接预算数据进行计算
            - |
              df = df.melt(id_vars= ['algorithm_id','ac_name_source','ac_code','source','cost_center_type','code_id','team_id','ac_name'])
              result = df
        - df_rename_columns:
            - variable: book_month
              value: money



    - name: org_bu_parameter_details
      sync_result: true
      cooks:
        - use_df:
            key: 22_budget_summary
        - df_select:
            - '[source] in @p1'
            - p1: [budget_waimai_bu3,budget_waimai_bu2,budget_waimai_bu1]
        - push_dataset:     ## 外卖所有数据，包含所有场景
            key: waimai_bu_bu
        - use_df:
            key: waimai_bu_bu
        - run_py: ## 透视表     code维度
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="money",index=['source','code_id','book_month'],columns="ac_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - fetch_cols:
            columns: [source,code_id,book_month,S-101,S-102,S-103,S-104,S-105,S-106,S-107,S-108,S-109,S-110,S-111,S-112,S-113,S-114,S-115,S-116,S-117,S-118,S-119,S-120,S-121,S-122,S-123]
        - pad_cols:
            columns: [ S-101,S-102,S-103,S-104,S-105,S-106,S-107,S-108,S-109,S-110,S-111,S-112,S-113,S-114,S-115,S-116,S-117,S-118,S-119,S-120,S-121,S-122,S-123]
            default_value: 0
        - df_fillna:
            columns: [ S-101,S-102,S-103,S-104,S-105,S-106,S-107,S-108,S-109,S-110,S-111,S-112,S-113,S-114,S-115,S-116,S-117,S-118,S-119,S-120,S-121,S-122,S-123]
            value: 0.0
        - run_py:
            - |
              df['QS-102'] = df['S-102']
              df['QS-1030'] = df['S-103'] + df['S-104'] + df['S-105'] + df['S-106'] + df['S-107'] + df['S-108'] + df['S-109'] + df['S-110']
              df['QS-103'] = df['S-103']
              df['QS-1046'] = df['S-104'] + df['S-105'] + df['S-106']
              df['QS-1078'] = df['S-107'] + df['S-108']
              df['QS-1090'] = df['S-109'] + df['S-110']
              df['QS-111'] = (df['S-102'] * df['S-113'] / df['S-111']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-112'] = (df['S-102'] * (1 - df['S-113']) / df['S-112']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-1112'] = df['QS-111'] + df['QS-112']
              df['QS-113'] = (df['S-102'] * df['S-101'] * df['S-113'] * df['S-114'] / (df['S-102'] * df['S-113'] / df['S-111'])).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-114'] = (df['S-102'] * df['S-101'] * (1 - df['S-113']) * df['S-115'] / (df['S-102'] * (1 - df['S-113']) / df['S-112'])).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-115'] = df['S-116'] + df['S-108'] * df['S-117']
              df['QS-116'] = df['S-116']
              df['QS-117'] = df['S-108'] * df['S-117']
              df['QS-118'] = df['QS-111'] * df['S-118']
              df['QS-119'] = df['S-119'] * df['S-118']
              df['QS-120'] = df['S-120'] * df['QS-111']

              df['W-101'] = df['S-102'] * df['S-101']
              df['W-10201'] =  df['W-101'] * df['S-103']
              df['W-1020201'] = df['W-101'] * df['S-104']
              df['W-1020202'] = df['W-101'] * df['S-105']
              df['W-1020203'] = df['W-101'] * df['S-106']
              df['W-10202'] = df['W-1020201'] + df['W-1020202'] + df['W-1020203']
              df['W-1020301'] = df['W-101'] * df['S-107']
              df['W-1020302'] = df['W-101'] * df['S-108']
              df['W-10203'] = df['W-1020301'] + df['W-1020302']
              df['W-10204'] = df['W-101'] * (df['S-109'] + df['S-110'])
              df['W-10205'] = df['W-101'] * df['S-109']
              df['W-10206'] = df['W-101'] * df['S-110']
              df['W-102'] = df['W-10201'] + df['W-10202'] + df['W-10203'] + df['W-10204']
              df['W-1030101'] = df['W-101'] * df['S-113'] * df['S-114']
              df['W-1030102'] = df['W-101'] * (1 - df['S-113']) * df['S-115']
              df['W-1030103'] = df['W-101'] * df['S-116'] + df['W-1020302'] * df['S-117']
              df['W-1030104'] = df['QS-118'] * df['S-119']
              df['W-1030105'] = df['QS-111'] * df['S-120']
              df['W-10301'] = df['W-1030101'] + df['W-1030102'] + df['W-1030103'] + df['W-1030104'] + df['W-1030105']
              df['W-1030201'] = df['S-121'] * df['QS-1112']
              df['W-1030202'] = df['S-122'] * df['QS-1112']
              df['W-1030203'] = df['W-102'] * df['S-123']
              df['W-10302'] = df['W-1030201'] + df['W-1030202'] + df['W-1030203']


              df['QS-123'] = df['W-102'] * df['S-123']
              df['SAO-10'] = (df['W-10302'] / df['W-101']).replace([np.inf, -np.inf, "", np.nan],0)
              df['SAH-1012'] = (df['W-10302'] / df['QS-1112']).replace([np.inf, -np.inf, "", np.nan],0)
              df['W-103'] = df['W-10301'] + df['W-10302']
              df['QS-10'] = df['W-102'] - df['W-103']
              df['SP-10'] = (df['QS-10'] / df['W-102']).replace([np.inf, -np.inf, "", np.nan],0)
              df['W-104'] = df['QS-10']
              df['W-105'] = df['SP-10']

              df['QS-118'] = df['QS-118'].apply(lambda x: np.ceil(x))
              result = df
        - stash_push_df: []
        - fetch_datasource:      # code匹配关联team，为后面计算team做准备
            datasource: qcode-biz-code-book
            dataset_cate: std
            columns: [code_id,team_id]
            empty_df_record:
              code_id: '-'
              team_id: '-'
        - stash_push_df: []
        - stash_join_df:
            on: code_id
            how: right
            drop_stash: true
        - push_dataset:     ## 所有code计算数据，关联对应 team——id 字段，备用
            key: waimai_bu_bu_code_team

        - use_df:       ## 计算每个场景，每个月code指标汇总
            key: waimai_bu_bu_code_team
            columns: [ source,book_month,S-101,S-102,S-103,S-104,S-105,S-106,S-107,S-108,S-109,S-110,S-111,S-112,S-113,S-114,S-115,S-116,S-117,S-118,S-119,S-120,S-121,S-122,S-123,QS-102,QS-1030,QS-103,QS-1046,QS-1078,QS-1090,QS-1112,QS-111,QS-112,QS-113,QS-114,QS-115,QS-116,QS-117,QS-118,QS-119,QS-120,SAO-10,SAH-1012,QS-123,QS-10,W-101,W-102,W-10201,W-10202,W-1020201,W-1020202,W-1020203,W-10203,W-1020301,W-1020302,W-10204,W-10205,W-10206,W-103,W-10301,W-1030101,W-1030102,W-1030103,W-1030104,W-1030105,W-10302,W-1030201,W-1030202,W-1030203,W-104 ]
        - df_groupby:
            by: [source,book_month]
        - df_sum:
            column: [S-101,S-102,S-103,S-104,S-105,S-106,S-107,S-108,S-109,S-110,S-111,S-112,S-113,S-114,S-115,S-116,S-117,S-118,S-119,S-120,S-121,S-122,S-123,QS-102,QS-1030,QS-103,QS-1046,QS-1078,QS-1090,QS-1112,QS-111,QS-112,QS-113,QS-114,QS-115,QS-116,QS-117,QS-118,QS-119,QS-120,SAO-10,SAH-1012,QS-123,QS-10,W-101,W-102,W-10201,W-10202,W-1020201,W-1020202,W-1020203,W-10203,W-1020301,W-1020302,W-10204,W-10205,W-10206,W-103,W-10301,W-1030101,W-1030102,W-1030103,W-1030104,W-1030105,W-10302,W-1030201,W-1030202,W-1030203,W-104]
        - df_reset_index: []
        - run_py:
            - |
              df['SP-10'] = (df['QS-10'] / df['W-102']).replace([np.inf, -np.inf, "", np.nan],0)
              df['W-105'] = df['SP-10']
              result = df
        - push_dataset:    ## 每个场景  每个月  code  指标汇总数据
            key: waimai_bu_bu_code_result


        - use_df:       ##  计算单个team输入参数
            key: waimai_bu_bu
        - run_py:
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="money",index=['source','team_id','book_month'],columns="ac_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - fetch_cols:
            columns: [source,team_id,book_month,S-201,S-202,S-203,S-204,S-205,S-206,S-207,S-208,S-209,S-210,S-211,S-212,S-213,S-214,S-215,S-216,S-217,S-218,S-219,S-220,S-221,S-222,S-223,S-301,S-302,S-303,S-304,S-305,S-306,S-307,S-308,S-309,S-310,S-311,S-312,S-313,S-314,S-315,Q-1103,Q-1105,Q-1104,Q-600,Q-405]
        - pad_cols:
            columns: [S-201,S-202,S-203,S-204,S-205,S-206,S-207,S-208,S-209,S-210,S-211,S-212,S-213,S-214,S-215,S-216,S-217,S-218,S-219,S-220,S-221,S-222,S-223,S-301,S-302,S-303,S-304,S-305,S-306,S-307,S-308,S-309,S-310,S-311,S-312,S-313,S-314,S-315,Q-1103,Q-1105,Q-1104,Q-600,Q-405]
            default_value: 0
        - stash_push_df: []
        - use_df:       ## 关联team所对应的code数据
            key: waimai_bu_bu_code_team
            columns: [ source,team_id,code_id,book_month,S-102,W-102,W-101,QS-111,W-104,W-103 ]
        - df_groupby:
            by: [source,team_id,book_month]
        - df_sum:
            column: [S-102,W-102,W-101,QS-111,W-104,W-103]
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [source,team_id,book_month]
            how: right
            drop_stash: true
        - df_fillna:
            value: 0.0
        - run_py:
            - |
              df['QS-1103'] = df['Q-1103']
              df['QS-1105'] = df['Q-1105']
              df['QS-1104'] = df['Q-1104']
              df['QS-600'] = df['Q-600']
              df['QS-405'] = df['Q-405']
              df['QS-201'] = (df['S-102'] / df['S-201']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-202'] = df['S-202']
              df['QS-204'] = df['S-204']
              df['QS-205'] = df['W-102'] * df['S-205']
              df['QS-206'] = (df['S-102'] / df['S-206']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-207'] = (df['QS-201'] / df['QS-206']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-208'] = (df['S-102'] / df['S-208']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-209'] = (df['QS-206'] / df['QS-208']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-210'] = df['W-101'] * df['S-210']
              df['QS-211'] = df['W-101'] * df['S-211']
              df['QS-212'] = df['W-101'] * df['S-212']
              df['QS-213'] = df['W-101'] * df['S-213']
              df['QS-218'] = df['S-218'] * df['S-219']
              df['QS-221'] = df['S-221'] * df['S-220']
              df['QS-222'] = df['QS-111'] * df['S-222']
              df['QS-223'] = df['QS-222'] * df['S-223']
              df['W-2010101'] = df['QS-201'] * df['S-202']
              df['W-2010102'] = df['QS-201'] * df['S-203'] * df['S-204']
              df['W-2010103'] = df['W-102'] * df['S-205']
              df['W-20101'] = df['W-2010101'] + df['W-2010102'] + df['W-2010103']

              df['W-2010201'] = df['QS-206'] * df['S-207']
              df['W-2010202'] = df['QS-208'] * df['S-209']
              df['W-2010203'] = df['W-101'] * df['S-210']
              df['W-20102'] = df['W-2010201'] + df['W-2010202'] + df['W-2010203']

              df['W-2010301'] = df['W-101'] * df['S-211']
              df['W-2010302'] = df['W-101'] * df['S-212']
              df['W-2010303'] = df['W-101'] * df['S-213']
              df['W-20103'] = df['W-2010301'] + df['W-2010302'] + df['W-2010303']

              df['W-2010401'] = df['QS-201'] * df['S-214'] + (df['QS-206'] + df['QS-208']) * df['S-215']
              df['W-2010402'] = df['QS-201'] * df['S-216']
              df['W-2010403'] = df['W-102'] * df['S-217']
              df['W-20104'] = df['W-2010401'] + df['W-2010402'] + df['W-2010403']

              df['W-2010501'] = df['S-218'] * df['S-219']
              df['W-2010502'] = df['S-220'] * df['S-221']
              df['W-20105'] = df['W-2010501'] + df['W-2010502']
              df['W-20106'] = df['QS-222'] * df['S-223']
              df['W-20107'] = df['Q-1103']
              df['W-20108'] = df['Q-1105']
              df['W-20109'] = df['Q-1104']
              df['W-201'] = df['W-20101'] + df['W-20102'] + df['W-20103'] + df['W-20104'] + df['W-20105'] + df['W-20106'] + df['W-20107'] + df['W-20108'] + df['W-20109']

              df['W-3010101'] = df['S-302'] * df['S-303']
              df['W-3010102'] = df['S-302'] * df['S-304']
              df['W-30101'] = df['W-3010101'] + df['W-3010102']

              df['W-3010201'] = df['S-305'] * df['S-306']
              df['W-3010202'] = df['S-305'] * df['S-307']
              df['W-30102'] = df['W-3010201'] + df['W-3010202']

              df['W-3010301'] = df['S-301'] * df['S-308']
              df['W-3010302'] = df['S-301'] * df['S-309']
              df['W-3010303'] = df['S-301'] * df['S-310']
              df['W-3010304'] = df['S-301'] * df['S-311']
              df['W-3010305'] = df['S-301'] * df['S-312']
              df['W-30103'] = df['W-3010301'] + df['W-3010302'] + df['W-3010303'] + df['W-3010304'] + df['W-3010305']

              df['W-3010401'] = df['S-302'] * df['S-313']
              df['W-3010402'] = df['S-302'] * df['S-314']
              df['W-30104'] = df['W-3010401'] + df['W-3010402']
              df['W-301'] = df['W-30101'] + df['W-30102'] + df['W-30103'] + df['W-30104']
              df['QS-214'] = df['W-2010401'] + df['W-2010402'] + df['W-2010403']
              df['QS-224'] = df['W-104'] - df['W-201']
              df['QS-225'] = (df['QS-224'] / df['W-102']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-1000'] = df['QS-224'] + df['QS-600'] - df['QS-405'] - df['W-301']
              df['CPQS-1000'] = (df['QS-1000'] / df['W-102']).replace([np.inf, -np.inf, "", np.nan],0)
              df['W-202'] = df['QS-224']
              df['W-203'] = df['QS-225']
              df['W-302'] = df['QS-1000']
              df['W-303'] = df['CPQS-1000']
              df['W-304'] = df['Q-600']
              df['W-305'] = df['Q-405']
              df['QS-201'] = df['QS-201'].apply(lambda x: np.ceil(x))
              result = df

        - df_groupby:    ## 计算每个场景，每个月team指标汇总
            by: [source,book_month]
        - df_sum:
            column: [S-201,S-202,S-203,S-204,S-205,S-206,S-207,S-208,S-209,S-210,S-211,S-212,S-213,S-214,S-215,S-216,S-217,S-218,S-219,S-220,S-221,S-222,S-223,S-301,S-302,S-303,S-304,S-305,S-306,S-307,S-308,S-309,S-310,S-311,S-312,S-313,S-314,S-315,Q-1103,Q-1105,Q-1104,Q-600,Q-405,QS-201,QS-202,QS-204,QS-205,QS-206,QS-207,QS-208,QS-210,QS-211,QS-212,QS-213,QS-214,QS-218,QS-221,QS-222,QS-223,QS-1103,QS-1105,QS-1104,QS-224,QS-600,QS-405,QS-1000,W-201,W-20101,W-2010101,W-2010102,W-2010103,W-20102,W-2010201,W-2010202,W-2010203,W-20103,W-2010301,W-2010302,W-2010303,W-20104,W-2010401,W-2010402,W-2010403,W-20105,W-2010501,W-2010502,W-20106,W-20107,W-20108,W-20109,W-202,W-301,W-30101,W-3010101,W-3010102,W-30102,W-3010201,W-3010202,W-30103,W-3010301,W-3010302,W-3010303,W-3010304,W-3010305,W-30104,W-3010401,W-3010402,W-304,W-305,W-302,S-102,W-102,W-101,QS-111,W-104,W-103]
        - df_reset_index: []
        - run_py:
            - |
              df['QS-209'] = (df['QS-206'] / df['QS-208']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-225'] = (df['QS-224'] / df['W-102']).replace([np.inf, -np.inf, "", np.nan],0)
              df['W-203'] = df['QS-225']
              df['CPQS-1000'] = (df['QS-1000'] / df['W-102']).replace([np.inf, -np.inf, "", np.nan],0)
              df['W-303'] = df['CPQS-1000']
              result = df
        - fetch_cols:
            columns: [source,book_month,S-201,S-202,S-203,S-204,S-205,S-206,S-207,S-208,S-209,S-210,S-211,S-212,S-213,S-214,S-215,S-216,S-217,S-218,S-219,S-220,S-221,S-222,S-223,S-301,S-302,S-303,S-304,S-305,S-306,S-307,S-308,S-309,S-310,S-311,S-312,S-313,S-314,S-315,Q-1103,Q-1105,Q-1104,Q-600,Q-405,QS-201,QS-202,QS-204,QS-205,QS-206,QS-207,QS-208,QS-210,QS-211,QS-212,QS-213,QS-214,QS-218,QS-221,QS-222,QS-223,QS-1103,QS-1105,QS-1104,QS-224,QS-600,QS-405,QS-1000,W-201,W-20101,W-2010101,W-2010102,W-2010103,W-20102,W-2010201,W-2010202,W-2010203,W-20103,W-2010301,W-2010302,W-2010303,W-20104,W-2010401,W-2010402,W-2010403,W-20105,W-2010501,W-2010502,W-20106,W-20107,W-20108,W-20109,W-202,W-301,W-30101,W-3010101,W-3010102,W-30102,W-3010201,W-3010202,W-30103,W-3010301,W-3010302,W-3010303,W-3010304,W-3010305,W-30104,W-3010401,W-3010402,W-304,W-305,W-302,QS-209,QS-225,W-203,CPQS-1000,W-303]
        - stash_push_df: []
        - use_df:     ## 拼接每个场景，每个月code指标汇总数据
            key: waimai_bu_bu_code_result
        - stash_push_df: []
        - stash_join_df:
            on: [source,book_month]
            how: inner
            drop_stash: true
        - push_dataset:
            key: waimai_bu_bu_code_team_result

        - use_df:     ## 计算合计数据
            key: waimai_bu_bu_code_team_result
            columns: [source,book_month,S-101,S-102,S-103,S-104,S-105,S-106,S-107,S-108,S-109,S-110,S-111,S-112,S-113,S-114,S-115,S-116,S-117,S-118,S-119,S-120,S-121,S-122,S-123,S-201,S-202,S-203,S-204,S-205,S-206,S-207,S-208,S-209,S-210,S-211,S-212,S-213,S-214,S-215,S-216,S-217,S-218,S-219,S-220,S-221,S-222,S-223,S-301,S-302,S-303,S-304,S-305,S-306,S-307,S-308,S-309,S-310,S-311,S-312,S-313,S-314,S-315,QS-102,QS-1030,QS-103,QS-1046,QS-1078,QS-1090,QS-1112,QS-111,QS-112,QS-113,QS-114,QS-115,QS-116,QS-117,QS-118,QS-119,QS-120,SAO-10,SAH-1012,QS-123,QS-10,W-101,W-102,W-10201,W-10202,W-1020201,W-1020202,W-1020203,W-10203,W-1020301,W-1020302,W-10204,W-10205,W-10206,W-103,W-10301,W-1030101,W-1030102,W-1030103,W-1030104,W-1030105,W-10302,W-1030201,W-1030202,W-1030203,W-104,QS-201,QS-202,QS-204,QS-205,QS-206,QS-207,QS-208,QS-210,QS-211,QS-212,QS-213,QS-214,QS-218,QS-221,QS-222,QS-223,QS-224,QS-1000,W-201,W-20101,W-2010101,W-2010102,W-2010103,W-20102,W-2010201,W-2010202,W-2010203,W-20103,W-2010301,W-2010302,W-2010303,W-20104,W-2010401,W-2010402,W-2010403,W-20105,W-2010501,W-2010502,W-20106,W-202,W-301,W-30101,W-3010101,W-3010102,W-30102,W-3010201,W-3010202,W-30103,W-3010301,W-3010302,W-3010303,W-3010304,W-3010305,W-30104,W-3010401,W-3010402,W-302,Q-1103,Q-1105,Q-1104,Q-600,Q-405,QS-1103,QS-1104,QS-1105,QS-600,QS-405,W-20107,W-20108,W-20109,W-304,W-305]
        - df_groupby:
            by: [source]
        - df_sum:
            column: [S-101,S-102,S-103,S-104,S-105,S-106,S-107,S-108,S-109,S-110,S-111,S-112,S-113,S-114,S-115,S-116,S-117,S-118,S-119,S-120,S-121,S-122,S-123,S-201,S-202,S-203,S-204,S-205,S-206,S-207,S-208,S-209,S-210,S-211,S-212,S-213,S-214,S-215,S-216,S-217,S-218,S-219,S-220,S-221,S-222,S-223,S-301,S-302,S-303,S-304,S-305,S-306,S-307,S-308,S-309,S-310,S-311,S-312,S-313,S-314,S-315,QS-102,QS-1030,QS-103,QS-1046,QS-1078,QS-1090,QS-1112,QS-111,QS-112,QS-113,QS-114,QS-115,QS-116,QS-117,QS-118,QS-119,QS-120,SAO-10,SAH-1012,QS-123,QS-10,W-101,W-102,W-10201,W-10202,W-1020201,W-1020202,W-1020203,W-10203,W-1020301,W-1020302,W-10204,W-10205,W-10206,W-103,W-10301,W-1030101,W-1030102,W-1030103,W-1030104,W-1030105,W-10302,W-1030201,W-1030202,W-1030203,W-104,QS-201,QS-202,QS-204,QS-205,QS-206,QS-207,QS-208,QS-210,QS-211,QS-212,QS-213,QS-214,QS-218,QS-221,QS-222,QS-223,QS-224,QS-1000,W-201,W-20101,W-2010101,W-2010102,W-2010103,W-20102,W-2010201,W-2010202,W-2010203,W-20103,W-2010301,W-2010302,W-2010303,W-20104,W-2010401,W-2010402,W-2010403,W-20105,W-2010501,W-2010502,W-20106,W-202,W-301,W-30101,W-3010101,W-3010102,W-30102,W-3010201,W-3010202,W-30103,W-3010301,W-3010302,W-3010303,W-3010304,W-3010305,W-30104,W-3010401,W-3010402,W-302,Q-1103,Q-1105,Q-1104,Q-600,Q-405,QS-1103,QS-1104,QS-1105,QS-600,QS-405,W-20107,W-20108,W-20109,W-304,W-305]
        - df_reset_index: []
        - add_cols:
            - book_month: 合计
        - run_py:
            - |
              df['SP-10'] = (df['QS-10'] / df['W-102']).replace([np.inf, -np.inf, "", np.nan],0)
              df['W-105'] = df['SP-10']
              df['QS-209'] = (df['QS-206'] / df['QS-208']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-225'] = (df['QS-224'] / df['W-102']).replace([np.inf, -np.inf, "", np.nan],0)
              df['W-203'] = df['QS-225']
              df['CPQS-1000'] = (df['QS-1000'] / df['W-102']).replace([np.inf, -np.inf, "", np.nan],0)
              df['W-303'] = df['CPQS-1000']
              result = df

        - stash_push_df: []
        - use_df:
            key: waimai_bu_bu_code_team_result
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - fetch_cols:
            columns: [source,book_month,W-101,W-102,W-10201,W-10202,W-1020201,W-1020202,W-1020203,W-10203,W-1020301,W-1020302,W-10204,W-10205,W-10206,W-103,W-10301,W-1030101,W-1030102,W-1030103,W-1030104,W-1030105,W-10302,W-1030201,W-1030202,W-1030203,W-104,W-105,W-201,W-20101,W-2010101,W-2010102,W-2010103,W-20102,W-2010201,W-2010202,W-2010203,W-20103,W-2010301,W-2010302,W-2010303,W-20104,W-2010401,W-2010402,W-2010403,W-20105,W-2010501,W-2010502,W-20106,W-20107,W-20108,W-20109,W-202,W-203,W-301,W-30101,W-3010101,W-3010102,W-30102,W-3010201,W-3010202,W-30103,W-3010301,W-3010302,W-3010303,W-3010304,W-3010305,W-30104,W-3010401,W-3010402,W-304,W-305,W-302,W-303]



    - name: org_mt_parameter_details
      sync_result: true
      cooks:
        - use_df:
            key: org_bu_parameter_details
        - df_select:
            - '[source] == @p1'
            - p1: 'budget_waimai_bu1'
        - fetch_cols:
            columns: [book_month,W-101,W-102,W-10201,W-10202,W-1020201,W-1020202,W-1020203,W-10203,W-1020301,W-1020302,W-10204,W-10205,W-10206,W-103,W-10301,W-1030101,W-1030102,W-1030103,W-1030104,W-1030105,W-10302,W-1030201,W-1030202,W-1030203,W-104,W-105,W-201,W-20101,W-2010101,W-2010102,W-2010103,W-20102,W-2010201,W-2010202,W-2010203,W-20103,W-2010301,W-2010302,W-2010303,W-20104,W-2010401,W-2010402,W-2010403,W-20105,W-2010501,W-2010502,W-20106,W-20107,W-20108,W-20109,W-202,W-203,W-301,W-30101,W-3010101,W-3010102,W-30102,W-3010201,W-3010202,W-30103,W-3010301,W-3010302,W-3010303,W-3010304,W-3010305,W-30104,W-3010401,W-3010402,W-304,W-305,W-302,W-303]
        - run_py:
            - |
              df = to_df(df).copy()
              df = df.set_index(['book_month'])
              df = df.transpose().reset_index(drop=False)
              result = to_dd(df)
        - df_rename_columns:
            - index: ac_code
        - sort_by_index:
            sort_list: [ W-101,W-102,W-10201,W-10202,W-1020201,W-1020202,W-1020203,W-10203,W-1020301,W-1020302,W-10204,W-10205,W-10206,W-103,W-10301,W-1030101,W-1030102,W-1030103,W-1030104,W-1030105,W-10302,W-1030201,W-1030202,W-1030203,W-104,W-105,W-201,W-20101,W-2010101,W-2010102,W-2010103,W-20102,W-2010201,W-2010202,W-2010203,W-20103,W-2010301,W-2010302,W-2010303,W-20104,W-2010401,W-2010402,W-2010403,W-20105,W-2010501,W-2010502,W-20106,W-20107,W-20108,W-20109,W-202,W-203,W-301,W-30101,W-3010101,W-3010102,W-30102,W-3010201,W-3010202,W-30103,W-3010301,W-3010302,W-3010303,W-3010304,W-3010305,W-30104,W-3010401,W-3010402,W-304,W-305,W-302,W-303 ]
        - df_rename_columns:
            - ac_code: 指标编码
        - run_py:
            - |
              df = to_df(df).copy()
              df['指标名称'] = ['月单量','主营业务收入','基础收入','KPI收入','月度KPI收入','周期KPI收入','非主营奖励收入','政策收入','短线政策收入','长线政策收入','运营扣罚','骑士活动扣款','运营罚款','一线骑士成本','用人成本','全职骑士工资','兼职骑士工资','政策骑士工资','社保公积','骑士福利','保险成本（一线）','平台险（一线）','线下险（一线）','保险非赔溢出金额','一线利润','一线利润率','二线站点成本','站点用人成本','站点人员工资','站点人员社保公积','站点团建等','站点房屋成本','办公站点房租','住宿站点费用','所有站点其它费用','办公成本','站点资产采购','站点办公水电消耗小额等','站点招待差旅等','保险成本（二线）','平台险（二线）','线下险（二线）','保险非赔溢出（二线）','装备成本','电动车及电池','其它骑士类装备','招聘成本','返税','三方服务费','税金及附加','站点利润','站点利润率','三线城市费用','城市用人费用','城市人员工资','城市人员社保公积','城市房屋费用','城市办公室房租','办公室非租金费用','办公费用','城市资产采购','城市办公水电消耗小额等','城市差旅费','城市团建福利','城市对客户招待公关等','保险费用','平台险（三线）','线下险（三线）','投资收益','资金使用费用','城市利润','城市利润率']
              result = to_dd(df)
        - sort_by_columns:
            sort_list: [ 指标名称,指标编码,合计,1月,2月,3月,4月,5月,6月,7月,8月,9月,10月,11月,12月 ]


    - name: org_ele_parameter_details
      sync_result: true
      cooks:
        - use_df:
            key: org_bu_parameter_details
        - df_select:
            - '[source] == @p1'
            - p1: 'budget_waimai_bu2'
        - fetch_cols:
            columns: [book_month,W-101,W-102,W-10201,W-10202,W-1020201,W-1020202,W-1020203,W-10203,W-1020301,W-1020302,W-10204,W-10205,W-10206,W-103,W-10301,W-1030101,W-1030102,W-1030103,W-1030104,W-1030105,W-10302,W-1030201,W-1030202,W-1030203,W-104,W-105,W-201,W-20101,W-2010101,W-2010102,W-2010103,W-20102,W-2010201,W-2010202,W-2010203,W-20103,W-2010301,W-2010302,W-2010303,W-20104,W-2010401,W-2010402,W-2010403,W-20105,W-2010501,W-2010502,W-20106,W-20107,W-20108,W-20109,W-202,W-203,W-301,W-30101,W-3010101,W-3010102,W-30102,W-3010201,W-3010202,W-30103,W-3010301,W-3010302,W-3010303,W-3010304,W-3010305,W-30104,W-3010401,W-3010402,W-304,W-305,W-302,W-303]
        - run_py:
            - |
              df = to_df(df).copy()
              df = df.set_index(['book_month'])
              df = df.transpose().reset_index(drop=False)
              result = to_dd(df)
        - df_rename_columns:
            - index: ac_code
        - sort_by_index:
            sort_list: [ W-101,W-102,W-10201,W-10202,W-1020201,W-1020202,W-1020203,W-10203,W-1020301,W-1020302,W-10204,W-10205,W-10206,W-103,W-10301,W-1030101,W-1030102,W-1030103,W-1030104,W-1030105,W-10302,W-1030201,W-1030202,W-1030203,W-104,W-105,W-201,W-20101,W-2010101,W-2010102,W-2010103,W-20102,W-2010201,W-2010202,W-2010203,W-20103,W-2010301,W-2010302,W-2010303,W-20104,W-2010401,W-2010402,W-2010403,W-20105,W-2010501,W-2010502,W-20106,W-20107,W-20108,W-20109,W-202,W-203,W-301,W-30101,W-3010101,W-3010102,W-30102,W-3010201,W-3010202,W-30103,W-3010301,W-3010302,W-3010303,W-3010304,W-3010305,W-30104,W-3010401,W-3010402,W-304,W-305,W-302,W-303 ]
        - df_rename_columns:
            - ac_code: 指标编码
        - run_py:
            - |
              df = to_df(df).copy()
              df['指标名称'] = ['月单量','主营业务收入','基础收入','KPI收入','月度KPI收入','周期KPI收入','非主营奖励收入','政策收入','短线政策收入','长线政策收入','运营扣罚','骑士活动扣款','运营罚款','一线骑士成本','用人成本','全职骑士工资','兼职骑士工资','政策骑士工资','社保公积','骑士福利','保险成本（一线）','平台险（一线）','线下险（一线）','保险非赔溢出金额','一线利润','一线利润率','二线站点成本','站点用人成本','站点人员工资','站点人员社保公积','站点团建等','站点房屋成本','办公站点房租','住宿站点费用','所有站点其它费用','办公成本','站点资产采购','站点办公水电消耗小额等','站点招待差旅等','保险成本（二线）','平台险（二线）','线下险（二线）','保险非赔溢出（二线）','装备成本','电动车及电池','其它骑士类装备','招聘成本','返税','三方服务费','税金及附加','站点利润','站点利润率','三线城市费用','城市用人费用','城市人员工资','城市人员社保公积','城市房屋费用','城市办公室房租','办公室非租金费用','办公费用','城市资产采购','城市办公水电消耗小额等','城市差旅费','城市团建福利','城市对客户招待公关等','保险费用','平台险（三线）','线下险（三线）','投资收益','资金使用费用','城市利润','城市利润率']
              result = to_dd(df)
        - sort_by_columns:
            sort_list: [ 指标名称,指标编码,合计,1月,2月,3月,4月,5月,6月,7月,8月,9月,10月,11月,12月 ]



    - name: org_rl_parameter_details
      sync_result: true
      cooks:
        - use_df:
            key: org_bu_parameter_details
        - df_select:
            - '[source] == @p1'
            - p1: 'budget_waimai_bu3'
        - fetch_cols:
            columns: [book_month,W-101,W-102,W-10201,W-10202,W-1020201,W-1020202,W-1020203,W-10203,W-1020301,W-1020302,W-10204,W-10205,W-10206,W-103,W-10301,W-1030101,W-1030102,W-1030103,W-1030104,W-1030105,W-10302,W-1030201,W-1030202,W-1030203,W-104,W-105,W-201,W-20101,W-2010101,W-2010102,W-2010103,W-20102,W-2010201,W-2010202,W-2010203,W-20103,W-2010301,W-2010302,W-2010303,W-20104,W-2010401,W-2010402,W-2010403,W-20105,W-2010501,W-2010502,W-20106,W-20107,W-20108,W-20109,W-202,W-203,W-301,W-30101,W-3010101,W-3010102,W-30102,W-3010201,W-3010202,W-30103,W-3010301,W-3010302,W-3010303,W-3010304,W-3010305,W-30104,W-3010401,W-3010402,W-304,W-305,W-302,W-303]
        - run_py:
            - |
              df = to_df(df).copy()
              df = df.set_index(['book_month'])
              df = df.transpose().reset_index(drop=False)
              result = to_dd(df)
        - df_rename_columns:
            - index: ac_code
        - sort_by_index:
            sort_list: [ W-101,W-102,W-10201,W-10202,W-1020201,W-1020202,W-1020203,W-10203,W-1020301,W-1020302,W-10204,W-10205,W-10206,W-103,W-10301,W-1030101,W-1030102,W-1030103,W-1030104,W-1030105,W-10302,W-1030201,W-1030202,W-1030203,W-104,W-105,W-201,W-20101,W-2010101,W-2010102,W-2010103,W-20102,W-2010201,W-2010202,W-2010203,W-20103,W-2010301,W-2010302,W-2010303,W-20104,W-2010401,W-2010402,W-2010403,W-20105,W-2010501,W-2010502,W-20106,W-20107,W-20108,W-20109,W-202,W-203,W-301,W-30101,W-3010101,W-3010102,W-30102,W-3010201,W-3010202,W-30103,W-3010301,W-3010302,W-3010303,W-3010304,W-3010305,W-30104,W-3010401,W-3010402,W-304,W-305,W-302,W-303 ]
        - df_rename_columns:
            - ac_code: 指标编码
        - run_py:
            - |
              df = to_df(df).copy()
              df['指标名称'] = ['月单量','主营业务收入','基础收入','KPI收入','月度KPI收入','周期KPI收入','非主营奖励收入','政策收入','短线政策收入','长线政策收入','运营扣罚','骑士活动扣款','运营罚款','一线骑士成本','用人成本','全职骑士工资','兼职骑士工资','政策骑士工资','社保公积','骑士福利','保险成本（一线）','平台险（一线）','线下险（一线）','保险非赔溢出金额','一线利润','一线利润率','二线站点成本','站点用人成本','站点人员工资','站点人员社保公积','站点团建等','站点房屋成本','办公站点房租','住宿站点费用','所有站点其它费用','办公成本','站点资产采购','站点办公水电消耗小额等','站点招待差旅等','保险成本（二线）','平台险（二线）','线下险（二线）','保险非赔溢出（二线）','装备成本','电动车及电池','其它骑士类装备','招聘成本','返税','三方服务费','税金及附加','站点利润','站点利润率','三线城市费用','城市用人费用','城市人员工资','城市人员社保公积','城市房屋费用','城市办公室房租','办公室非租金费用','办公费用','城市资产采购','城市办公水电消耗小额等','城市差旅费','城市团建福利','城市对客户招待公关等','保险费用','平台险（三线）','线下险（三线）','投资收益','资金使用费用','城市利润','城市利润率']
              result = to_dd(df)
        - sort_by_columns:
            sort_list: [ 指标名称,指标编码,合计,1月,2月,3月,4月,5月,6月,7月,8月,9月,10月,11月,12月 ]


    - name: waimai_parameter_details
      sync_result: true
      cooks:
        - use_df:
            key: 22_budget_summary
        - df_select:
            - '[source] in @p1'
            - p1: [budget_waimai_bu3,budget_waimai_bu2,budget_waimai_bu1]
        - add_cols:
            - 汇总: 汇总
        - push_dataset:     ## 外卖所有数据，包含所有场景
            key: waimai_code_team
        - use_df:
            key: waimai_code_team
        - run_py: ## 透视表     code维度
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="money",index=['汇总','code_id','book_month'],columns="ac_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - fetch_cols:
            columns: [汇总,code_id,book_month,S-101,S-102,S-103,S-104,S-105,S-106,S-107,S-108,S-109,S-110,S-111,S-112,S-113,S-114,S-115,S-116,S-117,S-118,S-119,S-120,S-121,S-122,S-123]
        - pad_cols:
            columns: [ S-101,S-102,S-103,S-104,S-105,S-106,S-107,S-108,S-109,S-110,S-111,S-112,S-113,S-114,S-115,S-116,S-117,S-118,S-119,S-120,S-121,S-122,S-123]
            default_value: 0
        - df_fillna:
            columns: [ S-101,S-102,S-103,S-104,S-105,S-106,S-107,S-108,S-109,S-110,S-111,S-112,S-113,S-114,S-115,S-116,S-117,S-118,S-119,S-120,S-121,S-122,S-123]
            value: 0.0
        - run_py:
            - |
              df['QS-102'] = df['S-102']
              df['QS-1030'] = df['S-103'] + df['S-104'] + df['S-105'] + df['S-106'] + df['S-107'] + df['S-108'] + df['S-109'] + df['S-110']
              df['QS-103'] = df['S-103']
              df['QS-1046'] = df['S-104'] + df['S-105'] + df['S-106']
              df['QS-1078'] = df['S-107'] + df['S-108']
              df['QS-1090'] = df['S-109'] + df['S-110']
              df['QS-111'] = (df['S-102'] * df['S-113'] / df['S-111']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-112'] = (df['S-102'] * (1 - df['S-113']) / df['S-112']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-1112'] = df['QS-111'] + df['QS-112']
              df['QS-113'] = (df['S-102'] * df['S-101'] * df['S-113'] * df['S-114'] / (df['S-102'] * df['S-113'] / df['S-111'])).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-114'] = (df['S-102'] * df['S-101'] * (1 - df['S-113']) * df['S-115'] / (df['S-102'] * (1 - df['S-113']) / df['S-112'])).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-115'] = df['S-116'] + df['S-108'] * df['S-117']
              df['QS-116'] = df['S-116']
              df['QS-117'] = df['S-108'] * df['S-117']
              df['QS-118'] = df['QS-111'] * df['S-118']
              df['QS-119'] = df['S-119'] * df['S-118']
              df['QS-120'] = df['S-120'] * df['QS-111']

              df['W-101'] = df['S-102'] * df['S-101']
              df['W-10201'] =  df['W-101'] * df['S-103']
              df['W-1020201'] = df['W-101'] * df['S-104']
              df['W-1020202'] = df['W-101'] * df['S-105']
              df['W-1020203'] = df['W-101'] * df['S-106']
              df['W-10202'] = df['W-1020201'] + df['W-1020202'] + df['W-1020203']
              df['W-1020301'] = df['W-101'] * df['S-107']
              df['W-1020302'] = df['W-101'] * df['S-108']
              df['W-10203'] = df['W-1020301'] + df['W-1020302']
              df['W-10204'] = df['W-101'] * (df['S-109'] + df['S-110'])
              df['W-10205'] = df['W-101'] * df['S-109']
              df['W-10206'] = df['W-101'] * df['S-110']
              df['W-102'] = df['W-10201'] + df['W-10202'] + df['W-10203'] + df['W-10204']
              df['W-1030101'] = df['W-101'] * df['S-113'] * df['S-114']
              df['W-1030102'] = df['W-101'] * (1 - df['S-113']) * df['S-115']
              df['W-1030103'] = df['W-101'] * df['S-116'] + df['W-1020302'] * df['S-117']
              df['W-1030104'] = df['QS-118'] * df['S-119']
              df['W-1030105'] = df['QS-111'] * df['S-120']
              df['W-10301'] = df['W-1030101'] + df['W-1030102'] + df['W-1030103'] + df['W-1030104'] + df['W-1030105']
              df['W-1030201'] = df['S-121'] * df['QS-1112']
              df['W-1030202'] = df['S-122'] * df['QS-1112']
              df['W-1030203'] = df['W-102'] * df['S-123']
              df['W-10302'] = df['W-1030201'] + df['W-1030202'] + df['W-1030203']


              df['QS-123'] = df['W-102'] * df['S-123']
              df['SAO-10'] = (df['W-10302'] / df['W-101']).replace([np.inf, -np.inf, "", np.nan],0)
              df['SAH-1012'] = (df['W-10302'] / df['QS-1112']).replace([np.inf, -np.inf, "", np.nan],0)
              df['W-103'] = df['W-10301'] + df['W-10302']
              df['QS-10'] = df['W-102'] - df['W-103']
              df['SP-10'] = (df['QS-10'] / df['W-102']).replace([np.inf, -np.inf, "", np.nan],0)
              df['W-104'] = df['QS-10']
              df['W-105'] = df['SP-10']

              df['QS-118'] = df['QS-118'].apply(lambda x: np.ceil(x))
              result = df
        - stash_push_df: []
        - fetch_datasource:      # code匹配关联team，为后面计算team做准备
            datasource: qcode-biz-code-book
            dataset_cate: std
            columns: [code_id,team_id]
            empty_df_record:
              code_id: '-'
              team_id: '-'
        - stash_push_df: []
        - stash_join_df:
            on: code_id
            how: right
            drop_stash: true
        - push_dataset:     ## 所有code计算数据，关联对应 team——id 字段，备用
            key: waimai_code_team_sum

        - use_df:       ## 计算每个场景，每个月code指标汇总
            key: waimai_code_team_sum
            columns: [ 汇总,book_month,S-101,S-102,S-103,S-104,S-105,S-106,S-107,S-108,S-109,S-110,S-111,S-112,S-113,S-114,S-115,S-116,S-117,S-118,S-119,S-120,S-121,S-122,S-123,QS-102,QS-1030,QS-103,QS-1046,QS-1078,QS-1090,QS-1112,QS-111,QS-112,QS-113,QS-114,QS-115,QS-116,QS-117,QS-118,QS-119,QS-120,SAO-10,SAH-1012,QS-123,QS-10,W-101,W-102,W-10201,W-10202,W-1020201,W-1020202,W-1020203,W-10203,W-1020301,W-1020302,W-10204,W-10205,W-10206,W-103,W-10301,W-1030101,W-1030102,W-1030103,W-1030104,W-1030105,W-10302,W-1030201,W-1030202,W-1030203,W-104 ]
        - df_groupby:
            by: [汇总,book_month]
        - df_sum:
            column: [S-101,S-102,S-103,S-104,S-105,S-106,S-107,S-108,S-109,S-110,S-111,S-112,S-113,S-114,S-115,S-116,S-117,S-118,S-119,S-120,S-121,S-122,S-123,QS-102,QS-1030,QS-103,QS-1046,QS-1078,QS-1090,QS-1112,QS-111,QS-112,QS-113,QS-114,QS-115,QS-116,QS-117,QS-118,QS-119,QS-120,SAO-10,SAH-1012,QS-123,QS-10,W-101,W-102,W-10201,W-10202,W-1020201,W-1020202,W-1020203,W-10203,W-1020301,W-1020302,W-10204,W-10205,W-10206,W-103,W-10301,W-1030101,W-1030102,W-1030103,W-1030104,W-1030105,W-10302,W-1030201,W-1030202,W-1030203,W-104]
        - df_reset_index: []
        - run_py:
            - |
              df['SP-10'] = (df['QS-10'] / df['W-102']).replace([np.inf, -np.inf, "", np.nan],0)
              df['W-105'] = df['SP-10']
              result = df
        - push_dataset:    ## 每个场景  每个月  code  指标汇总数据
            key: waimai_code_team_sum_result


        - use_df:       ##  计算单个team输入参数
            key: waimai_code_team
        - run_py:
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="money",index=['汇总','team_id','book_month'],columns="ac_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - fetch_cols:
            columns: [汇总,team_id,book_month,S-201,S-202,S-203,S-204,S-205,S-206,S-207,S-208,S-209,S-210,S-211,S-212,S-213,S-214,S-215,S-216,S-217,S-218,S-219,S-220,S-221,S-222,S-223,S-301,S-302,S-303,S-304,S-305,S-306,S-307,S-308,S-309,S-310,S-311,S-312,S-313,S-314,S-315,Q-1103,Q-1105,Q-1104,Q-600,Q-405]
        - pad_cols:
            columns: [S-201,S-202,S-203,S-204,S-205,S-206,S-207,S-208,S-209,S-210,S-211,S-212,S-213,S-214,S-215,S-216,S-217,S-218,S-219,S-220,S-221,S-222,S-223,S-301,S-302,S-303,S-304,S-305,S-306,S-307,S-308,S-309,S-310,S-311,S-312,S-313,S-314,S-315,Q-1103,Q-1105,Q-1104,Q-600,Q-405]
            default_value: 0
        - stash_push_df: []
        - use_df:       ## 关联team所对应的code数据
            key: waimai_code_team_sum
            columns: [ 汇总,team_id,code_id,book_month,S-102,W-102,W-101,QS-111,W-104,W-103 ]
        - df_groupby:
            by: [汇总,team_id,book_month]
        - df_sum:
            column: [S-102,W-102,W-101,QS-111,W-104,W-103]
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [汇总,team_id,book_month]
            how: right
            drop_stash: true
        - df_fillna:
            value: 0.0
        - run_py:
            - |
              df['QS-1103'] = df['Q-1103']
              df['QS-1105'] = df['Q-1105']
              df['QS-1104'] = df['Q-1104']
              df['QS-600'] = df['Q-600']
              df['QS-405'] = df['Q-405']
              df['QS-201'] = (df['S-102'] / df['S-201']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-202'] = df['S-202']
              df['QS-204'] = df['S-204']
              df['QS-205'] = df['W-102'] * df['S-205']
              df['QS-206'] = (df['S-102'] / df['S-206']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-207'] = (df['QS-201'] / df['QS-206']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-208'] = (df['S-102'] / df['S-208']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-209'] = (df['QS-206'] / df['QS-208']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-210'] = df['W-101'] * df['S-210']
              df['QS-211'] = df['W-101'] * df['S-211']
              df['QS-212'] = df['W-101'] * df['S-212']
              df['QS-213'] = df['W-101'] * df['S-213']
              df['QS-218'] = df['S-218'] * df['S-219']
              df['QS-221'] = df['S-221'] * df['S-220']
              df['QS-222'] = df['QS-111'] * df['S-222']
              df['QS-223'] = df['QS-222'] * df['S-223']
              df['W-2010101'] = df['QS-201'] * df['S-202']
              df['W-2010102'] = df['QS-201'] * df['S-203'] * df['S-204']
              df['W-2010103'] = df['W-102'] * df['S-205']
              df['W-20101'] = df['W-2010101'] + df['W-2010102'] + df['W-2010103']

              df['W-2010201'] = df['QS-206'] * df['S-207']
              df['W-2010202'] = df['QS-208'] * df['S-209']
              df['W-2010203'] = df['W-101'] * df['S-210']
              df['W-20102'] = df['W-2010201'] + df['W-2010202'] + df['W-2010203']

              df['W-2010301'] = df['W-101'] * df['S-211']
              df['W-2010302'] = df['W-101'] * df['S-212']
              df['W-2010303'] = df['W-101'] * df['S-213']
              df['W-20103'] = df['W-2010301'] + df['W-2010302'] + df['W-2010303']

              df['W-2010401'] = df['QS-201'] * df['S-214'] + (df['QS-206'] + df['QS-208']) * df['S-215']
              df['W-2010402'] = df['QS-201'] * df['S-216']
              df['W-2010403'] = df['W-102'] * df['S-217']
              df['W-20104'] = df['W-2010401'] + df['W-2010402'] + df['W-2010403']

              df['W-2010501'] = df['S-218'] * df['S-219']
              df['W-2010502'] = df['S-220'] * df['S-221']
              df['W-20105'] = df['W-2010501'] + df['W-2010502']
              df['W-20106'] = df['QS-222'] * df['S-223']
              df['W-20107'] = df['Q-1103']
              df['W-20108'] = df['Q-1105']
              df['W-20109'] = df['Q-1104']
              df['W-201'] = df['W-20101'] + df['W-20102'] + df['W-20103'] + df['W-20104'] + df['W-20105'] + df['W-20106'] + df['W-20107'] + df['W-20108'] + df['W-20109']

              df['W-3010101'] = df['S-302'] * df['S-303']
              df['W-3010102'] = df['S-302'] * df['S-304']
              df['W-30101'] = df['W-3010101'] + df['W-3010102']

              df['W-3010201'] = df['S-305'] * df['S-306']
              df['W-3010202'] = df['S-305'] * df['S-307']
              df['W-30102'] = df['W-3010201'] + df['W-3010202']

              df['W-3010301'] = df['S-301'] * df['S-308']
              df['W-3010302'] = df['S-301'] * df['S-309']
              df['W-3010303'] = df['S-301'] * df['S-310']
              df['W-3010304'] = df['S-301'] * df['S-311']
              df['W-3010305'] = df['S-301'] * df['S-312']
              df['W-30103'] = df['W-3010301'] + df['W-3010302'] + df['W-3010303'] + df['W-3010304'] + df['W-3010305']

              df['W-3010401'] = df['S-302'] * df['S-313']
              df['W-3010402'] = df['S-302'] * df['S-314']
              df['W-30104'] = df['W-3010401'] + df['W-3010402']
              df['W-301'] = df['W-30101'] + df['W-30102'] + df['W-30103'] + df['W-30104']
              df['QS-214'] = df['W-2010401'] + df['W-2010402'] + df['W-2010403']
              df['QS-224'] = df['W-104'] - df['W-201']
              df['QS-225'] = (df['QS-224'] / df['W-102']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-1000'] = df['QS-224'] + df['QS-600'] - df['QS-405'] - df['W-301']
              df['CPQS-1000'] = (df['QS-1000'] / df['W-102']).replace([np.inf, -np.inf, "", np.nan],0)
              df['W-202'] = df['QS-224']
              df['W-203'] = df['QS-225']
              df['W-302'] = df['QS-1000']
              df['W-303'] = df['CPQS-1000']
              df['W-304'] = df['Q-600']
              df['W-305'] = df['Q-405']
              df['QS-201'] = df['QS-201'].apply(lambda x: np.ceil(x))
              result = df

        - df_groupby:    ## 计算每个场景，每个月team指标汇总
            by: [汇总,book_month]
        - df_sum:
            column: [S-201,S-202,S-203,S-204,S-205,S-206,S-207,S-208,S-209,S-210,S-211,S-212,S-213,S-214,S-215,S-216,S-217,S-218,S-219,S-220,S-221,S-222,S-223,S-301,S-302,S-303,S-304,S-305,S-306,S-307,S-308,S-309,S-310,S-311,S-312,S-313,S-314,S-315,Q-1103,Q-1105,Q-1104,Q-600,Q-405,QS-201,QS-202,QS-204,QS-205,QS-206,QS-207,QS-208,QS-210,QS-211,QS-212,QS-213,QS-214,QS-218,QS-221,QS-222,QS-223,QS-1103,QS-1105,QS-1104,QS-224,QS-600,QS-405,QS-1000,W-201,W-20101,W-2010101,W-2010102,W-2010103,W-20102,W-2010201,W-2010202,W-2010203,W-20103,W-2010301,W-2010302,W-2010303,W-20104,W-2010401,W-2010402,W-2010403,W-20105,W-2010501,W-2010502,W-20106,W-20107,W-20108,W-20109,W-202,W-301,W-30101,W-3010101,W-3010102,W-30102,W-3010201,W-3010202,W-30103,W-3010301,W-3010302,W-3010303,W-3010304,W-3010305,W-30104,W-3010401,W-3010402,W-304,W-305,W-302,S-102,W-102,W-101,QS-111,W-104,W-103]
        - df_reset_index: []
        - run_py:
            - |
              df['QS-209'] = (df['QS-206'] / df['QS-208']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-225'] = (df['QS-224'] / df['W-102']).replace([np.inf, -np.inf, "", np.nan],0)
              df['W-203'] = df['QS-225']
              df['CPQS-1000'] = (df['QS-1000'] / df['W-102']).replace([np.inf, -np.inf, "", np.nan],0)
              df['W-303'] = df['CPQS-1000']
              result = df
        - fetch_cols:
            columns: [汇总,book_month,S-201,S-202,S-203,S-204,S-205,S-206,S-207,S-208,S-209,S-210,S-211,S-212,S-213,S-214,S-215,S-216,S-217,S-218,S-219,S-220,S-221,S-222,S-223,S-301,S-302,S-303,S-304,S-305,S-306,S-307,S-308,S-309,S-310,S-311,S-312,S-313,S-314,S-315,Q-1103,Q-1105,Q-1104,Q-600,Q-405,QS-201,QS-202,QS-204,QS-205,QS-206,QS-207,QS-208,QS-210,QS-211,QS-212,QS-213,QS-214,QS-218,QS-221,QS-222,QS-223,QS-1103,QS-1105,QS-1104,QS-224,QS-600,QS-405,QS-1000,W-201,W-20101,W-2010101,W-2010102,W-2010103,W-20102,W-2010201,W-2010202,W-2010203,W-20103,W-2010301,W-2010302,W-2010303,W-20104,W-2010401,W-2010402,W-2010403,W-20105,W-2010501,W-2010502,W-20106,W-20107,W-20108,W-20109,W-202,W-301,W-30101,W-3010101,W-3010102,W-30102,W-3010201,W-3010202,W-30103,W-3010301,W-3010302,W-3010303,W-3010304,W-3010305,W-30104,W-3010401,W-3010402,W-304,W-305,W-302,QS-209,QS-225,W-203,CPQS-1000,W-303]
        - stash_push_df: []
        - use_df:     ## 拼接每个场景，每个月code指标汇总数据
            key: waimai_code_team_sum_result
        - stash_push_df: []
        - stash_join_df:
            on: [汇总,book_month]
            how: inner
            drop_stash: true
        - push_dataset:
            key: waimai_bu_bu_code_team_result

        - use_df:     ## 计算合计数据
            key: waimai_bu_bu_code_team_result
            columns: [汇总,book_month,S-101,S-102,S-103,S-104,S-105,S-106,S-107,S-108,S-109,S-110,S-111,S-112,S-113,S-114,S-115,S-116,S-117,S-118,S-119,S-120,S-121,S-122,S-123,S-201,S-202,S-203,S-204,S-205,S-206,S-207,S-208,S-209,S-210,S-211,S-212,S-213,S-214,S-215,S-216,S-217,S-218,S-219,S-220,S-221,S-222,S-223,S-301,S-302,S-303,S-304,S-305,S-306,S-307,S-308,S-309,S-310,S-311,S-312,S-313,S-314,S-315,QS-102,QS-1030,QS-103,QS-1046,QS-1078,QS-1090,QS-1112,QS-111,QS-112,QS-113,QS-114,QS-115,QS-116,QS-117,QS-118,QS-119,QS-120,SAO-10,SAH-1012,QS-123,QS-10,W-101,W-102,W-10201,W-10202,W-1020201,W-1020202,W-1020203,W-10203,W-1020301,W-1020302,W-10204,W-10205,W-10206,W-103,W-10301,W-1030101,W-1030102,W-1030103,W-1030104,W-1030105,W-10302,W-1030201,W-1030202,W-1030203,W-104,QS-201,QS-202,QS-204,QS-205,QS-206,QS-207,QS-208,QS-210,QS-211,QS-212,QS-213,QS-214,QS-218,QS-221,QS-222,QS-223,QS-224,QS-1000,W-201,W-20101,W-2010101,W-2010102,W-2010103,W-20102,W-2010201,W-2010202,W-2010203,W-20103,W-2010301,W-2010302,W-2010303,W-20104,W-2010401,W-2010402,W-2010403,W-20105,W-2010501,W-2010502,W-20106,W-202,W-301,W-30101,W-3010101,W-3010102,W-30102,W-3010201,W-3010202,W-30103,W-3010301,W-3010302,W-3010303,W-3010304,W-3010305,W-30104,W-3010401,W-3010402,W-302,Q-1103,Q-1105,Q-1104,Q-600,Q-405,QS-1103,QS-1104,QS-1105,QS-600,QS-405,W-20107,W-20108,W-20109,W-304,W-305]
        - df_groupby:
            by: [汇总]
        - df_sum:
            column: [S-101,S-102,S-103,S-104,S-105,S-106,S-107,S-108,S-109,S-110,S-111,S-112,S-113,S-114,S-115,S-116,S-117,S-118,S-119,S-120,S-121,S-122,S-123,S-201,S-202,S-203,S-204,S-205,S-206,S-207,S-208,S-209,S-210,S-211,S-212,S-213,S-214,S-215,S-216,S-217,S-218,S-219,S-220,S-221,S-222,S-223,S-301,S-302,S-303,S-304,S-305,S-306,S-307,S-308,S-309,S-310,S-311,S-312,S-313,S-314,S-315,QS-102,QS-1030,QS-103,QS-1046,QS-1078,QS-1090,QS-1112,QS-111,QS-112,QS-113,QS-114,QS-115,QS-116,QS-117,QS-118,QS-119,QS-120,SAO-10,SAH-1012,QS-123,QS-10,W-101,W-102,W-10201,W-10202,W-1020201,W-1020202,W-1020203,W-10203,W-1020301,W-1020302,W-10204,W-10205,W-10206,W-103,W-10301,W-1030101,W-1030102,W-1030103,W-1030104,W-1030105,W-10302,W-1030201,W-1030202,W-1030203,W-104,QS-201,QS-202,QS-204,QS-205,QS-206,QS-207,QS-208,QS-210,QS-211,QS-212,QS-213,QS-214,QS-218,QS-221,QS-222,QS-223,QS-224,QS-1000,W-201,W-20101,W-2010101,W-2010102,W-2010103,W-20102,W-2010201,W-2010202,W-2010203,W-20103,W-2010301,W-2010302,W-2010303,W-20104,W-2010401,W-2010402,W-2010403,W-20105,W-2010501,W-2010502,W-20106,W-202,W-301,W-30101,W-3010101,W-3010102,W-30102,W-3010201,W-3010202,W-30103,W-3010301,W-3010302,W-3010303,W-3010304,W-3010305,W-30104,W-3010401,W-3010402,W-302,Q-1103,Q-1105,Q-1104,Q-600,Q-405,QS-1103,QS-1104,QS-1105,QS-600,QS-405,W-20107,W-20108,W-20109,W-304,W-305]
        - df_reset_index: []
        - add_cols:
            - book_month: 合计
        - run_py:
            - |
              df['SP-10'] = (df['QS-10'] / df['W-102']).replace([np.inf, -np.inf, "", np.nan],0)
              df['W-105'] = df['SP-10']
              df['QS-209'] = (df['QS-206'] / df['QS-208']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-225'] = (df['QS-224'] / df['W-102']).replace([np.inf, -np.inf, "", np.nan],0)
              df['W-203'] = df['QS-225']
              df['CPQS-1000'] = (df['QS-1000'] / df['W-102']).replace([np.inf, -np.inf, "", np.nan],0)
              df['W-303'] = df['CPQS-1000']
              result = df

        - stash_push_df: []
        - use_df:
            key: waimai_bu_bu_code_team_result
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - fetch_cols:
            columns: [book_month,W-101,W-102,W-10201,W-10202,W-1020201,W-1020202,W-1020203,W-10203,W-1020301,W-1020302,W-10204,W-10205,W-10206,W-103,W-10301,W-1030101,W-1030102,W-1030103,W-1030104,W-1030105,W-10302,W-1030201,W-1030202,W-1030203,W-104,W-105,W-201,W-20101,W-2010101,W-2010102,W-2010103,W-20102,W-2010201,W-2010202,W-2010203,W-20103,W-2010301,W-2010302,W-2010303,W-20104,W-2010401,W-2010402,W-2010403,W-20105,W-2010501,W-2010502,W-20106,W-20107,W-20108,W-20109,W-202,W-203,W-301,W-30101,W-3010101,W-3010102,W-30102,W-3010201,W-3010202,W-30103,W-3010301,W-3010302,W-3010303,W-3010304,W-3010305,W-30104,W-3010401,W-3010402,W-304,W-305,W-302,W-303]
        - run_py:
            - |
              df = to_df(df).copy()
              df = df.set_index(['book_month'])
              df = df.transpose().reset_index(drop=False)
              result = to_dd(df)
        - df_rename_columns:
            - index: ac_code
        - sort_by_index:
            sort_list: [ W-101,W-102,W-10201,W-10202,W-1020201,W-1020202,W-1020203,W-10203,W-1020301,W-1020302,W-10204,W-10205,W-10206,W-103,W-10301,W-1030101,W-1030102,W-1030103,W-1030104,W-1030105,W-10302,W-1030201,W-1030202,W-1030203,W-104,W-105,W-201,W-20101,W-2010101,W-2010102,W-2010103,W-20102,W-2010201,W-2010202,W-2010203,W-20103,W-2010301,W-2010302,W-2010303,W-20104,W-2010401,W-2010402,W-2010403,W-20105,W-2010501,W-2010502,W-20106,W-20107,W-20108,W-20109,W-202,W-203,W-301,W-30101,W-3010101,W-3010102,W-30102,W-3010201,W-3010202,W-30103,W-3010301,W-3010302,W-3010303,W-3010304,W-3010305,W-30104,W-3010401,W-3010402,W-304,W-305,W-302,W-303 ]
        - df_rename_columns:
            - ac_code: 指标编码
        - run_py:
            - |
              df = to_df(df).copy()
              df['指标名称'] = ['月单量','主营业务收入','基础收入','KPI收入','月度KPI收入','周期KPI收入','非主营奖励收入','政策收入','短线政策收入','长线政策收入','运营扣罚','骑士活动扣款','运营罚款','一线骑士成本','用人成本','全职骑士工资','兼职骑士工资','政策骑士工资','社保公积','骑士福利','保险成本（一线）','平台险（一线）','线下险（一线）','保险非赔溢出金额','一线利润','一线利润率','二线站点成本','站点用人成本','站点人员工资','站点人员社保公积','站点团建等','站点房屋成本','办公站点房租','住宿站点费用','所有站点其它费用','办公成本','站点资产采购','站点办公水电消耗小额等','站点招待差旅等','保险成本（二线）','平台险（二线）','线下险（二线）','保险非赔溢出（二线）','装备成本','电动车及电池','其它骑士类装备','招聘成本','返税','三方服务费','税金及附加','站点利润','站点利润率','三线城市费用','城市用人费用','城市人员工资','城市人员社保公积','城市房屋费用','城市办公室房租','办公室非租金费用','办公费用','城市资产采购','城市办公水电消耗小额等','城市差旅费','城市团建福利','城市对客户招待公关等','保险费用','平台险（三线）','线下险（三线）','投资收益','资金使用费用','城市利润','城市利润率']
              result = to_dd(df)
        - sort_by_columns:
            sort_list: [ 指标名称,指标编码,合计,1月,2月,3月,4月,5月,6月,7月,8月,9月,10月,11月,12月 ]



    - name: chengtu_parameter_details
      sync_result: true
      cooks:
        - use_df:
            key: 22_budget_summary
        - df_select:
            - '[source] in @p1'
            - p1: [budget_clean_chengtu]
        - add_cols:
            - 汇总: 汇总
        - push_dataset:  ## 橙途所有数据，包含所有场景
            key: chengtu_code_team
        - use_df:
            key: chengtu_code_team
        - run_py: ## 透视表     code维度
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="money",index=['汇总','code_id','book_month'],columns="ac_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - fetch_cols:
            columns: [汇总,code_id,book_month,Q-1010101,Q-101010204,Q-1010202,Q-1010203,Q-1010204,Q-10201,Q-10202,Q-10203,Q-701,Q-201010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20605,Q-20701,Q-20702]
        - pad_cols:
            columns: [Q-1010101,Q-101010204,Q-1010202,Q-1010203,Q-1010204,Q-10201,Q-10202,Q-10203,Q-701,Q-201010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20605,Q-20701,Q-20702]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['QS-102'] = df['Q-10201'] + df['Q-10202'] + df['Q-10203']
              df['QS-101012'] = df['Q-1010101'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204'] + df['Q-101010204'] + df['QS-102']
              df['QS-20101'] = df['Q-201010101'] + df['Q-2010102']
              df['QS-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['QS-203'] = df['Q-20301'] + df['Q-20302'] + df['Q-20303']
              df['QS-205'] = df['Q-20501'] + df['Q-20502']
              df['QS-206'] = df['Q-20605']
              df['QS-207'] = df['Q-20701'] + df['Q-20702']
              df['QS-2017'] = df['QS-20101'] + df['QS-202'] + df['QS-203'] + df['QS-205'] + df['QS-206'] + df['QS-207']
              df['QS-172'] = df['QS-101012'] + df['Q-701'] - df['QS-2017']
              df['CPQS-172'] = (df['QS-172'] / df['QS-101012']).replace(['np.inf, -np.inf, "", np.nan'],0)
              result = df
        - stash_push_df: []
        - fetch_datasource:      # code匹配关联team，为后面计算team做准备
            datasource: qcode-biz-code-book
            dataset_cate: std
            columns: [code_id,team_id]
            empty_df_record:
              code_id: '-'
              team_id: '-'
        - stash_push_df: []
        - stash_join_df:
            on: code_id
            how: right
            drop_stash: true
        - push_dataset:     ## 所有code计算数据，关联对应 team_id 字段，备用
            key: chengtu_code_team_sum

        - use_df:
            key: chengtu_code_team_sum
            columns: [汇总,code_id,book_month,Q-1010101,Q-101010204,Q-1010202,Q-1010203,Q-1010204,Q-10201,Q-10202,Q-10203,Q-701,Q-201010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20605,Q-20701,Q-20702,QS-101012,QS-102,QS-2017,QS-20101,QS-202,QS-203,QS-205,QS-206,QS-207,QS-172]
        - df_groupby:
            by: [汇总,book_month]
        - df_sum:
            column: [Q-1010101,Q-101010204,Q-1010202,Q-1010203,Q-1010204,Q-10201,Q-10202,Q-10203,Q-701,Q-201010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20605,Q-20701,Q-20702,QS-101012,QS-102,QS-2017,QS-20101,QS-202,QS-203,QS-205,QS-206,QS-207,QS-172]
        - df_reset_index: []
        - run_py:
            - |
              df['CPQS-172'] = (df['QS-172'] / df['QS-101012']).replace(['np.inf, -np.inf, "", np.nan'],0)
              result = df
        - push_dataset:     ## 每个月  code  指标汇总数据
            key: chengtu_code_team_sum_result

        - use_df:       ##  计算单个team输入参数
            key: chengtu_code_team
        - run_py: ## 透视表
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="money",index=['汇总','team_id','book_month'],columns="ac_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - fetch_cols:
            columns: [汇总,team_id,book_month,Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30207,Q-30208,Q-30209,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900]
        - pad_cols:
            columns: [Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30207,Q-30208,Q-30209,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900]
            default_value: 0
        - stash_push_df: []
        - use_df:       ## 关联team所对应的code数据
            key: chengtu_code_team_sum
            columns: [汇总,team_id,book_month,QS-172,QS-101012]
        - df_groupby:
            by: [汇总,team_id,book_month]
        - df_sum:
            column: [QS-172,QS-101012]
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [汇总,team_id,book_month]
            how: right
            drop_stash: true
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['QS-301'] = df['Q-30102'] + df['Q-30109']
              df['QS-302'] = df['Q-3020101'] + df['Q-3020102']
              df['QS-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30202'] + df['Q-30203'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209']
              df['QS-3013'] = df['QS-301'] + df['QS-302'] + df['QS-303']
              df['QS-10000'] = df['QS-172'] - df['QS-3013'] - df['Q-400'] - df['Q-500'] + df['Q-600'] + df['Q-700'] - df['Q-800'] - df['Q-900']
              df['CPQS-10000'] = (df['QS-10000'] / df['QS-101012']).replace(['np.inf, -np.inf, "", np.nan'],0)
              result = df

        - df_groupby:
            by: [汇总,book_month]
        - df_sum:
            column: [Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30207,Q-30208,Q-30209,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900,QS-172,QS-101012,QS-3013,QS-301,QS-302,QS-303,QS-10000]
        - df_reset_index: []
        - run_py:
            - |
              df['CPQS-10000'] = (df['QS-10000'] / df['QS-101012']).replace(['np.inf, -np.inf, "", np.nan'],0)
              result = df
        - fetch_cols:
            columns: [汇总,book_month,Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30207,Q-30208,Q-30209,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900,QS-3013,QS-301,QS-302,QS-303,QS-10000,CPQS-10000]
        - stash_push_df: []
        - use_df:
            key: chengtu_code_team_sum_result
        - stash_push_df: []
        - stash_join_df:
            on: [汇总,book_month]
            how: inner
            drop_stash: true
        - push_dataset:
            key: chengtu_code_team_sum_result_result

        - use_df:      ## 计算合计数据
            key: chengtu_code_team_sum_result_result
        - fetch_cols:
            columns: [汇总,book_month,Q-1010101,Q-101010204,Q-1010202,Q-1010203,Q-1010204,Q-10201,Q-10202,Q-10203,Q-701,Q-201010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20605,Q-20701,Q-20702,Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30207,Q-30208,Q-30209,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900,QS-101012,QS-102,QS-2017,QS-20101,QS-202,QS-203,QS-205,QS-206,QS-207,QS-172,QS-3013,QS-301,QS-302,QS-303,QS-10000]
        - df_groupby:
            by: 汇总
        - df_sum:
            column: [Q-1010101,Q-101010204,Q-1010202,Q-1010203,Q-1010204,Q-10201,Q-10202,Q-10203,Q-701,Q-201010101,Q-2010102,Q-20201,Q-20202,Q-20203,Q-20204,Q-20301,Q-20302,Q-20303,Q-20501,Q-20502,Q-20605,Q-20701,Q-20702,Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30207,Q-30208,Q-30209,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900,QS-101012,QS-102,QS-2017,QS-20101,QS-202,QS-203,QS-205,QS-206,QS-207,QS-172,QS-3013,QS-301,QS-302,QS-303,QS-10000]
        - df_reset_index: []
        - run_py:
            - |
              df['CPQS-172'] = (df['QS-172'] / df['QS-101012']).replace(['np.inf, -np.inf, "", np.nan'],0)
              df['CPQS-10000'] = (df['QS-10000'] / df['QS-101012']).replace(['np.inf, -np.inf, "", np.nan'],0)
              result = df
        - add_cols:
            - book_month: 合计
        - stash_push_df: []
        - use_df:
            key: chengtu_code_team_sum_result_result
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - fetch_cols:
            columns: [ book_month,QS-101012,Q-1010101,Q-101010204,Q-1010202,Q-1010203,Q-1010204,QS-102,Q-10201,Q-10202,Q-10203,Q-701,QS-2017,QS-20101,Q-201010101,Q-2010102,QS-202,Q-20201,Q-20202,Q-20203,Q-20204,QS-203,Q-20301,Q-20302,Q-20303,QS-205,Q-20501,Q-20502,QS-206,Q-20605,QS-207,Q-20701,Q-20702,QS-172,CPQS-172,QS-3013,QS-301,Q-30102,Q-30109,QS-302,Q-3020101,Q-3020102,QS-303,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30207,Q-30208,Q-30209,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900,QS-10000,CPQS-10000 ]
        - run_py:
            - |
              df = to_df(df).copy()
              df = df.set_index(['book_month'])
              df = df.transpose().reset_index(drop=False)
              result = to_dd(df)
        - df_rename_columns:
            - index: ac_code
        - sort_by_index:
            sort_list: [ QS-101012,Q-1010101,Q-101010204,Q-1010202,Q-1010203,Q-1010204,QS-102,Q-10201,Q-10202,Q-10203,Q-701,QS-2017,QS-20101,Q-201010101,Q-2010102,QS-202,Q-20201,Q-20202,Q-20203,Q-20204,QS-203,Q-20301,Q-20302,Q-20303,QS-205,Q-20501,Q-20502,QS-206,Q-20605,QS-207,Q-20701,Q-20702,QS-172,CPQS-172,QS-3013,QS-301,Q-30102,Q-30109,QS-302,Q-3020101,Q-3020102,QS-303,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30207,Q-30208,Q-30209,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900,QS-10000,CPQS-10000 ]
        - df_rename_columns:
            - ac_code: 指标编码
        - run_py:
            - |
              df = to_df(df).copy()
              df['指标名称'] = ['主营业务收入','基础收入','KPI收入','经纪服务','专业服务','其他服务','批发和零售业','商品销售收入','代销商品收入','代销商品手续费收入','营业外收入','主营业务成本','一线服务费','全职工资','兼职','保险成本','意外险','工伤险','社保公积金','商业保险外赔偿成本','商品销售成本','布草','门锁','日用品','房屋成本','房屋租金','房屋其他费用','装备成本','一线劳动者物资装备','招聘成本','内部招聘','外部招聘','一线利润','一线利润率','管理费用','人员成本','工资','社保公积金','房屋费用','房屋租金','房屋其他费用','办公管理费用','低值易耗品摊销','固定资产折旧','办公费','差旅费','招待费','团建福利费','咨询费用','印花税','佣金','财务费用','资产减值损失','投资收益','营业外收入','营业外支出','所得税','利润','利润率']
              result = to_dd(df)
        - sort_by_columns:
            sort_list: [ 指标名称,指标编码,合计,1月,2月,3月,4月,5月,6月,7月,8月,9月,10月,11月,12月 ]



    - name: danche_parameter_details
      sync_result: true
      cooks:
        - use_df:
            key: 22_budget_summary
        - df_select:
            - '[source] == @p1'
            - p1: budget_travel_bicycle
        - add_cols:
            - 汇总: 汇总
        - push_dataset:  ## 单车所有数据，包含所有场景
            key: danche_code_team
        - use_df:
            key: danche_code_team
        - run_py: ## 透视表    code维度
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="money",index=['汇总','code_id','book_month'],columns="ac_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - fetch_cols:
            columns: [汇总,code_id,book_month,Q-1030101,Q-1030102,Q-10302,Q-701,Q-201010101,Q-2010102,Q-2010104,Q-20201,Q-20202,Q-20203,Q-20204,Q-20602,Q-20603,Q-20605,Q-20701,Q-20702]
        - pad_cols:
            columns: [Q-1030101,Q-1030102,Q-10302,Q-701,Q-201010101,Q-2010102,Q-2010104,Q-20201,Q-20202,Q-20203,Q-20204,Q-20602,Q-20603,Q-20605,Q-20701,Q-20702]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['QS-10301'] = df['Q-1030101'] + df['Q-1030102']
              df['QS-103'] = df['QS-10301'] + df['Q-10302']
              df['QS-20101'] = df['Q-201010101'] + df['Q-2010102'] + df['Q-2010104']
              df['QS-202'] = df['Q-20201'] + df['Q-20202'] + df['Q-20203'] + df['Q-20204']
              df['QS-206'] = df['Q-20602'] + df['Q-20603'] + df['Q-20605']
              df['QS-207'] = df['Q-20701'] + df['Q-20702']
              df['QS-2017'] = df['QS-20101'] + df['QS-202'] + df['QS-206'] + df['QS-207']
              df['QS-172'] = df['QS-103'] + df['Q-701'] - df['QS-2017']
              df['CPQS-172'] = (df['QS-172'] / df['QS-103']).replace(['np.inf, -np.inf, "", np.nan'],0)
              result = df
        - stash_push_df: []
        - fetch_datasource:      # code匹配关联team，为后面计算team做准备
            datasource: qcode-biz-code-book
            dataset_cate: std
            columns: [code_id,team_id]
            empty_df_record:
              code_id: '-'
              team_id: '-'
        - stash_push_df: []
        - stash_join_df:
            on: code_id
            how: right
            drop_stash: true
        - push_dataset:     ## 所有code计算数据，关联对应 team_id 字段，备用
            key: danche_code_team_sum

        - use_df:   ## 计算每个月code指标数据
            key: danche_code_team_sum
        - df_groupby:
            by: [汇总,book_month]
        - df_sum:
            column: [Q-1030101,Q-1030102,Q-10302,Q-701,Q-201010101,Q-2010102,Q-2010104,Q-20201,Q-20202,Q-20203,Q-20204,Q-20602,Q-20603,Q-20605,Q-20701,Q-20702,QS-103,QS-10301,QS-2017,QS-20101,QS-202,QS-206,QS-207,QS-172]
        - df_reset_index: []
        - run_py:
            - |
              df['CPQS-172'] = (df['QS-172'] / df['QS-103']).replace(['np.inf, -np.inf, "", np.nan'],0)
              result = df
        - push_dataset:     ## 每个月  code  指标汇总数据
            key: danche_code_team_sum_result

        - use_df:       ##  计算单个team输入参数
            key: danche_code_team
        - run_py: ## 透视表
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="money",index=['汇总','team_id','book_month'],columns="ac_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - fetch_cols:
            columns: [汇总,team_id,book_month,Q-30101,Q-110101,Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-800]
        - pad_cols:
            columns: [Q-30101,Q-110101,Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-800]
            default_value: 0
        - stash_push_df: []
        - use_df:       ## 关联team所对应的code数据
            key: danche_code_team_sum
            columns: [汇总,team_id,book_month,QS-172,QS-103]
        - df_groupby:
            by: [汇总,team_id,book_month]
        - df_sum:
            column: [QS-172,QS-103]
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [汇总,team_id,book_month]
            how: right
            drop_stash: true
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['QS-13'] = df['Q-30101'] + df['Q-110101']
              df['QS-31'] = df['Q-30101'] + df['Q-110101']
              df['QS-1000'] = df['QS-172'] - df['QS-13']
              df['CPQS-1000'] = (df['QS-1000'] / df['QS-103']).replace(['np.inf, -np.inf, "", np.nan'],0)
              df['QS-301'] = df['Q-30102'] + df['Q-30109']
              df['QS-302'] = df['Q-3020101'] + df['Q-3020102']
              df['QS-3023'] = df['Q-30301'] + df['Q-30302'] + df['Q-30206'] + df['Q-30203'] + df['Q-30205'] + df['Q-30202']
              df['QS-3013'] = df['QS-301'] + df['QS-302'] + df['QS-3023']
              df['QS-303'] = df['Q-30301'] + df['Q-30302']
              df['QS-10000'] = df['QS-1000'] - df['QS-3013'] - df['Q-800']
              df['CPQS-10000'] = (df['QS-10000'] / df['QS-103']).replace(['np.inf, -np.inf, "", np.nan'],0)
              result = df

        - df_groupby:
            by: [汇总,book_month]
        - df_sum:
            column: [Q-30101,Q-110101,Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-800,QS-172,QS-103,QS-13,QS-31,QS-1000,QS-3013,QS-301,QS-302,QS-3023,QS-303,QS-10000]
        - df_reset_index: []
        - run_py:
            - |
              df['CPQS-1000'] = (df['QS-1000'] / df['QS-103']).replace(['np.inf, -np.inf, "", np.nan'],0)
              df['CPQS-10000'] = (df['QS-10000'] / df['QS-103']).replace(['np.inf, -np.inf, "", np.nan'],0)
              result = df
        - fetch_cols:
            columns: [汇总,book_month,Q-30101,Q-110101,Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-800,QS-13,QS-31,QS-1000,QS-3013,QS-301,QS-302,QS-3023,QS-303,QS-10000,CPQS-1000,CPQS-10000]
        - stash_push_df: []
        - use_df:
            key: danche_code_team_sum_result
        - stash_push_df: []
        - stash_join_df:
            on: [汇总,book_month]
            how: inner
            drop_stash: true
        - push_dataset:
            key: danche_code_team_sum_result_result

        - use_df:      ## 计算合计数据
            key: danche_code_team_sum_result_result
        - fetch_cols:
            columns: [汇总,book_month,Q-1030101,Q-1030102,Q-10302,Q-701,Q-201010101,Q-2010102,Q-2010104,Q-20201,Q-20202,Q-20203,Q-20204,Q-20602,Q-20603,Q-20605,Q-20701,Q-20702,Q-30101,Q-110101,Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-800,QS-103,QS-10301,QS-2017,QS-20101,QS-202,QS-206,QS-207,QS-172,QS-13,QS-31,QS-1000,QS-3013,QS-301,QS-302,QS-3023,QS-303,QS-10000]
        - df_groupby:
            by: 汇总
        - df_sum:
            column: [Q-1030101,Q-1030102,Q-10302,Q-701,Q-201010101,Q-2010102,Q-2010104,Q-20201,Q-20202,Q-20203,Q-20204,Q-20602,Q-20603,Q-20605,Q-20701,Q-20702,Q-30101,Q-110101,Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-800,QS-103,QS-10301,QS-2017,QS-20101,QS-202,QS-206,QS-207,QS-172,QS-13,QS-31,QS-1000,QS-3013,QS-301,QS-302,QS-3023,QS-303,QS-10000]
        - df_reset_index: []
        - run_py:
            - |
              df['CPQS-172'] = (df['QS-172'] / df['QS-103']).replace(['np.inf, -np.inf, "", np.nan'],0)
              df['CPQS-1000'] = (df['QS-1000'] / df['QS-103']).replace(['np.inf, -np.inf, "", np.nan'],0)
              df['CPQS-10000'] = (df['QS-10000'] / df['QS-103']).replace(['np.inf, -np.inf, "", np.nan'],0)
              result = df
        - add_cols:
            - book_month: 合计
        - stash_push_df: []
        - use_df:
            key: danche_code_team_sum_result_result
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - fetch_cols:
            columns: [book_month,QS-103,QS-10301,Q-1030101,Q-1030102,Q-10302,Q-701,QS-2017,QS-20101,Q-201010101,Q-2010102,Q-2010104,QS-202,Q-20201,Q-20202,Q-20203,Q-20204,QS-206,Q-20602,Q-20603,Q-20605,QS-207,Q-20701,Q-20702,QS-172,CPQS-172,QS-13,QS-31,Q-30101,Q-110101,QS-1000,CPQS-1000,QS-3013,QS-301,Q-30102,Q-30109,QS-302,Q-3020101,Q-3020102,QS-3023,QS-303,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-800,QS-10000,CPQS-10000]
        - run_py:
            - |
              df = to_df(df).copy()
              df = df.set_index(['book_month'])
              df = df.transpose().reset_index(drop=False)
              result = to_dd(df)
        - df_rename_columns:
            - index: ac_code
        - sort_by_index:
            sort_list: [ QS-103,QS-10301,Q-1030101,Q-1030102,Q-10302,Q-701,QS-2017,QS-20101,Q-201010101,Q-2010102,Q-2010104,QS-202,Q-20201,Q-20202,Q-20203,Q-20204,QS-206,Q-20602,Q-20603,Q-20605,QS-207,Q-20701,Q-20702,QS-172,CPQS-172,QS-13,QS-31,Q-30101,Q-110101,QS-1000,CPQS-1000,QS-3013,QS-301,Q-30102,Q-30109,QS-302,Q-3020101,Q-3020102,QS-3023,QS-303,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-800,QS-10000,CPQS-10000 ]
        - df_rename_columns:
            - ac_code: 指标编码
        - run_py:
            - |
              df = to_df(df).copy()
              df['指标名称'] = ['主营业务收入','装卸搬运收入','换电收入','城际干线收入','调度维修收入','营业外收入','一线成本','一线服务费','全职工资','兼职','司机成本','保险成本','意外险','工伤险','社保公积金','商业保险外赔偿成本','装备成本','三轮电动车及电池','四轮车及电池','一线劳动者物资装备','招聘成本','内部招聘','外部招聘','一线利润','一线利润率','二线成本','人员成本','二线服务费','社保公积金','二线利润','二线利润率','管理费用','人员成本','工资','社保公积金','房屋费用','房屋租金','房屋其他费用','办公管理费用','物资采购','低值易耗品摊销','固定资产折旧','办公费','差旅费','招待费','团建福利费','营业外支出','利润','利润率']
              result = to_dd(df)
        - sort_by_columns:
            sort_list: [ 指标名称,指标编码,合计,1月,2月,3月,4月,5月,6月,7月,8月,9月,10月,11月,12月 ]



    - name: jituan_parameter_details
      sync_result: true
      cooks:
        - use_df:
            key: 22_budget_summary
        - df_select:
            - '[source] == @p1'
            - p1: budget_company_function
        - add_cols:
            - 汇总: 汇总
        - run_py: ## 透视表
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="money",index=['汇总','team_id','book_month'],columns="ac_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - fetch_cols:
            columns: [汇总,team_id,book_month,Q-30102,Q-30109,Q-30106,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30204,Q-30205,Q-30202,Q-30208,Q-30209,Q-30211,Q-30212,Q-30207,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900]
        - pad_cols:
            columns: [Q-30102,Q-30109,Q-30106,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30204,Q-30205,Q-30202,Q-30208,Q-30209,Q-30211,Q-30212,Q-30207,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900]
            default_value: 0
        - df_fillna:
            columns: [Q-30102,Q-30109,Q-30106,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30204,Q-30205,Q-30202,Q-30208,Q-30209,Q-30211,Q-30212,Q-30207,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900]
            value: 0
        - run_py:
            - |
              df['QS-301'] = df['Q-30102'] + df['Q-30109'] + df['Q-30106']
              df['QS-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['QS-3023'] = df['Q-30301'] + df['Q-30302'] + df['Q-30206'] + df['Q-30203'] + df['Q-30205'] + df['Q-30202'] + df['Q-30208'] + df['Q-30209'] + df['Q-30204'] + df['Q-30211'] + df['Q-30212']
              df['QS-3013'] = df['QS-301'] + df['QS-30201'] + df['QS-3023'] + df['Q-30207']
              df['QS-10000'] = df['QS-3013'] - df['Q-400'] - df['Q-500'] + df['Q-600'] + df['Q-700'] - df['Q-800'] - df['Q-900']
              result = df
        - push_dataset:
            key: jituan

        - use_df:
            key: jituan
        - fetch_cols:
            columns: [汇总,book_month,Q-30102,Q-30109,Q-30106,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30204,Q-30205,Q-30202,Q-30208,Q-30209,Q-30211,Q-30212,Q-30207,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900,QS-3013,QS-301,QS-30201,QS-3023,QS-10000]
        - df_groupby:
            by: [汇总,book_month]
        - df_sum:
            column: [Q-30102,Q-30109,Q-30106,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30204,Q-30205,Q-30202,Q-30208,Q-30209,Q-30211,Q-30212,Q-30207,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900,QS-3013,QS-301,QS-30201,QS-3023,QS-10000]
        - df_reset_index: []
        - stash_push_df: []

        - use_df:
            key: jituan
        - fetch_cols:
            columns: [汇总,book_month,Q-30102,Q-30109,Q-30106,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30204,Q-30205,Q-30202,Q-30208,Q-30209,Q-30211,Q-30212,Q-30207,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900,QS-3013,QS-301,QS-30201,QS-3023,QS-10000]
        - df_groupby:
            by: 汇总
        - df_sum:
            column: [Q-30102,Q-30109,Q-30106,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30204,Q-30205,Q-30202,Q-30208,Q-30209,Q-30211,Q-30212,Q-30207,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900,QS-3013,QS-301,QS-30201,QS-3023,QS-10000]
        - df_reset_index: []
        - add_cols:
            - book_month: 合计
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - fetch_cols:
            columns: [book_month,QS-3013,QS-301,Q-30102,Q-30109,Q-30106,QS-30201,Q-3020101,Q-3020102,QS-3023,Q-30301,Q-30302,Q-30206,Q-30203,Q-30204,Q-30205,Q-30202,Q-30208,Q-30209,Q-30211,Q-30212,Q-30207,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900,QS-10000]
        - run_py:
            - |
              df = to_df(df).copy()
              df = df.set_index(['book_month'])
              df = df.transpose().reset_index(drop=False)
              result = to_dd(df)
        - sort_by_index:
            sort_list: [ QS-3013,QS-301,Q-30102,Q-30109,Q-30106,QS-30201,Q-3020101,Q-3020102,QS-3023,Q-30301,Q-30302,Q-30206,Q-30203,Q-30204,Q-30205,Q-30202,Q-30208,Q-30209,Q-30211,Q-30212,Q-30207,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900,QS-10000 ]
        - df_rename_columns:
            - ac_code: 指标编码
        - run_py:
            - |
              df = to_df(df).copy()
              df['指标名称'] = ['管理费用','人员成本','工资','社保公积金','残保金','房屋费用','房屋租金','房屋其他费用','办公管理费用','低值易耗品摊销','固定资产折旧','办公费','差旅费','市内交通费','招待费','团建福利费','印花税','佣金','招聘费用','其他','咨询费','财务费用','资产减值损失','投资收益','营业外收入','营业外支出','所得税','利润']
              result = to_dd(df)
        - sort_by_columns:
            sort_list: [ 指标名称,指标编码,合计,1月,2月,3月,4月,5月,6月,7月,8月,9月,10月,11月,12月 ]


    - name: lailai_parameter_details
      sync_result: true
      cooks:
        - use_df:
            key: 22_budget_summary
        - df_select:
            - '[source] == @p1'
            - p1: budget_clean_lailai
        - add_cols:
            - 汇总: 汇总
        - push_dataset:
            key: lailai_code_team
        - use_df:
            key: lailai_code_team
        - run_py: ## 透视表
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="money",index=['汇总','code_id','book_month'],columns="ac_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - fetch_cols:
            columns: [汇总,code_id,book_month,Q-1010101,Q-1010105,Q-1010106,Q-1010107,Q-1010108,Q-701,Q-201010101,Q-20201,Q-20605]
        - pad_cols:
            columns: [Q-1010101,Q-1010105,Q-1010106,Q-1010107,Q-1010108,Q-701,Q-201010101,Q-20201,Q-20605]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['QS-1010116'] = df['Q-1010101'] + df['Q-1010105'] + df['Q-1010106']
              df['QS-1010178'] = df['Q-1010107'] + df['Q-1010108']
              df['QS-10101'] = df['QS-1010116'] + df['QS-1010178']
              df['QS-2010101'] = df['Q-201010101']
              df['QS-202'] = df['Q-20201']
              df['QS-206'] = df['Q-20605']
              df['QS-2016'] = df['QS-2010101'] + df['QS-202'] + df['QS-206']
              df['QS-172'] = df['QS-10101'] + df['Q-701'] - df['QS-2016']
              df['CPQS-172'] = (df['QS-172'] / df['QS-10101']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - stash_push_df: []
        - fetch_datasource:      # code匹配关联team，为后面计算team做准备
            datasource: qcode-biz-code-book
            dataset_cate: std
            columns: [code_id,team_id]
            empty_df_record:
              code_id: '-'
              team_id: '-'
        - stash_push_df: []
        - stash_join_df:
            on: code_id
            how: right
            drop_stash: true
        - push_dataset:     ## 所有code计算数据，关联对应 team_id 字段，备用
            key: lailai_code_team_sum

        - use_df:   ## 计算每个月code指标数据
            key: lailai_code_team_sum
        - df_groupby:
            by: [汇总,book_month]
        - df_sum:
            column: [Q-1010101,Q-1010105,Q-1010106,Q-1010107,Q-1010108,Q-701,Q-201010101,Q-20201,Q-20605,QS-10101,QS-1010116,QS-1010178,QS-2016,QS-2010101,QS-202,QS-206,QS-172]
        - df_reset_index: []
        - run_py:
            - |
              df['CPQS-172'] = (df['QS-172'] / df['QS-10101']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - push_dataset:     ## 每个月  code  指标汇总数据
            key: lailai_code_team_sum_result

        - use_df:       ##  计算单个team输入参数
            key: lailai_code_team
        - run_py: ## 透视表
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="money",index=['汇总','team_id','book_month'],columns="ac_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - fetch_cols:
            columns: [汇总,team_id,book_month,Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30207,Q-30208,Q-30209,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900]
        - pad_cols:
            columns: [Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30207,Q-30208,Q-30209,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900]
            default_value: 0
        - stash_push_df: []
        - use_df:       ## 关联team所对应的code数据
            key: lailai_code_team_sum
            columns: [汇总,team_id,book_month,QS-172,QS-10101]
        - df_groupby:
            by: [汇总,team_id,book_month]
        - df_sum:
            column: [QS-172,QS-10101]
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [汇总,team_id,book_month]
            how: right
            drop_stash: true
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['QS-301'] = df['Q-30102'] + df['Q-30109']
              df['QS-302'] = df['Q-3020101'] + df['Q-3020102']
              df['QS-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30206'] + df['Q-30203'] + df['Q-30205'] + df['Q-30202'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209']
              df['QS-3013'] = df['QS-301'] + df['QS-302'] + df['QS-303']
              df['QS-10000'] = df['QS-172'] - df['QS-3013'] - df['Q-400'] - df['Q-500'] + df['Q-600'] + df['Q-700'] - df['Q-800'] - df['Q-900']
              df['CPQS-10000'] = (df['QS-10000'] / df['QS-10101']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df

        - df_groupby:
            by: [汇总,book_month]
        - df_sum:
            column: [Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30207,Q-30208,Q-30209,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900,QS-3013,QS-301,QS-302,QS-303,QS-10000,QS-172,QS-10101]
        - df_reset_index: []
        - run_py:
            - |
              df['CPQS-10000'] = (df['QS-10000'] / df['QS-10101']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [汇总,book_month,Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30207,Q-30208,Q-30209,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900,QS-3013,QS-301,QS-302,QS-303,QS-10000,CPQS-10000]
        - stash_push_df: []
        - use_df:
            key: lailai_code_team_sum_result
        - stash_push_df: []
        - stash_join_df:
            on: [汇总,book_month]
            how: inner
            drop_stash: true
        - push_dataset:
            key: lailai_code_team_sum_result_result

        - use_df:      ## 计算合计数据
            key: lailai_code_team_sum_result_result
        - fetch_cols:
            columns: [汇总,book_month,Q-1010101,Q-1010105,Q-1010106,Q-1010107,Q-1010108,Q-701,Q-201010101,Q-20201,Q-20605,Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30207,Q-30208,Q-30209,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900,QS-10101,QS-1010116,QS-1010178,QS-2016,QS-2010101,QS-202,QS-206,QS-172,QS-3013,QS-301,QS-302,QS-303,QS-10000]
        - df_groupby:
            by: 汇总
        - df_sum:
            column: [Q-1010101,Q-1010105,Q-1010106,Q-1010107,Q-1010108,Q-701,Q-201010101,Q-20201,Q-20605,Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30207,Q-30208,Q-30209,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900,QS-10101,QS-1010116,QS-1010178,QS-2016,QS-2010101,QS-202,QS-206,QS-172,QS-3013,QS-301,QS-302,QS-303,QS-10000]
        - df_reset_index: []
        - run_py:
            - |
              df['CPQS-172'] = (df['QS-172'] / df['QS-10101']).replace([np.inf, -np.inf, "", np.nan],0)
              df['CPQS-10000'] = (df['QS-10000'] / df['QS-10101']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - add_cols:
            - book_month: 合计
        - stash_push_df: []
        - use_df:
            key: lailai_code_team_sum_result_result
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - fetch_cols:
            columns: [book_month,QS-10101,QS-1010116,Q-1010101,Q-1010105,Q-1010106,QS-1010178,Q-1010107,Q-1010108,Q-701,QS-2016,QS-2010101,Q-201010101,QS-202,Q-20201,QS-206,Q-20605,QS-172,CPQS-172,QS-3013,QS-301,Q-30102,Q-30109,QS-302,Q-3020101,Q-3020102,QS-303,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30207,Q-30208,Q-30209,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900,QS-10000,CPQS-10000]
        - run_py:
            - |
              df = to_df(df).copy()
              df = df.set_index(['book_month'])
              df = df.transpose().reset_index(drop=False)
              result = to_dd(df)
        - df_rename_columns:
            - index: ac_code
        - sort_by_index:
            sort_list: [ QS-10101,QS-1010116,Q-1010101,Q-1010105,Q-1010106,QS-1010178,Q-1010107,Q-1010108,Q-701,QS-2016,QS-2010101,Q-201010101,QS-202,Q-20201,QS-206,Q-20605,QS-172,CPQS-172,QS-3013,QS-301,Q-30102,Q-30109,QS-302,Q-3020101,Q-3020102,QS-303,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30207,Q-30208,Q-30209,Q-400,Q-500,Q-600,Q-700,Q-800,Q-900,QS-10000,CPQS-10000 ]
        - df_rename_columns:
            - ac_code: 指标编码
        - run_py:
            - |
              df = to_df(df).copy()
              df['指标名称'] = ['主营业务收入','直营收入','基础收入','直营酒店收入','物业收入','加盟收入','加盟酒店收入','加盟非酒店收入','营业外收入','主营业务成本','一线服务费','全职工资','保险成本','意外险','装备成本','一线劳动者物资装备','一线利润','一线利润率','管理费用','人员成本','工资','社保公积金','房屋费用','房屋租金','房屋其他费用','办公管理费用','低值易耗品摊销','固定资产折旧','办公费','差旅费','招待费','团建福利费','咨询费','印花税','佣金','财务费用','资产减值损失','投资收益','营业外收入','营业外支出','所得税','利润','利润率']
              result = to_dd(df)
        - sort_by_columns:
            sort_list: [ 指标名称,指标编码,合计,1月,2月,3月,4月,5月,6月,7月,8月,9月,10月,11月,12月 ]


    - name: zhinenggui_parameter_details
      sync_result: true
      cooks:
        - use_df:
            key: 22_budget_summary
        - df_select:
            - '[source] == @p1'
            - p1: budget_waimai_intelligent_cabinet
        - add_cols:
            - 汇总: 汇总
        - push_dataset:
            key: zhinenggui_code_team
        - use_df:
            key: zhinenggui_code_team
        - run_py: ## 透视表
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="money",index=['汇总','code_id','book_month'],columns="ac_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - fetch_cols:
            columns: [汇总,code_id,book_month,C-101,Q-1010101,Q-1010109,Q-101010406,Q-701,Q-201010101,Q-2010102,Q-20203,Q-20202,Q-20503]
        - pad_cols:
            columns: [C-101,Q-1010101,Q-1010109,Q-101010406,Q-701,Q-201010101,Q-2010102,Q-20203,Q-20202,Q-20503]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['QS-10101'] = df['Q-1010101'] + df['Q-1010109'] + df['Q-101010406']
              df['QS-20101'] = df['Q-201010101'] + df['Q-2010102']
              df['QS-202'] = df['Q-20203'] + df['Q-20202']
              df['QS-2012'] = df['QS-20101'] + df['QS-202']
              df['QS-172'] = df['QS-10101'] + df['Q-701'] - df['QS-2012']
              df['CPQS-172'] = (df['QS-172'] / df['QS-10101']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - stash_push_df: []
        - fetch_datasource:      # code匹配关联team，为后面计算team做准备
            datasource: qcode-biz-code-book
            dataset_cate: std
            columns: [code_id,team_id]
            empty_df_record:
              code_id: '-'
              team_id: '-'
        - stash_push_df: []
        - stash_join_df:
            on: code_id
            how: right
            drop_stash: true
        - push_dataset:     ## 所有code计算数据，关联对应 team_id 字段，备用
            key: zhinenggui_code_team_sum

        - use_df:   ## 计算每个月code指标数据
            key: zhinenggui_code_team_sum
        - df_groupby:
            by: [汇总,book_month]
        - df_sum:
            column: [C-101,Q-1010101,Q-1010109,Q-101010406,Q-701,Q-201010101,Q-2010102,Q-20203,Q-20202,Q-20503,QS-10101,QS-2012,QS-20101,QS-202,QS-172]
        - df_reset_index: []
        - run_py:
            - |
              df['CPQS-172'] = (df['QS-172'] / df['QS-10101']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - push_dataset:     ## 每个月  code  指标汇总数据
            key: zhinenggui_code_team_sum_result

        - use_df:       ##  计算单个team输入参数
            key: zhinenggui_code_team
        - run_py: ## 透视表
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="money",index=['汇总','team_id','book_month'],columns="ac_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - fetch_cols:
            columns: [汇总,team_id,book_month,Q-30101,Q-110101,Q-11020101,Q-11020102,Q-110202,Q-30102,Q-30109,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-800,Q-30108]
        - pad_cols:
            columns: [Q-30101,Q-110101,Q-11020101,Q-11020102,Q-110202,Q-30102,Q-30109,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-800,Q-30108]
            default_value: 0
        - stash_push_df: []
        - use_df:       ## 关联team所对应的code数据
            key: zhinenggui_code_team_sum
            columns: [汇总,team_id,book_month,Q-20503,QS-172,QS-10101]
        - df_groupby:
            by: [汇总,team_id,book_month]
        - df_sum:
            column: [Q-20503,QS-172,QS-10101]
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [汇总,team_id,book_month]
            how: right
            drop_stash: true
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['QS-130118'] = df['Q-30101'] + df['Q-30108'] + df['Q-110101']
              df['QS-30118'] = df['Q-30101'] + df['Q-30108']
              df['QS-1102012'] = df['Q-11020101'] + df['Q-11020102'] + df['Q-110202'] + df['Q-20503']
              df['QS-11318'] = df['QS-130118'] + df['QS-1102012']
              df['QS-110201'] = df['Q-11020101'] + df['Q-11020102']
              df['QS-272'] = df['QS-172'] - df['QS-11318']
              df['CPQS-272'] = (df['QS-272'] / df['QS-10101']).replace([np.inf, -np.inf, "", np.nan],0)
              df['QS-301'] = df['Q-30102'] + df['Q-30109']
              df['QS-3023'] = df['Q-30301'] + df['Q-30302'] + df['Q-30206'] + df['Q-30203'] + df['Q-30205'] + df['Q-30202']
              df['QS-3013'] = df['QS-301'] + df['QS-3023']
              df['QS-303'] = df['Q-30301'] + df['Q-30302']
              df['QS-10000'] = df['QS-272'] - df['QS-3013']
              df['CPQS-10000'] = (df['QS-10000'] / df['QS-10101']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df

        - df_groupby:
            by: [汇总,book_month]
        - df_sum:
            column: [Q-30101,Q-110101,Q-11020101,Q-11020102,Q-110202,Q-30102,Q-30109,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-800,Q-30108,Q-20503,QS-172,QS-10101,QS-11318,QS-130118,QS-30118,QS-1102012,QS-110201,QS-272,QS-3013,QS-301,QS-3023,QS-303,QS-10000]
        - df_reset_index: []
        - run_py:
            - |
              df['CPQS-272'] = (df['QS-272'] / df['QS-10101']).replace([np.inf, -np.inf, "", np.nan],0)
              df['CPQS-10000'] = (df['QS-10000'] / df['QS-10101']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [汇总,book_month,Q-110101,Q-11020101,Q-11020102,Q-110202,Q-30102,Q-30109,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-800,QS-11318,QS-130118,QS-30118,QS-1102012,QS-110201,QS-272,CPQS-272,QS-3013,QS-301,QS-3023,QS-303,QS-10000,CPQS-10000,Q-30101,Q-30108]
        - stash_push_df: []
        - use_df:
            key: zhinenggui_code_team_sum_result
        - stash_push_df: []
        - stash_join_df:
            on: [汇总,book_month]
            how: inner
            drop_stash: true
        - push_dataset:
            key: zhinenggui_code_team_sum_result_result

        - use_df:      ## 计算合计数据
            key: zhinenggui_code_team_sum_result_result
        - fetch_cols:
            columns: [汇总,book_month,C-101,Q-1010101,Q-1010109,Q-101010406,Q-701,Q-201010101,Q-2010102,Q-20203,Q-20202,Q-110101,Q-11020101,Q-11020102,Q-110202,Q-20503,Q-30102,Q-30109,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-800,Q-30101,Q-30108,QS-10101,QS-2012,QS-20101,QS-202,QS-172,QS-11318,QS-130118,QS-30118,QS-1102012,QS-110201,QS-272,QS-3013,QS-301,QS-3023,QS-303,QS-10000]
        - df_groupby:
            by: 汇总
        - df_sum:
            column: [C-101,Q-1010101,Q-1010109,Q-101010406,Q-701,Q-201010101,Q-2010102,Q-20203,Q-20202,Q-110101,Q-11020101,Q-11020102,Q-110202,Q-20503,Q-30102,Q-30109,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-800,Q-30101,Q-30108,QS-10101,QS-2012,QS-20101,QS-202,QS-172,QS-11318,QS-130118,QS-30118,QS-1102012,QS-110201,QS-272,QS-3013,QS-301,QS-3023,QS-303,QS-10000]
        - df_reset_index: []
        - run_py:
            - |
              df['CPQS-172'] = (df['QS-172'] / df['QS-10101']).replace([np.inf, -np.inf, "", np.nan],0)
              df['CPQS-272'] = (df['QS-272'] / df['QS-10101']).replace([np.inf, -np.inf, "", np.nan],0)
              df['CPQS-10000'] = (df['QS-10000'] / df['QS-10101']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - add_cols:
            - book_month: 合计
        - stash_push_df: []
        - use_df:
            key: zhinenggui_code_team_sum_result_result
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - fetch_cols:
            columns: [book_month,C-101,QS-10101,Q-1010101,Q-1010109,Q-101010406,Q-701,QS-2012,QS-20101,Q-201010101,Q-2010102,QS-202,Q-20203,Q-20202,QS-172,CPQS-172,QS-11318,QS-130118,QS-30118,Q-110101,QS-1102012,QS-110201,Q-11020101,Q-11020102,Q-110202,Q-20503,QS-272,CPQS-272,QS-3013,QS-301,Q-30102,Q-30109,QS-3023,QS-303,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-800,QS-10000,CPQS-10000]
        - run_py:
            - |
              df = to_df(df).copy()
              df = df.set_index(['book_month'])
              df = df.transpose().reset_index(drop=False)
              result = to_dd(df)
        - df_rename_columns:
            - index: ac_code
        - sort_by_index:
            sort_list: [ C-101,QS-10101,Q-1010101,Q-1010109,Q-101010406,Q-701,QS-2012,QS-20101,Q-201010101,Q-2010102,QS-202,Q-20203,Q-20202,QS-172,CPQS-172,QS-11318,QS-130118,QS-30118,Q-110101,QS-1102012,QS-110201,Q-11020101,Q-11020102,Q-110202,Q-20503,QS-272,CPQS-272,QS-3013,QS-301,Q-30102,Q-30109,QS-3023,QS-303,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-800,QS-10000,CPQS-10000 ]
        - df_rename_columns:
            - ac_code: 指标编码
        - run_py:
            - |
              df = to_df(df).copy()
              df['指标名称'] = ['单量','主营业务收入','基础收入','激励收入','运营罚款收入','营业外收入','一线成本','一线服务费','全职工资','兼职','保险成本','社保公积金','工伤险','一线利润','一线利润率','二线成本','人员成本','二线服务费','社保公积金','办公管理费用','物资采购','低值易耗','固定资产','办公费用','场地租赁费','二线利润','二线利润率','城市费用/大区/项目','人员成本','工资','社会公积金','办公管理费用','物资采购','低值易耗品摊销','固定资产折旧','办公费','差旅费','招待费','团建福利费','营业外支出','利润','利润率']
              result = to_dd(df)
        - sort_by_columns:
            sort_list: [ 指标名称,指标编码,合计,1月,2月,3月,4月,5月,6月,7月,8月,9月,10月,11月,12月 ]


    - name: wangyueche_parameter_details
      sync_result: true
      cooks:
        - use_df:
            key: 22_budget_summary
        - df_select:
            - '[source] == @p1'
            - p1: budget_travel_online_car
        - add_cols:
            - 汇总: 汇总
        - push_dataset:
            key: wangyueche_code_team
        - use_df:
            key: wangyueche_code_team
        - run_py: ## 透视表
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="money",index=['汇总','code_id','book_month'],columns="ac_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - fetch_cols:
            columns: [汇总,code_id,book_month,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030304,Q-10304,Q-10305,Q-1030601,Q-1030602,Q-1030603,Q-1010207,Q-1010202,Q-1010203,Q-1010204,Q-10204,Q-10205,Q-701,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-21101,Q-2110201,Q-2110202,Q-2110203,Q-21103,Q-21104,Q-21105,Q-21106,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-2080201,Q-2080202,Q-2080301,Q-2080302,Q-2080303,Q-20804,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-21301,Q-21302,Q-21303,Q-21304,Q-21501,Q-21502,Q-214]
        - pad_cols:
            columns: [Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030304,Q-10304,Q-10305,Q-1030601,Q-1030602,Q-1030603,Q-1010207,Q-1010202,Q-1010203,Q-1010204,Q-10204,Q-10205,Q-701,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-21101,Q-2110201,Q-2110202,Q-2110203,Q-21103,Q-21104,Q-21105,Q-21106,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-2080201,Q-2080202,Q-2080301,Q-2080302,Q-2080303,Q-20804,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-21301,Q-21302,Q-21303,Q-21304,Q-21501,Q-21502,Q-214]
            default_value: 0
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['QS-10401'] = df['Q-1040101'] + df['Q-1040102'] + df['Q-1040103']
              df['QS-10402'] = df['Q-1040201'] + df['Q-1040202'] + df['Q-1040203']
              df['QS-10303'] = df['Q-1030301'] + df['Q-1030302'] + df['Q-1030304']
              df['QS-10306'] = df['Q-1030601'] + df['Q-1030602'] + df['Q-1030603']
              df['QS-10102'] = df['Q-1010207'] + df['Q-1010202'] + df['Q-1010203'] + df['Q-1010204']
              df['QS-102'] = df['Q-10204'] + df['Q-10205']
              df['QS-1014'] = df['QS-10401'] + df['QS-10402'] + df['QS-10303'] + df['Q-10304'] + df['Q-10305'] + df['QS-10306'] + df['QS-10102'] + df['QS-102']
              df['QS-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['QS-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['QS-21102'] = df['Q-2110201'] + df['Q-2110202'] + df['Q-2110203']
              df['QS-211'] = df['Q-21101'] + df['QS-21102'] + df['Q-21103'] + df['Q-21104'] + df['Q-21105'] + df['Q-21106']
              df['QS-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['QS-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['QS-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['QS-20805'] = df['Q-2080501'] + df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['QS-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df['QS-215'] = df['Q-21501'] + df['Q-21502']
              df['QS-208015'] = df['QS-20801'] + df['QS-20802'] + df['QS-20803'] + df['Q-20804'] + df['QS-20805']
              df['QS-2014'] = df['QS-20401'] + df['QS-20402'] + df['QS-211'] + df['QS-208015'] + df['QS-213'] + df['Q-214'] + df['QS-215']
              df['QS-172'] = df['QS-1014'] + df['Q-701'] - df['QS-2014']
              df['CPQS-172'] = (df['QS-172'] / df['QS-1014']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - stash_push_df: []
        - fetch_datasource:      # code匹配关联team，为后面计算team做准备
            datasource: qcode-biz-code-book
            dataset_cate: std
            columns: [code_id,team_id]
            empty_df_record:
              code_id: '-'
              team_id: '-'
        - stash_push_df: []
        - stash_join_df:
            on: code_id
            how: right
            drop_stash: true
        - push_dataset:     ## 所有code计算数据，关联对应 team_id 字段，备用
            key: wangyueche_code_team_sum

        - use_df:   ## 计算每个月code指标数据
            key: wangyueche_code_team_sum
        - df_groupby:
            by: [汇总,book_month]
        - df_sum:
            column: [Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030304,Q-10304,Q-10305,Q-1030601,Q-1030602,Q-1030603,Q-1010207,Q-1010202,Q-1010203,Q-1010204,Q-10204,Q-10205,Q-701,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-21101,Q-2110201,Q-2110202,Q-2110203,Q-21103,Q-21104,Q-21105,Q-21106,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-2080201,Q-2080202,Q-2080301,Q-2080302,Q-2080303,Q-20804,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-21301,Q-21302,Q-21303,Q-21304,Q-21501,Q-21502,Q-214,QS-1014,QS-10401,QS-10402,QS-10303,QS-10306,QS-10102,QS-102,QS-2014,QS-20401,QS-20402,QS-211,QS-21102,QS-208015,QS-20801,QS-20802,QS-20803,QS-20805,QS-213,QS-215,QS-172]
        - df_reset_index: []
        - run_py:
            - |
              df['CPQS-172'] = (df['QS-172'] / df['QS-1014']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - push_dataset:     ## 每个月  code  指标汇总数据
            key: wangyueche_code_team_sum_result

        - use_df:
            key: wangyueche_code_team
        - run_py: ## 透视表
            - |
              df = to_df(df).copy()
              df = df.pivot_table(values="money",index=['汇总','team_id','book_month'],columns="ac_code",aggfunc="sum").reset_index()
              result = to_dd(df)
        - fetch_cols:
            columns: [汇总,team_id,book_month,Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30209,Q-401,Q-402,Q-403,Q-500,Q-600,Q-700,Q-800,Q-900]
        - pad_cols:
            columns: [Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30209,Q-401,Q-402,Q-403,Q-500,Q-600,Q-700,Q-800,Q-900]
            default_value: 0
        - stash_push_df: []
        - use_df:       ## 关联team所对应的code数据
            key: wangyueche_code_team_sum
            columns: [汇总,team_id,book_month,QS-172,QS-1014]
        - df_groupby:
            by: [汇总,team_id,book_month]
        - df_sum:
            column: [QS-172,QS-1014]
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [汇总,team_id,book_month]
            how: right
            drop_stash: true
        - df_fillna:
            value: 0
        - run_py:
            - |
              df['QS-301'] = df['Q-30102'] + df['Q-30109']
              df['QS-302'] = df['Q-3020101'] + df['Q-3020102']
              df['QS-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30206'] + df['Q-30203'] + df['Q-30205'] + df['Q-30202'] + df['Q-30209']
              df['QS-3013'] = df['QS-301'] + df['QS-302'] + df['QS-303']
              df['QS-4013'] = df['Q-401'] + df['Q-402'] + df['Q-403']
              df['QS-10000'] = df['QS-172'] - df['QS-3013'] - df['QS-4013'] - df['Q-500'] + df['Q-600'] + df['Q-700'] - df['Q-800'] - df['Q-900']
              df['CPQS-10000'] = (df['QS-10000'] / df['QS-1014']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df

        - df_groupby:
            by: [汇总,book_month]
        - df_sum:
            column: [Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30209,Q-401,Q-402,Q-403,Q-500,Q-600,Q-700,Q-800,Q-900,QS-172,QS-1014,QS-3013,QS-301,QS-302,QS-303,QS-4013,QS-10000]
        - df_reset_index: []
        - run_py:
            - |
              df['CPQS-10000'] = (df['QS-10000'] / df['QS-1014']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - fetch_cols:
            columns: [汇总,book_month,Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30209,Q-401,Q-402,Q-403,Q-500,Q-600,Q-700,Q-800,Q-900,QS-3013,QS-301,QS-302,QS-303,QS-4013,QS-10000,CPQS-10000]
        - stash_push_df: []
        - use_df:
            key: wangyueche_code_team_sum_result
        - stash_push_df: []
        - stash_join_df:
            on: [汇总,book_month]
            how: inner
            drop_stash: true
        - push_dataset:
            key: wangyueche_code_team_sum_result_result

        - use_df:      ## 计算合计数据
            key: wangyueche_code_team_sum_result_result
        - fetch_cols:
            columns: [汇总,book_month,Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030304,Q-10304,Q-10305,Q-1030601,Q-1030602,Q-1030603,Q-1010207,Q-1010202,Q-1010203,Q-1010204,Q-10204,Q-10205,Q-701,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-21101,Q-2110201,Q-2110202,Q-2110203,Q-21103,Q-21104,Q-21105,Q-21106,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-2080201,Q-2080202,Q-2080301,Q-2080302,Q-2080303,Q-20804,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-21301,Q-21302,Q-21303,Q-21304,Q-21501,Q-21502,Q-214,Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30209,Q-401,Q-402,Q-403,Q-500,Q-600,Q-700,Q-800,Q-900,QS-1014,QS-10401,QS-10402,QS-10303,QS-10306,QS-10102,QS-102,QS-2014,QS-20401,QS-20402,QS-211,QS-21102,QS-208015,QS-20801,QS-20802,QS-20803,QS-20805,QS-213,QS-215,QS-172,QS-3013,QS-301,QS-302,QS-303,QS-4013,QS-10000]
        - df_groupby:
            by: 汇总
        - df_sum:
            column: [Q-1040101,Q-1040102,Q-1040103,Q-1040201,Q-1040202,Q-1040203,Q-1030301,Q-1030302,Q-1030304,Q-10304,Q-10305,Q-1030601,Q-1030602,Q-1030603,Q-1010207,Q-1010202,Q-1010203,Q-1010204,Q-10204,Q-10205,Q-701,Q-2040101,Q-2040102,Q-2040201,Q-2040202,Q-21101,Q-2110201,Q-2110202,Q-2110203,Q-21103,Q-21104,Q-21105,Q-21106,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,Q-2080201,Q-2080202,Q-2080301,Q-2080302,Q-2080303,Q-20804,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,Q-21301,Q-21302,Q-21303,Q-21304,Q-21501,Q-21502,Q-214,Q-30102,Q-30109,Q-3020101,Q-3020102,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30209,Q-401,Q-402,Q-403,Q-500,Q-600,Q-700,Q-800,Q-900,QS-1014,QS-10401,QS-10402,QS-10303,QS-10306,QS-10102,QS-102,QS-2014,QS-20401,QS-20402,QS-211,QS-21102,QS-208015,QS-20801,QS-20802,QS-20803,QS-20805,QS-213,QS-215,QS-172,QS-3013,QS-301,QS-302,QS-303,QS-4013,QS-10000]
        - df_reset_index: []
        - run_py:
            - |
              df['CPQS-172'] = (df['QS-172'] / df['QS-1014']).replace([np.inf, -np.inf, "", np.nan],0)
              df['CPQS-10000'] = (df['QS-10000'] / df['QS-1014']).replace([np.inf, -np.inf, "", np.nan],0)
              result = df
        - add_cols:
            - book_month: 合计
        - stash_push_df: []
        - use_df:
            key: wangyueche_code_team_sum_result_result
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - fetch_cols:
            columns: [book_month,QS-1014,QS-10401,Q-1040101,Q-1040102,Q-1040103,QS-10402,Q-1040201,Q-1040202,Q-1040203,QS-10303,Q-1030301,Q-1030302,Q-1030304,Q-10304,Q-10305,QS-10306,Q-1030601,Q-1030602,Q-1030603,QS-10102,Q-1010207,Q-1010202,Q-1010203,Q-1010204,QS-102,Q-10204,Q-10205,Q-701,QS-2014,QS-20401,Q-2040101,Q-2040102,QS-20402,Q-2040201,Q-2040202,QS-211,Q-21101,QS-21102,Q-2110201,Q-2110202,Q-2110203,Q-21103,Q-21104,Q-21105,Q-21106,QS-208015,QS-20801,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,QS-20802,Q-2080201,Q-2080202,QS-20803,Q-2080301,Q-2080302,Q-2080303,Q-20804,QS-20805,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,QS-213,Q-21301,Q-21302,Q-21303,Q-21304,QS-215,Q-21501,Q-21502,Q-214,QS-172,CPQS-172,QS-3013,QS-301,Q-30102,Q-30109,QS-302,Q-3020101,Q-3020102,QS-303,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30209,QS-4013,Q-401,Q-402,Q-403,Q-500,Q-600,Q-700,Q-800,Q-900,QS-10000,CPQS-10000]
        - run_py:
            - |
              df = to_df(df).copy()
              df = df.set_index(['book_month'])
              df = df.transpose().reset_index(drop=False)
              result = to_dd(df)
        - df_rename_columns:
            - index: ac_code
        - sort_by_index:
            sort_list: [ QS-1014,QS-10401,Q-1040101,Q-1040102,Q-1040103,QS-10402,Q-1040201,Q-1040202,Q-1040203,QS-10303,Q-1030301,Q-1030302,Q-1030304,Q-10304,Q-10305,QS-10306,Q-1030601,Q-1030602,Q-1030603,QS-10102,Q-1010207,Q-1010202,Q-1010203,Q-1010204,QS-102,Q-10204,Q-10205,Q-701,QS-2014,QS-20401,Q-2040101,Q-2040102,QS-20402,Q-2040201,Q-2040202,QS-211,Q-21101,QS-21102,Q-2110201,Q-2110202,Q-2110203,Q-21103,Q-21104,Q-21105,Q-21106,QS-208015,QS-20801,Q-2080101,Q-2080102,Q-2080103,Q-2080104,Q-2080105,Q-2080106,QS-20802,Q-2080201,Q-2080202,QS-20803,Q-2080301,Q-2080302,Q-2080303,Q-20804,QS-20805,Q-2080501,Q-2080502,Q-2080503,Q-2080504,Q-2080505,Q-2080506,QS-213,Q-21301,Q-21302,Q-21303,Q-21304,QS-215,Q-21501,Q-21502,Q-214,QS-172,CPQS-172,QS-3013,QS-301,Q-30102,Q-30109,QS-302,Q-3020101,Q-3020102,QS-303,Q-30301,Q-30302,Q-30206,Q-30203,Q-30205,Q-30202,Q-30209,QS-4013,Q-401,Q-402,Q-403,Q-500,Q-600,Q-700,Q-800,Q-900,QS-10000,CPQS-10000 ]
        - df_rename_columns:
            - ac_code: 指标编码
        - run_py:
            - |
              df = to_df(df).copy()
              df['指标名称'] = ['主营业务收入','经营租赁服务','整租','新租','退租','融资租赁服务','整租','新租','退租','运输服务收入','经租服务收入','加盟服务收入','货运服务收入','租车管理服务费','租车托管服务费','返点收入','维修返点','保险返点','平台返点','商业服务','平台补助收入','经纪服务','专业服务','其他服务','批发和零售业','二次销售收入','新车销售收入','营业外收入','主营业务成本','经租成本','存量','新增','融租成本','存量','新增','运输服务成本','车辆租金','服务成本','经租服务成本','加盟服务成本','货运服务成本','司机拉新成本','司机激活成本','司机运营成本','渠道返佣','维护成本','日常维护费','停车费','洗车费','挪车费','日常保养检测','交付整备费','上牌费','半年度保养费','车辆轮胎费','车辆半年度保养费','年度保养费用','车辆年检费','车辆保险费','车辆年度保养费','维修费','车辆附加费用','车辆GPS费用','车辆集中交付费用','车辆油电补费用','车辆管理费','车辆违章费','车辆杂费','佣金','平台交付','渠道销售','续租佣金','自营销售','销售成本','二次销售成本','新车销售成本','司机福利费','一线利润','一线利润率','管理费用','人员成本','工资','社保公积金','房屋费用','房屋租金','房屋其他费用','办公管理费用','低值易耗品摊销','固定资产折旧','办公费','差旅费','招待费','团建福利费','佣金','财务费用','利息支出','利息收入','手续费','资产减值损失','投资收益','营业外收入','营业外支出','所得税','利润','利润率']
              result = to_dd(df)
        - sort_by_columns:
            sort_list: [ 指标名称,指标编码,合计,1月,2月,3月,4月,5月,6月,7月,8月,9月,10月,11月,12月 ]
