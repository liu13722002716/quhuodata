cookbook: true
yk_daily_env:
  context_defaults:
    delay_compute: true
    sync_result_from_cluster: true
    play_on_dask_cluster: true
    platform_code: didi
    dask_client_set_as_default: true
    cluster_client_address: 'dask-scheduler-service.databus:8786'

  play:
    - name: yk_car_baseinfo           # 车辆基础信息表
      sync_result: true
      cooks:
        - fetch_dataset:
            template_code: rl_yk_day_16
            dataset_cate: raw
            datakit_pull_way: last_day
            ignore_null_error: true
            columns: [ '车型分类','城市','车牌号','车辆来源','车辆到期时间','应收租金','租金成本','关联code名称','车系','车型','code编码','VIN码（车架号）','车辆状态' ]
        - when_empty_fetch_dataset:
            template_code: rl_yk_day_16
            dataset_cate: raw
            datakit_pull_way: last_day
            month_offset: -1
            ignore_null_error: true
            columns: [ '车型分类','城市','车牌号','车辆来源','车辆到期时间','应收租金','租金成本','关联code名称','车系','车型','code编码','VIN码（车架号）','车辆状态' ]
            empty_df_record:
              车型分类: '-'
              城市: '-'
              车牌号: '-'
              车辆来源: '-'
              车辆到期时间: '1999-12-12'
              应收租金: 0.0
              租金成本: 0.0
              关联code名称: '-'
              车系: '-'
              车型: '-'
              code编码: '-'
              VIN码（车架号）: '-'
              车辆状态: '-'
        - df_rename_columns:
            - 车型分类: car_type_class
              城市: city
              车牌号: license_num
              车辆来源: car_source
              车辆到期时间: car_expire_time
              应收租金: receivable
              租金成本: rent_cost
              关联code名称: code_name
              车系: car_series
              车型: car_type
              code编码: code_encoder
        - stash_push_df: []
        - fetch_datasource:
            datasource: qcode-biz-code-book
            ignore_null_error: true
            empty_df_record:
              name: '-'
            rename:
              name: code_name
        - fetch_cols:
              columns: [ code_name,team_id ]

        - stash_push_df: []

        - stash_join_df:
            on: [ code_name ]
            how: right
            drop_stash: true

        - stash_push_df: []
        - fetch_datasource:
            datasource: qcode-biz-team-book
            ignore_null_error: true
            empty_df_record:
              Team_ID: '-'
              name: '-'
            rename:
              Team_ID: team_id
              name: team_name
        - fetch_cols:
              columns: [team_id,team_name]
        - stash_push_df: []
        - stash_join_df:
            on: [team_id]
            how: right
            drop_stash: true
        - add_cols:
            - supplier_name: 5ce296e5887d1f65604c5265
        - set_date_column:
            src_column: car_expire_time
        - drop_duplicates:
            subset: [ license_num,VIN码（车架号） ]
        - run_py:
            - |
              df = df[df['code_encoder'].notnull()]
              result = df


    - name: yk_car_revenue_info      # 车辆收入信息表
      sync_result: true
      cooks:
        - fetch_dataset:
            template_code: rl_yk_day_13
            dataset_cate: raw
            ignore_null_error: true
            columns: [ 交易金额,车辆VIN码,交易时间,交易名目,meta_day ]
        - when_empty_fetch_dataset:
            template_code: rl_yk_day_13
            dataset_cate: raw
            ignore_null_error: true
            month_offset: -1
            columns: [ 交易金额,车辆VIN码,交易时间,交易名目,meta_day ]
            empty_df_record:
              交易金额: 0.0
              车辆VIN码: '-'
              交易时间: '1999-12-12'
        - convert_month_day_time_column:
            src_column: 交易时间
            day_column: 交易时间
        - parse_time_span_cols:
            columns:
              - 交易时间
        - df_rename_columns:
            - 交易金额: received
              车辆VIN码: 车辆VIN码
              交易时间: time
        - run_py:
            - |
              df['车辆VIN码'] = df['车辆VIN码'].apply(lambda x:x.strip())
              df['交易名目'] = df['交易名目'].apply(lambda x:x.strip())
              result = df
        - df_select:
            - '[交易名目] == @v1'
            - v1: 租金
        - stash_push_df: [ ]
        - use_df:
            key: yk_car_baseinfo
            ignore_null_error: true
            columns: [ VIN码（车架号）,license_num ]
            empty_df_record:
              VIN码（车架号）: '-'
              车牌号: '-'
            rename:
              VIN码（车架号）: 车辆VIN码
        - run_py:
            - |
              df['车辆VIN码'] = df['车辆VIN码'].apply(lambda x:x.strip())
              result = df
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ 车辆VIN码 ]
            how: right
            drop_stash: true
        - fetch_cols:
            columns: [ license_num,received,time ]
        - stash_push_df: [ ]

        - fetch_dataset:
            template_code: rl_yk_day_14
            dataset_cate: raw
            ignore_null_error: true
            columns: [扣款金额,车牌号,扣款时间]
        - when_empty_fetch_dataset:
            template_code: rl_yk_day_14
            dataset_cate: raw
            ignore_null_error: true
            month_offset: -1
            columns: [扣款金额,车牌号,扣款时间]
            empty_df_record:
              扣款金额: 0.0
              车牌号: '-'
              扣款时间: '1999-12-12'
        - df_rename_columns:
            - 扣款金额: received
              车牌号: license_num
              扣款时间: time
        - set_date_column:
            src_column: time
        - stash_push_df: []

        - fetch_dataset:
            template_code: rl_yk_day_15
            dataset_cate: raw
            ignore_null_error: true
            columns: [收入,车牌号,日期]
        - when_empty_fetch_dataset:
            template_code: rl_yk_day_15
            dataset_cate: raw
            ignore_null_error: true
            month_offset: -1
            columns: [收入,车牌号,日期]
            empty_df_record:
              收入: 0.0
              车牌号: '-'
              日期: '1999-12-12'
        - df_rename_columns:
            - 收入: received
              车牌号: license_num
              日期: time
        - run_py:
            - |
              df = to_df(df).copy()
              df = df[df['license_num'].notnull()]
              df['time'] = pd.to_datetime(df['time'])
              df['time'] = pd.to_datetime(df['time'],format= '%Y-%m-%d')
              df['time'] = df['time'].map(lambda x:x.strftime('%Y-%m-%d'))#.str.strip('-').map(int)
              result = to_dd(df)
        - set_date_column:
            src_column: time
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - df_groupby:
            by: [ license_num,time ]
        - df_sum:
            column: [ received ]
        - df_reset_index: [ ]
        - stash_push_df: []

        - use_df:
            key: yk_car_baseinfo
            columns: [license_num,city,code_name,receivable,car_source,team_name,code_encoder]
        - stash_push_df: []
        - stash_join_df:
            on: [license_num]
            how: right
            drop_stash: true

        - add_cols:
            - supplier_name: 5ce296e5887d1f65604c5265

    - name: yk_financia_statement_code         #财报表code维度
      sync_result: true
      cooks:
        - fetch_datasource:
            datasource: qcode-finance-databook
            ignore_null_error: true
            empty_df_record:
              industry_id: 'chu_xing'
              platform_id: 'didi'
              ac_rule_kind: 'code'
              project_id: '5fef0eac968939d2ba0a9593'
              tc_name: '-'
              ac_code: '-'
              money: 0
        - df_select:
            - '([industry_id] == @v1) & ([platform_id] in @v2) & ([ac_rule_kind] == @v3) & ([project_id] == @v4)'
            - v1: chu_xing
              v2: [ didi ]
              v3: code
              v4: 5fef0eac968939d2ba0a9593
        - df_pivot_table: # 透视表
            values: money
            index: [ tc_name ]
            columns: [ ac_code ]
            aggfunc: sum
        - df_reset_index: [ ]
        - pad_cols:
            columns: [ 'Q-2040101','Q-2040102','Q-2040201','Q-2040202','Q-21101','Q-2110201','Q-2110202','Q-21201','Q-21202','Q-2080101','Q-2080102','Q-2080103','Q-2080104','Q-2080105','Q-2080106','Q-2080201','Q-2080202','Q-2080301','Q-2080302','Q-2080303','Q-20804','Q-2080501','Q-2080502','Q-2080503','Q-2080504','Q-2080505','Q-2080506','Q-21301','Q-21302','Q-21303','Q-21304','Q-214' ]
            default_value: 0.0
        - df_fillna:
            value: 0.0
        - run_py:
            - |
              df = to_df(df).copy()
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20805'] = df['Q-2080501'] + df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df = df.set_index(['tc_name'])
              df = df.transpose()
              df = df / 100
              df = df.reset_index(drop=False)
              df['科目编号'] = df['ac_code']
              df['ac_code'] = df['ac_code'].replace('Q-2040101','存量').replace('Q-20401','经租成本').replace('Q-2040102','新增').replace('Q-20402','融租成本').replace('Q-2040201','融租存量').replace('Q-2040202','融租新增').replace('Q-211','运输服务成本').replace('Q-21101','车辆租金').replace('Q-21102','服务成本').replace('Q-2110201','经租服务成本').replace('Q-2110202','加盟服务成本').replace('Q-212','平台服务费').replace('Q-21201','曹操平台服务费').replace('Q-21202','聚合平台服务费').replace('Q-208','维护成本').replace('Q-20801','日常维护费').replace('Q-2080101','停车费').replace('Q-2080102','洗车费').replace('Q-2080103','挪车费').replace('Q-2080104','日常保养检测').replace('Q-2080105','交付整备费').replace('Q-2080106','上牌费').replace('Q-20802','半年度保养费').replace('Q-2080201','车辆轮胎费').replace('Q-2080202','车辆半年度保养费').replace('Q-20803','年度保养费用').replace('Q-2080301','车辆年检费').replace('Q-2080302','车辆保险费').replace('Q-2080303','车辆年度保养费').replace('Q-20804','维修费').replace('Q-20805','车辆附加费用').replace('Q-2080501','车辆GPS费用').replace('Q-2080502','车辆集中交付费用').replace('Q-2080503','车辆油电补费用').replace('Q-2080504','车辆管理费').replace('Q-2080505','车辆违章费').replace('Q-2080506','车辆杂费').replace('Q-213','佣金').replace('Q-21301','平台交付').replace('Q-21302','渠道销售').replace('Q-21303','续租佣金').replace('Q-21304','自营销售').replace('Q-214','司机福利费')
              result = to_dd(df)
        - df_rename_columns:
            - ac_code: 科目名称

    - name: yk_financia_statement_team         #财报表team维度
      sync_result: true
      cooks:
        - fetch_datasource:
            datasource: qcode-finance-databook
            ignore_null_error: true
            empty_df_record:
              org_bu: 'Q-YK'
              ac_rule_kind: 'team'
              team_code: '-'
              ac_code: '-'
              money: 0
        - df_select:
            - '([org_bu] == @v1) & ([ac_rule_kind] == @v2)'
            - v1: Q-YK
              v2: team
        - df_pivot_table:
            values: money
            index: [ team_code ]
            columns: [ ac_code ]
            aggfunc: sum
        - df_reset_index: [ ]
        - pad_cols:
            columns: [ 'Q-3','Q-30101','Q-30102','Q-30103','Q-30104','Q-30105','Q-30106','Q-30107','Q-30108','Q-3020101','Q-3020102','Q-30202','Q-30203','Q-30204','Q-30205','Q-30206','Q-30207','Q-30208','Q-30209','Q-30210','Q-30301','Q-3030201','Q-3030202','Q-3030203','Q-30303' ]
            default_value: 0.0
        - df_fillna:
            value: 0.0
        - run_py:
            - |
              df = to_df(df).copy()
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Q-3'] = df['Q-301'] + df['Q-30101'] + df['Q-30108'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-302'] + df['Q-30201'] + df['Q-3020101'] + df['Q-3020102'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210'] + df['Q-303'] + df['Q-30301'] + df['Q-30302'] + df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203'] + df['Q-30303']
              df = df.set_index(['team_code'])
              df = df.transpose()
              df = df / 100
              df = df.reset_index(drop=False)
              df['科目编号'] = df['ac_code']
              df['ac_code'] = df['ac_code'].replace('Q-3','管理费用').replace('Q-301','工资社保费用').replace('Q-30101','二线服务费（含BD)').replace('Q-30108','三线服务费').replace('Q-30102','工资').replace('Q-30103','社会保险费').replace('Q-30104','公积金').replace('Q-30105','商业补充保险').replace('Q-30106','残保金').replace('Q-30107','工会经费和职工教育经费').replace('Q-302','办公管理费用').replace('Q-30201','房屋费用').replace('Q-3020101','房屋租金').replace('Q-3020102','房屋其他费用').replace('Q-30202','团建福利费').replace('Q-30203','差旅费').replace('Q-30204','市内交通费').replace('Q-30205','招待费').replace('Q-30206','办公费').replace('Q-30207','咨询费').replace('Q-30208','印花税').replace('Q-30209','佣金').replace('Q-30210','房产税').replace('Q-303','物资采购费用').replace('Q-30301','低值易耗品摊销').replace('Q-30302','固定资产折旧').replace('Q-30303','无形资产摊销').replace('Q-3030201','电子设备').replace('Q-3030202','办公家具').replace('Q-3030203','运输工具')
              result = to_dd(df)
        - df_select:
            - '[科目编号] in @v1'
            - v1: [ 'Q-3','Q-301','Q-30101','Q-30102','Q-30103','Q-30104','Q-30105','Q-30106','Q-30107','Q-30108','Q-302','Q-30201','Q-3020101','Q-3020102','Q-30202','Q-30203','Q-30204','Q-30205','Q-30206','Q-30207','Q-30208','Q-30209','Q-30210','Q-303','Q-30301','Q-30302','Q-3030201','Q-3030202','Q-3030203','Q-30303' ]
        - df_rename_columns:
            - ac_code: 科目名称


    - name: yk_financia_statement_city              #财报表城市维度
      sync_result: true
      cooks:
        - fetch_datasource:
            datasource: qcode-finance-databook
            ignore_null_error: true
            empty_df_record:
              industry_id: 'chu_xing'
              platform_id: 'didi'
              ac_rule_kind: 'code'
              project_id: '5fef0eac968939d2ba0a9593'
              city_name: '-'
              ac_code: '-'
              money: 0
        - df_select:
            - '([industry_id] == @v1) & ([platform_id] in @v2) & ([ac_rule_kind] == @v3) & ([project_id] == @v4)'
            - v1: chu_xing
              v2: [ didi ]
              v3: code
              v4: 5fef0eac968939d2ba0a9593
        - df_pivot_table: # 透视表
            values: money
            index: [ city_name ]
            columns: [ ac_code ]
            aggfunc: sum
        - df_reset_index: [ ]
        - pad_cols:
            columns: [ 'Q-2040101','Q-2040102','Q-2040201','Q-2040202','Q-21101','Q-2110201','Q-2110202','Q-21201','Q-21202','Q-2080101','Q-2080102','Q-2080103','Q-2080104','Q-2080105','Q-2080106','Q-2080201','Q-2080202','Q-2080301','Q-2080302','Q-2080303','Q-20804','Q-2080501','Q-2080502','Q-2080503','Q-2080504','Q-2080505','Q-2080506','Q-21301','Q-21302','Q-21303','Q-21304','Q-214' ]
            default_value: 0.0
        - df_fillna:
            value: 0.0
        - run_py:
            - |
              df = to_df(df).copy()
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20805'] = df['Q-2080501'] + df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df = df.set_index(['city_name'])
              df = df.transpose()
              df = df / 100
              df = df.reset_index(drop=False)
              df['科目编号'] = df['ac_code']
              df['ac_code'] = df['ac_code'].replace('Q-2040101','存量').replace('Q-20401','经租成本').replace('Q-2040102','新增').replace('Q-20402','融租成本').replace('Q-2040201','融租存量').replace('Q-2040202','融租新增').replace('Q-211','运输服务成本').replace('Q-21101','车辆租金').replace('Q-21102','服务成本').replace('Q-2110201','经租服务成本').replace('Q-2110202','加盟服务成本').replace('Q-212','平台服务费').replace('Q-21201','曹操平台服务费').replace('Q-21202','聚合平台服务费').replace('Q-208','维护成本').replace('Q-20801','日常维护费').replace('Q-2080101','停车费').replace('Q-2080102','洗车费').replace('Q-2080103','挪车费').replace('Q-2080104','日常保养检测').replace('Q-2080105','交付整备费').replace('Q-2080106','上牌费').replace('Q-20802','半年度保养费').replace('Q-2080201','车辆轮胎费').replace('Q-2080202','车辆半年度保养费').replace('Q-20803','年度保养费用').replace('Q-2080301','车辆年检费').replace('Q-2080302','车辆保险费').replace('Q-2080303','车辆年度保养费').replace('Q-20804','维修费').replace('Q-20805','车辆附加费用').replace('Q-2080501','车辆GPS费用').replace('Q-2080502','车辆集中交付费用').replace('Q-2080503','车辆油电补费用').replace('Q-2080504','车辆管理费').replace('Q-2080505','车辆违章费').replace('Q-2080506','车辆杂费').replace('Q-213','佣金').replace('Q-21301','平台交付').replace('Q-21302','渠道销售').replace('Q-21303','续租佣金').replace('Q-21304','自营销售').replace('Q-214','司机福利费')
              result = to_dd(df)
        - df_rename_columns:
            - ac_code: 科目名称


    - name: yk_financia_statement_supplier         #财报表主体维度
      sync_result: true
      cooks:
        - fetch_datasource:
            datasource: qcode-finance-databook
            ignore_null_error: true
            empty_df_record:
              industry_id: 'chu_xing'
              platform_id: 'didi'
              ac_rule_kind: 'code'
              project_id: '5fef0eac968939d2ba0a9593'
              city_name: '-'
              ac_code: '-'
              money: 0
              supplier_name: '-'
        - df_select:
            - '([industry_id] == @v1) & ([platform_id] in @v2) & ([ac_rule_kind] == @v3) & ([project_id] == @v4)'
            - v1: chu_xing
              v2: [ didi ]
              v3: code
              v4: 5fef0eac968939d2ba0a9593
        - df_pivot_table: # 透视表
            values: money
            index: [ supplier_name ]
            columns: [ ac_code ]
            aggfunc: sum
        - df_reset_index: [ ]
        - pad_cols:
            columns: [ 'Q-2040101','Q-2040102','Q-2040201','Q-2040202','Q-21101','Q-2110201','Q-2110202','Q-21201','Q-21202','Q-2080101','Q-2080102','Q-2080103','Q-2080104','Q-2080105','Q-2080106','Q-2080201','Q-2080202','Q-2080301','Q-2080302','Q-2080303','Q-20804','Q-2080501','Q-2080502','Q-2080503','Q-2080504','Q-2080505','Q-2080506','Q-21301','Q-21302','Q-21303','Q-21304','Q-214' ]
            default_value: 0.0
        - df_fillna:
            value: 0.0
        - run_py:
            - |
              df = to_df(df).copy()
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20805'] = df['Q-2080501'] + df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df = df.set_index(['supplier_name'])
              df = df.transpose()
              df = df / 100
              df = df.reset_index(drop=False)
              df['科目编号'] = df['ac_code']
              df['ac_code'] = df['ac_code'].replace('Q-2040101','存量').replace('Q-20401','经租成本').replace('Q-2040102','新增').replace('Q-20402','融租成本').replace('Q-2040201','融租存量').replace('Q-2040202','融租新增').replace('Q-211','运输服务成本').replace('Q-21101','车辆租金').replace('Q-21102','服务成本').replace('Q-2110201','经租服务成本').replace('Q-2110202','加盟服务成本').replace('Q-212','平台服务费').replace('Q-21201','曹操平台服务费').replace('Q-21202','聚合平台服务费').replace('Q-208','维护成本').replace('Q-20801','日常维护费').replace('Q-2080101','停车费').replace('Q-2080102','洗车费').replace('Q-2080103','挪车费').replace('Q-2080104','日常保养检测').replace('Q-2080105','交付整备费').replace('Q-2080106','上牌费').replace('Q-20802','半年度保养费').replace('Q-2080201','车辆轮胎费').replace('Q-2080202','车辆半年度保养费').replace('Q-20803','年度保养费用').replace('Q-2080301','车辆年检费').replace('Q-2080302','车辆保险费').replace('Q-2080303','车辆年度保养费').replace('Q-20804','维修费').replace('Q-20805','车辆附加费用').replace('Q-2080501','车辆GPS费用').replace('Q-2080502','车辆集中交付费用').replace('Q-2080503','车辆油电补费用').replace('Q-2080504','车辆管理费').replace('Q-2080505','车辆违章费').replace('Q-2080506','车辆杂费').replace('Q-213','佣金').replace('Q-21301','平台交付').replace('Q-21302','渠道销售').replace('Q-21303','续租佣金').replace('Q-21304','自营销售').replace('Q-214','司机福利费')
              result = to_dd(df)
        - df_rename_columns:
            - ac_code: 科目名称


    - name: yk_profit_detail       #盈亏模块
      sync_result: true
      cooks:
        - use_df:               # code维度
            key: yk_car_revenue_info
            columns: [ received,code_name,city,team_name ]
        - df_groupby:
            by: [ code_name,city,team_name ]
        - df_sum:
            column: [ received ]
        - df_reset_index: [ ]
        - df_rename_columns:
            - received: received_month
        - stash_push_df: [ ]
        - use_df:
            key: yk_car_baseinfo
            columns: [ code_name,team_name,city ]
        - drop_duplicates:
            subset: [ code_name,team_name ]
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ code_name,team_name,city ]
            how: left
            drop_stash: ture
        - add_cols:
            - cost_month: 0.0
              manager_cost_month: 0.0
              profit: 0.0
              rental_rate: 0.0
              thaw_rental_rate: 0.0
              transport_service_rate: 0.0
              platform_service_rate: 0.0
              maintenance_rate: 0.0
              commisions_rate: 0.0
              driver_welfare_rate: 0.0
              code_encoder: '-'

        - run_py:
            - |
              df['received_month'] = df['received_month'].fillna(0)
              result = df
        - push_dataset:
            key: base_code

        - fetch_datasource:
            datasource: qcode-finance-databook
            ignore_null_error: true
            empty_df_record:
              industry_id: 'chu_xing'
              platform_id: 'didi'
              ac_rule_kind: 'code'
              project_id: '5fef0eac968939d2ba0a9593'
              city_name: '-'
              ac_code: '-'
              money: 0
              tc_name: '-'
        - df_select:
            - '([industry_id] == @v1) & ([platform_id] in @v2) & ([ac_rule_kind] == @v3) & ([project_id] == @v4)'
            - v1: chu_xing
              v2: [ didi ]
              v3: code
              v4: 5fef0eac968939d2ba0a9593
        - df_pivot_table: # 透视表
            values: money
            index: [ tc_name ]
            columns: [ ac_code ]
            aggfunc: sum
        - pad_cols:
            columns: [ 'Q-2040101','Q-2040102','Q-2040201','Q-2040202','Q-21101','Q-2110201','Q-2110202','Q-21201','Q-21202','Q-2080101','Q-2080102','Q-2080103','Q-2080104','Q-2080105','Q-2080106','Q-2080201','Q-2080202','Q-2080301','Q-2080302','Q-2080303','Q-20804','Q-2080501','Q-2080502','Q-2080503','Q-2080504','Q-2080505','Q-2080506','Q-21301','Q-21302','Q-21303','Q-21304','Q-214' ]
            default_value: 0.0
        - df_fillna:
            value: 0.0
        - run_py:
            - |
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20805'] = df['Q-2080501'] + df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df = df / 100
              result = df
        - df_reset_index: [ ]
        - fetch_cols:
            columns: [ tc_name,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214 ]
        - df_rename_columns:
            - tc_name: code_name
              Q-20401: 经租成本
              Q-20402: 融租成本
              Q-211: 运输服务成本
              Q-212: 平台服务费
              Q-208: 维护成本
              Q-213: 佣金
              Q-214: 司机福利费

        - df_rename_columns:
            - 经租成本: rental_cost
              融租成本: thaw_rental_cost
              运输服务成本: transport_service_cost
              平台服务费: platform_service_cost
              维护成本: maintenance_cost
              佣金: commisions
              司机福利费: driver_welfare_cost
        - push_dataset:
            key: caibao_code

        - fetch_datasource:
            datasource: qcode-biz-code-book
            ignore_null_error: true
            empty_df_record:
              name: '-'
              biz_meta.city_code: '-'
            rename:
              name: code_name
              biz_meta.city_code: city_code
        - fetch_cols:
            columns: [ code_name,team_id,city_code ]

        - stash_push_df: [ ]

        - fetch_datasource:
            datasource: qcode-biz-team-book
            ignore_null_error: true
            empty_df_record:
              Team_ID: '-'
              name: '-'
            rename:
              Team_ID: team_id
              name: team_name
        - fetch_cols:
            columns: [ team_id,team_name ]
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ team_id ]
            how: right
            drop_stash: true
        - fetch_cols:
            columns: [ team_name,code_name,city_code ]
        - push_dataset:
            key: code_team_table

        - use_df:
            key: caibao_code
        - stash_push_df: [ ]
        - use_df:
            key: base_code
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ code_name ]
            how: outer
            drop_stash: true
        - stash_push_df: [ ]

        - use_df:
            key: code_team_table
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ code_name ]
            how: right
            drop_stash: true
        - add_cols:
            - dimension: 'code'
              supplier_name: 5ce296e5887d1f65604c5265
        - fetch_cols:
            columns: [ code_name,team_name,city_code,city,received_month,code_encoder,commisions_rate,cost_month,driver_welfare_rate,maintenance_rate,manager_cost_month,platform_service_rate,profit,rental_rate,thaw_rental_rate,transport_service_rate,driver_welfare_cost,thaw_rental_cost,commisions,maintenance_cost,platform_service_cost,transport_service_cost,rental_cost,dimension,supplier_name ]
        - df_fillna:
            columns: [ received_month,commisions_rate,cost_month,driver_welfare_rate,maintenance_rate,manager_cost_month,platform_service_rate,profit,rental_rate,thaw_rental_rate,transport_service_rate,driver_welfare_cost,thaw_rental_cost,commisions,maintenance_cost,platform_service_cost,transport_service_cost,rental_cost ]
            value: 0.0
        - df_eval:
            - |
              [cost_month] = [rental_cost] + [thaw_rental_cost] + [transport_service_cost] + [platform_service_cost] + [maintenance_cost] + [commisions] + [driver_welfare_cost]
              [profit] = [received_month] - [manager_cost_month] - [cost_month]
              [rental_rate] = [rental_cost] / [cost_month]
              [thaw_rental_rate] = [thaw_rental_cost] / [cost_month]
              [transport_service_rate] = [transport_service_cost] / [cost_month]
              [platform_service_rate] = [platform_service_cost] / [cost_month]
              [maintenance_rate] = [maintenance_cost] / [cost_month]
              [commisions_rate] = [commisions] / [cost_month]
              [driver_welfare_rate] = [driver_welfare_cost] / [cost_month]


        - push_dataset:
            key: code_yingkui


        - use_df:
            key: code_yingkui

        - df_groupby:
            by: [ city_code ]
        - df_sum:
            column: [ manager_cost_month,received_month,transport_service_cost,platform_service_cost,maintenance_cost,commisions,driver_welfare_cost,thaw_rental_cost,rental_cost ]
        - df_reset_index: [ ]

        - add_cols:
            - dimension: 'city'
              supplier_name: 5ce296e5887d1f65604c5265
              team_name: '-'
              code_encoder: '-'
              code_name: '-'

        - df_eval:
            - |
              [cost_month] = [rental_cost] + [thaw_rental_cost] + [transport_service_cost] + [platform_service_cost] + [maintenance_cost] + [commisions] + [driver_welfare_cost]
              [profit] = [received_month] - [manager_cost_month] - [cost_month]
              [rental_rate] = [rental_cost] / [cost_month]
              [thaw_rental_rate] = [thaw_rental_cost] / [cost_month]
              [transport_service_rate] = [transport_service_cost] / [cost_month]
              [platform_service_rate] = [platform_service_cost] / [cost_month]
              [maintenance_rate] = [maintenance_cost] / [cost_month]
              [commisions_rate] = [commisions] / [cost_month]
              [driver_welfare_rate] = [driver_welfare_cost] / [cost_month]

        - push_dataset:
            key: city_yingkui


        - use_df:
            key: code_yingkui

        - fetch_cols:
            columns: [ rental_cost,thaw_rental_cost,transport_service_cost,platform_service_cost,maintenance_cost,commisions,driver_welfare_cost,team_name ]
        - df_groupby:
            by: [ team_name ]
        - df_sum:
            column: [ driver_welfare_cost,rental_cost,maintenance_cost,transport_service_cost,commisions,platform_service_cost,thaw_rental_cost ]
        - df_reset_index: [ ]
        - stash_push_df: [ ]

        - fetch_datasource:
            datasource: qcode-finance-databook
            ignore_null_error: true
            empty_df_record:
              org_bu: 'Q-YK'
              ac_rule_kind: 'team'
              team_code: '-'
              ac_code: '-'
              money: 0
        - df_select:
            - '([org_bu] == @v1) & ([ac_rule_kind] == @v2)'
            - v1: Q-YK
              v2: team
        - df_pivot_table:
            values: money
            index: [ team_code ]
            columns: [ ac_code ]
            aggfunc: sum
        - pad_cols:
            columns: [ 'Q-3','Q-30101','Q-30102','Q-30103','Q-30104','Q-30105','Q-30106','Q-30107','Q-30108','Q-3020101','Q-3020102','Q-30202','Q-30203','Q-30204','Q-30205','Q-30206','Q-30207','Q-30208','Q-30209','Q-30210','Q-30301','Q-3030201','Q-3030202','Q-3030203','Q-30303' ]
            default_value: 0.0
        - df_fillna:
            value: 0.0
        - run_py:
            - |
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Q-3'] = df['Q-301'] + df['Q-30101'] + df['Q-30108'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-302'] + df['Q-30201'] + df['Q-3020101'] + df['Q-3020102'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210'] + df['Q-303'] + df['Q-30301'] + df['Q-30302'] + df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203'] + df['Q-30303']
              df = df / 100
              result = df
        - df_reset_index: [ ]
        - fetch_cols:
            columns: [ team_code,Q-3 ]
        - df_rename_columns:
            - team_code: team_name
              Q-3: manager_cost_month
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ team_name ]
            how: right
            drop_stash: true

        - stash_push_df: [ ]
        - use_df:
            key: yk_car_revenue_info
            columns: [ received,team_name ]
        - df_groupby:
            by: [ team_name ]
        - df_sum:
            column: [ received ]
        - df_reset_index: [ ]
        - df_rename_columns:
            - received: received_month
        - add_cols:
            - cost_month: 0.0
              profit: 0.0
              rental_rate: 0.0
              thaw_rental_rate: 0.0
              transport_service_rate: 0.0
              platform_service_rate: 0.0
              maintenance_rate: 0.0
              commisions_rate: 0.0
              driver_welfare_rate: 0.0
              code_name: '-'
              code_encoder: '-'
        - stash_push_df: [ ]

        - stash_join_df:
            on: [ team_name ]
            how: right
            drop_stash: true
        - add_cols:
            - dimension: 'team'
              supplier_name: 5ce296e5887d1f65604c5265
        - df_fillna:
            columns: [ received_month,commisions_rate,cost_month,driver_welfare_rate,maintenance_rate,manager_cost_month,platform_service_rate,profit,rental_rate,thaw_rental_rate,transport_service_rate,driver_welfare_cost,thaw_rental_cost,commisions,maintenance_cost,platform_service_cost,transport_service_cost,rental_cost ]
            value: 0.0
        - fetch_cols:
            columns: [team_name,received_month,code_encoder,code_name,commisions_rate,cost_month,driver_welfare_rate,maintenance_rate,platform_service_rate,profit,rental_rate,thaw_rental_rate,transport_service_rate,manager_cost_month,driver_welfare_cost,rental_cost,maintenance_cost,transport_service_cost,commisions,platform_service_cost,thaw_rental_cost,dimension,supplier_name]
        - df_eval:
            - |
              [cost_month] = [rental_cost] + [thaw_rental_cost] + [transport_service_cost] + [platform_service_cost] + [maintenance_cost] + [commisions] + [driver_welfare_cost]
              [profit] = [received_month] - [manager_cost_month] - [cost_month]
              [rental_rate] = [rental_cost] / [cost_month]
              [thaw_rental_rate] = [thaw_rental_cost] / [cost_month]
              [transport_service_rate] = [transport_service_cost] / [cost_month]
              [platform_service_rate] = [platform_service_cost] / [cost_month]
              [maintenance_rate] = [maintenance_cost] / [cost_month]
              [commisions_rate] = [commisions] / [cost_month]
              [driver_welfare_rate] = [driver_welfare_cost] / [cost_month]

        - stash_push_df: [ ]
        - use_df:
            key: code_team_table
            columns: [ team_name,city_code ]
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ team_name ]
            how: right
            drop_stash: true
        - drop_duplicates:
            subset: team_name
        - push_dataset:
            key: team_yingkui


        - use_df:               #主体维度
            key: team_yingkui
            columns: [ manager_cost_month,supplier_name,received_month ]
        - df_groupby:
            by: [ supplier_name ]
        - df_sum:
            column: [ manager_cost_month,received_month ]
        - df_reset_index: [ ]
        - add_cols:
            - cost_month: 0.0
              profit: 0.0
              rental_rate: 0.0
              thaw_rental_rate: 0.0
              transport_service_rate: 0.0
              platform_service_rate: 0.0
              maintenance_rate: 0.0
              commisions_rate: 0.0
              driver_welfare_rate: 0.0
              city: '-'
              code_name: '-'
              code_encoder: '-'
              dimension: '主体'
              team_name: '-'
        - stash_push_df: [ ]

        - use_df:
            key: code_yingkui
        - df_groupby:
            by: [ supplier_name ]
        - df_sum:
            column: [ driver_welfare_cost,rental_cost,maintenance_cost,transport_service_cost,commisions,platform_service_cost,thaw_rental_cost ]
        - df_reset_index: [ ]
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ supplier_name ]
            how: right
            drop_stash: true

        - df_eval:
            - |
              [cost_month] = [rental_cost] + [thaw_rental_cost] + [transport_service_cost] + [platform_service_cost] + [maintenance_cost] + [commisions] + [driver_welfare_cost]
              [profit] = [received_month] - [manager_cost_month] - [cost_month]
              [rental_rate] = [rental_cost] / [cost_month]
              [thaw_rental_rate] = [thaw_rental_cost] / [cost_month]
              [transport_service_rate] = [transport_service_cost] / [cost_month]
              [platform_service_rate] = [platform_service_cost] / [cost_month]
              [maintenance_rate] = [maintenance_cost] / [cost_month]
              [commisions_rate] = [commisions] / [cost_month]
              [driver_welfare_rate] = [driver_welfare_cost] / [cost_month]

        - stash_push_df: [ ]
        - use_df:
            key: code_yingkui
        - stash_push_df: [ ]
        - use_df:
            key: team_yingkui
        - stash_push_df: [ ]
        - use_df:
            key: city_yingkui
        - stash_push_df: [ ]
        - stash_concat_df:
            drop_stash: true


    - name: yk_car_distributioninfo       #车辆分布明细
      sync_result: true
      cooks:
        - use_df:
            key: yk_car_baseinfo
            columns: [ city,code_name,car_source,car_type_class,license_num,车辆状态 ]
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset:
              - license_num
        - df_groupby:
            by: [ code_name ]
        - df_count:
            column: license_num
            rename: cat_num
        - df_reset_index: [ ]


        - stash_push_df: [ ]
        - use_df:
            key: yk_car_revenue_info
            columns: [ city,code_name,license_num ]
        - drop_duplicates:
            subset:
              - license_num
        - df_groupby:
            by: [ code_name ]
        - df_count:
            column: license_num
            rename: rent_num
        - df_reset_index: [ ]


        - stash_push_df: [ ]
        - stash_join_df:
            on: [ code_name ]
            how: right
            drop_stash: true
        - df_fillna:
            columns: [ rent_num ]
            value: 0
        - stash_push_df: [ ]
        - use_df:
            key: yk_car_baseinfo
            columns: [ city,code_name,car_source,car_type_class ]
        - drop_duplicates:
            subset: code_name
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ code_name ]
            how: right
            drop_stash: true


    - name: yk_assets_detail       #资产分布
      sync_result: true
      cooks:
        - use_df: #主体维度
            key: yk_car_baseinfo
            columns: [ license_num,车辆状态 ]
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset:
              - license_num
        - add_cols:
            - dimension: '主体'
        - df_groupby:
            by: [ dimension ]
        - df_count:
            column: license_num
            rename: car_num
        - df_reset_index: [ ]
        - add_cols:
            - supplier_name: 5ce296e5887d1f65604c5265
        - stash_push_df: [ ]

        - use_df:
            key: yk_car_baseinfo
            columns: [ car_source,license_num,车辆状态 ]
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset:
              - license_num
        - df_select:
            - '[car_source] == @v1'
            - v1: 自采
        - add_cols:
            - dimension: '主体'
        - df_groupby:
            by: [ dimension ]
        - df_count:
            column: license_num
            rename: purchase_num
        - df_reset_index: [ ]
        - add_cols:
            - rent_num: 0.0
              city: '-'
              code_name: '-'
              numrate: 0.0
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ dimension ]
            how: left
            drop_stash: true
        - run_py:
            - |
              df['rent_num'] = df['car_num'] - df['purchase_num']
              df['numrate'] = df['car_num'] / df['car_num'].sum()
              result = df

        - push_dataset:
            key: zichan_sup

        - use_df:
            key: yk_car_baseinfo           #城市维度
            columns: [ license_num,city,车辆状态 ]
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset: license_num
        - df_groupby:
            by: [ city ]
        - df_count:
            column: license_num
            rename: car_num
        - df_reset_index: [ ]
        - add_cols:
            - dimension: '城市'
              supplier_name: 5ce296e5887d1f65604c5265
        - stash_push_df: [ ]

        - use_df:
            key: yk_car_baseinfo
            columns: [ car_source,license_num,city,车辆状态 ]
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset:
              - license_num
        - df_select:
            - '[car_source] == @v1'
            - v1: 自采
        - df_groupby:
            by: [ city ]
        - df_count:
            column: license_num
            rename: purchase_num
        - df_reset_index: [ ]
        - add_cols:
            - rent_num: 0.0
              code_name: '-'
              numrate: 0.0
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ city ]
            how: right
            drop_stash: true
        - run_py:
            - |
              df['purchase_num'] = df['purchase_num'].fillna(0)
              df['rent_num'] = df['car_num'] - df['purchase_num']
              df['numrate'] = df['car_num'] / df['car_num'].sum()
              result = df


        - push_dataset:
            key: zichan_city

#code维度
        - use_df:
            key: yk_car_baseinfo
            columns: [ license_num,city,code_name,车辆状态 ]
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset:
              - license_num
        - df_groupby:
            by: [ city,code_name ]
        - df_count:
            column: license_num
            rename: car_num
        - df_reset_index: [ ]
        - add_cols:
            - dimension: 'code'
              supplier_name: 5ce296e5887d1f65604c5265
        - stash_push_df: [ ]

        - use_df:
            key: yk_car_baseinfo
            columns: [ car_source,license_num,code_name,车辆状态 ]
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset:
              - license_num
        - df_select:
            - '[car_source] == @v1'
            - v1: 自采
        - df_groupby:
            by: [ code_name ]
        - df_count:
            column: license_num
            rename: purchase_num
        - df_reset_index: [ ]
        - add_cols:
            - rent_num: 0.0
              numrate: 0.0
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ code_name ]
            how: right
            drop_stash: true
        - stash_push_df: [ ]
        - use_df:
            key: zichan_city
            columns: [ city,car_num ]
        - df_rename_columns:
            - car_num: car_num_city
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ city ]
            how: right
            drop_stash: true
        - run_py:
            - |
              df['purchase_num'] = df['purchase_num'].fillna(0)
              df['rent_num'] = df['car_num'] - df['purchase_num']
              df['numrate'] = df['car_num'] / df['car_num_city']
              result = df

        - fetch_cols:
            columns: [ city,code_name,purchase_num,numrate,rent_num,car_num,dimension,supplier ]



        - stash_push_df: [ ]
        - use_df:
            key: zichan_sup
        - stash_push_df: [ ]
        - use_df:
            key: zichan_city
        - stash_push_df: [ ]
        - stash_concat_df:
            drop_stash: true

    - name: car_num_list                         #车型台数
      sync_result: true
      cooks:
        - use_df:                                     #城市维度
            key: yk_car_baseinfo
            columns: [ city,code_name,car_source,car_type,license_num,车辆状态 ]
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'

        - drop_duplicates:
            subset: license_num
        - df_groupby:
            by: [ city,car_type,car_source ]
        - df_count:
            column: [ license_num ]
        - df_reset_index: [ ]
        - df_rename_columns:
            - license_num: car_num
        - add_cols:
            - dimension: '城市'
              code_name: '-'
        - stash_push_df: [ ]

        - use_df:                                       #code维度
            key: yk_car_baseinfo
            columns: [ city,code_name,car_source,car_type,license_num,车辆状态 ]
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset: license_num
        - df_groupby:
            by: [ city,code_name,car_type,car_source ]
        - df_count:
            column: [ license_num ]
        - df_reset_index: [ ]
        - df_rename_columns:
            - license_num: car_num
        - add_cols:
            - dimension: 'code'
        - stash_push_df: [ ]

        - stash_concat_df:
            drop_stash: true




    - name: jurisdiction                       #权限表
      sync_result: true
      cooks:
        - fetch_datasource:
            datasource: qcode-biz-code-book
            ignore_null_error: true
            empty_df_record:
              biz_meta.supplier_id: '-'
              biz_meta.project_id: '-'
              biz_meta.platform_id: '-'
              biz_meta.city_code: '-'
            query:
              biz_meta.supplier_id: 5ce296e5887d1f65604c5265
              biz_meta.project_id: 5fef0eac968939d2ba0a9593
              biz_meta.platform_id: didi
            rename:
              biz_meta.supplier_id: supplier_id
              biz_meta.platform_id: platform_code
              biz_meta.city_code: city_code
        - fetch_cols:
            columns: [ supplier_id,platform_code,city_code ]





###收入模块1
    - name: yk_revenue_rent_detail
      sync_result: true
      cooks:
        - use_df:
            key: yk_car_revenue_info
            ignore_null_error: true
            columns: [ received,receivable,license_num,code_encoder,city,time,code_name ]
            empty_df_record:
              received: 0.0
              receivable: 0.0
              license_num: '-'
              code_encoder: '-'
              city: '-'
              time: '9999-04-14'
        - add_cols:
            - supplier_name: 5ce296e5887d1f65604c5265
        - push_dataset:
            key: yk_car_revenue_info_min
        #获取车辆基础信息表所需字段
        - use_df:
            key: yk_car_baseinfo
            ignore_null_error: true
            columns: [ receivable,license_num,code_encoder,city,code_name ]
            empty_df_record:
              receivable: 0.0
              license_num: '-'
              code_encoder: '-'
              city: '-'
              code_name: '-'
        - add_cols:
            - supplier_name: 5ce296e5887d1f65604c5265
        - push_dataset:
            key: yk_car_baseinfo_min

        ##计算code维度指标
        - use_df:
            key: yk_car_revenue_info_min
        - df_groupby:
            by: [ city,code_name,code_encoder ]
        - df_sum:
            column: [ received ]
        - df_reset_index: [ ]
        - df_rename_columns:
            - received: received_day
        - stash_push_df: [ ]

        - use_df:
            key: yk_car_revenue_info_min
        - drop_duplicates:
            subset: [ license_num ]
        - df_groupby:
            by: [ city,code_encoder,code_name ]
        - df_sum:
            column: [ receivable ]
        - df_reset_index: [ ]
        - stash_push_df: [ ]

        - use_df:
            key: yk_car_revenue_info_min
        - drop_duplicates:
            subset: [ license_num ]
        - df_groupby:
            by: [ city,code_encoder,code_name ]
        - df_count:
            column: [ license_num ]
        - df_rename_columns:
            - license_num: rent_num
        - df_reset_index: [ ]
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ city,code_encoder,code_name ]
            how: left
            drop_stash: true
        - stash_push_df: [ ]
        #关于基础表的指标
        - use_df:
            key: yk_car_baseinfo_min
        - drop_duplicates:
            subset: [ license_num ]
        - df_groupby:
            by: [ city,code_encoder,code_name ]
        - df_count:
            column: [ license_num ]
        - df_rename_columns:
            - license_num: car_num
        - df_reset_index: [ ]

        - add_cols:
            - dimension: code
              supplier_name: 5ce296e5887d1f65604c5265
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ city,code_encoder,code_name ]
            how: left
            drop_stash: true
        - df_eval:
            - |
              [unrent_num] = [car_num] - [rent_num]
              [rent_rate] = [rent_num]/[car_num]
              [diff_receive_day] = [receivable] - [received_day]
        - push_dataset:
            key: yk_revenue_rent_detail_code



        ##计算city维度指标
        #关于收入表的指标
        - use_df:
            key: yk_revenue_rent_detail_code
        - df_groupby:
            by: [ city ]
        - df_sum:
            column: [ received_day,car_num,rent_num,receivable ]
        - df_reset_index: [ ]
        - add_cols:
            - dimension: 'city'
              supplier_name: 5ce296e5887d1f65604c5265
              code_name: '-'
              code_encoder: '-'
        - df_eval:
            - |
              [unrent_num] = [car_num] - [rent_num]
              [rent_rate] = [rent_num]/[car_num]
              [diff_receive_day] = [receivable] - [received_day]

        - push_dataset:
            key: yk_revenue_rent_detail_city


        ##计算主体维度指标
        #关于收入表的指标
        - use_df:
            key: yk_revenue_rent_detail_city
        - df_groupby:
            by: [supplier_name]
        - df_sum:
            column: [received_day,car_num,receivable,rent_num]
        - df_reset_index: []
        - add_cols:
            - dimension: '主体'
              city: '-'
              code_name: '-'
              code_encoder: '-'
        - df_eval:
            - |
              [unrent_num] = [car_num] - [rent_num]
              [rent_rate] = [rent_num]/[car_num]
              [diff_receive_day] = [receivable] - [received_day]

        - stash_push_df: []
        - use_df:
            key: yk_revenue_rent_detail_city
        - stash_push_df: []
        - use_df:
            key: yk_revenue_rent_detail_code
        - stash_push_df: []

        - stash_concat_df:
            drop_stash: true



    ###收入模块2
    - name: yk_accumulat_detail
      sync_result: true
      cooks:
        - use_df:
            key: yk_car_revenue_info
            columns: [ time,code_name,received ]
        - df_pivot_table:
            values: received
            index: [ code_name ]
            columns: [ code_name ]
            aggfunc: sum
        - df_reset_index: [ ]
        - fetch_cols:
            columns: [ code_name ]
        - add_cols:
            - supplier_name: 5ce296e5887d1f65604c5265
        - stash_push_df: [ ]
        - use_df:
            key: yk_car_revenue_info
            columns: [ time,code_name,received ]
        - df_pivot_table:
            values: received
            index: [ time ]
            columns: [ code_name ]
            aggfunc: sum
        - df_reset_index: [ ]
        - fetch_cols:
            columns: [ time ]
        - add_cols:
            - supplier_name: 5ce296e5887d1f65604c5265
        - stash_push_df: [ ]
        - stash_join_df:
            on: supplier_name
            how: outer
            drop_stash: true
        - fetch_cols:
            columns: [ time,code_name ]
        - push_dataset:
            key: time_code
        - use_df:
            key: yk_car_revenue_info
            columns: [ time,code_name,received ]
        - stash_push_df: [ ]
        - use_df:
            key: time_code
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ code_name,time ]
            how: outer
            drop_stash: true
        - df_fillna:
            columns: [ received ]
            value: 0.0
        - run_py:
            - |
              df = to_df(df).copy()
              df = df.groupby(by=['code_name','time']).sum()
              df['acc_received']=df['received'].groupby(['code_name']).cumsum()
              result = df.reset_index()
        - stash_push_df: [ ]
        - use_df:
            key: yk_car_revenue_info
            columns: [ code_name,receivable,license_num,city ]
        - drop_duplicates:
            subset: license_num
        - df_groupby:
            by: [ code_name,city ]
        - df_sum:
            column: [ receivable ]
        - df_reset_index: [ ]
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ code_name ]
            how: right
            drop_stash: true
        - add_cols:
            - dimension: 'code'
              supplier_name: 5ce296e5887d1f65604c5265
        - df_eval:
            - |
              [acc_diff_recrive] = [receivable] - [acc_received]
              [acc_diff_rate] = [acc_diff_recrive] / [acc_received]
        - stash_push_df: [ ]
        - use_df:
            key: yk_car_revenue_info
            columns: [ time,code_name,license_num,received,receivable ]
        - df_eval:
            - |
              [acc_diff_recrive] = [receivable] - [received]
        - df_select:
            - '[acc_diff_recrive] > @v1'
            - v1: 0

        - df_groupby:
            by: [ time,code_name ]
        - df_count:
            column: license_num
        - df_reset_index: [ ]
        - df_rename_columns:
            - license_num: acc_diff_num
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ time,code_name ]
            how: right
            drop_stash: true
        - df_fillna:
            columns: [ acc_diff_num ]
            value: 0
        - fetch_cols:
            columns: [ time,code_name,acc_diff_num,city,receivable,acc_received,dimension,supplier_name,acc_diff_recrive,acc_diff_rate ]

        - push_dataset:
            key: code_shouru2

        - use_df:                     #city维度
            key: code_shouru2

        - df_groupby:
            by: [ time,city,supplier_name ]
        - df_sum:
            column: [ acc_received,receivable,acc_diff_num ]
        - df_reset_index: [ ]
        - df_eval:
            - |
              [acc_diff_recrive] = [receivable] -  [acc_received]
              [acc_diff_rate]  = [acc_diff_recrive] / [acc_received]
        - add_cols:
            - dimension: 'city'
              code_name: '-'
        - run_py:
            - |
              df = to_df(df).copy()
              df['rank'] = df.groupby(by=['time'])['acc_received'].rank(method='min',ascending=False)
              result = to_dd(df)
        - push_dataset:
            key: city_shouru2

        - use_df:                       #主体维度
            key: city_shouru2
        - df_groupby:
            by: [ supplier_name,time ]
        - df_sum:
            column: [ acc_received,receivable,acc_diff_num ]
        - df_reset_index: [ ]
        - df_eval:
            - |
              [acc_diff_recrive] = [receivable] -  [acc_received]
              [acc_diff_rate]  = [acc_diff_recrive] / [acc_received]
        - add_cols:
            - dimension: '主体'
              code_name: '-'
              city: '-'
        - stash_push_df: [ ]
        - use_df:
            key: code_shouru2
        - stash_push_df: [ ]
        - use_df:
            key: city_shouru2
        - stash_push_df: [ ]
        - stash_concat_df:
            drop_stash: true




    ###收入模块3
    - name: yk_car_detail
      sync_result: true
      cooks:
      ##站点维度指标
        - use_df:
            key: yk_car_baseinfo
            ignore_null_error: true
            columns: [receivable,license_num,code_encoder,city,car_type,code_name,rent_cost,car_source]
            empty_df_record:
              rent_cost: 0.0
              receivable: 0.0
              license_num: '-'
              code_encoder: '-'
              city: '-'
              car_type: '-'
              code_name: '-'
              car_source: '-'
        - stash_push_df: []
        - use_df:
            key: yk_car_revenue_info
            ignore_null_error: true
            columns: [received,license_num]
            empty_df_record:
              received: 0.0
              license_num: '-'
        - df_groupby:
            by: [license_num]
        - df_sum:
            column: [received]
        - df_rename_columns:
            - received: acc_received
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [license_num]
            how: inner
            drop_stash: true
        - df_to_float:
            column: receivable
        - df_to_float:
            column: acc_received
        - df_eval:
            - |
              [diff_receive] = [receivable] - [acc_received]



###出租率模块
    - name: yk_rent_rate_detail1
      sync_result: true
      cooks:
        - use_df:
            key: yk_car_baseinfo
            ignore_null_error: true
            columns: [license_num,code_encoder,city,code_name,supplier_name,车辆状态]
            empty_df_record:
              license_num: '-'
              code_encoder: '-'
              city: '-'
              supplier_name: 5ce296e5887d1f65604c5265
              code_name: '-'
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset: [license_num]
        - df_groupby:
            by: [supplier_name,city,code_encoder,code_name]
        - df_count:
            column: [license_num]
        - df_rename_columns:
            - license_num: car_num
        - df_reset_index: []
        - stash_push_df: []

        - use_df:
            key: yk_car_revenue_info
            ignore_null_error: true
            columns: [license_num,code_encoder,city,supplier_name]
            empty_df_record:
              license_num: '-'
              code_encoder: '-'
              city: '-'
              supplier_name: 5ce296e5887d1f65604c5265
        - drop_duplicates:
            subset: [license_num]
        - df_groupby:
            by: [supplier_name,city,code_encoder]
        - df_count:
            column: [license_num]
        - df_rename_columns:
            - license_num: rent_num
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [code_encoder,city,supplier_name]
            how: right
            drop_stash: true

        - df_fillna:
            columns: [ rent_num,car_num]
            value: 0.0
        - df_eval:
            - |
              [rent_rate] = [rent_num] / [car_num]
              [unrent_num] = [car_num] - [rent_num]
        - add_cols:
            - dimension: code
        - push_dataset:
            key: yk_rent_rate_detail1_code
        ##城市维度指标
        - use_df:
            key: yk_car_baseinfo
            ignore_null_error: true
            columns: [license_num,code_encoder,city,code_name,supplier_name,车辆状态]
            empty_df_record:
              license_num: '-'
              code_encoder: '-'
              city: '-'
              supplier_name: 5ce296e5887d1f65604c5265
              code_name: '-'
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset: [license_num]
        - df_groupby:
            by: [supplier_name,city]
        - df_count:
            column: [license_num]
        - df_rename_columns:
            - license_num: car_num
        - df_reset_index: []
        - stash_push_df: []

        - use_df:
            key: yk_car_revenue_info
            ignore_null_error: true
            columns: [license_num,code_encoder,city,supplier_name]
            empty_df_record:
              license_num: '-'
              code_encoder: '-'
              city: '-'
              supplier_name: 5ce296e5887d1f65604c5265

        - drop_duplicates:
            subset: [license_num]
        - df_groupby:
            by: [supplier_name,city]
        - df_count:
            column: [license_num]
        - df_rename_columns:
            - license_num: rent_num
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [city,supplier_name]
            how: right
            drop_stash: true

        - df_fillna:
            columns: [ rent_num,car_num]
            value: 0.0
        - df_eval:
            - |
              [rent_rate] = [rent_num] / [car_num]
              [unrent_num] = [car_num] - [rent_num]
        - add_cols:
            - dimension: 城市
              code_name: "-"
              code_encoder: '-'
        - push_dataset:
            key: yk_rent_rate_detail1_city
        ##主体维度指标
        - use_df:
            key: yk_car_baseinfo
            ignore_null_error: true
            columns: [license_num,code_encoder,city,code_name,supplier_name,车辆状态]
            empty_df_record:
              license_num: '-'
              code_encoder: '-'
              city: '-'
              supplier_name: 5ce296e5887d1f65604c5265
              code_name: '-'
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset: [license_num]
        - df_groupby:
            by: [supplier_name]
        - df_count:
            column: [license_num]
        - df_rename_columns:
            - license_num: car_num
        - df_reset_index: []
        - stash_push_df: []

        - use_df:
            key: yk_rent_rate_detail1_city
        - df_groupby:
            by: [supplier_name]
        - df_sum:
            column: [car_num,rent_num]
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [supplier_name]
            how: right
            drop_stash: true

        - df_fillna:
            columns: [ rent_num,car_num]
            value: 0.0
        - df_eval:
            - |
              [rent_rate] = [rent_num] / [car_num]
              [unrent_num] = [car_num] - [rent_num]
        - add_cols:
            - dimension: 主体
              code_name: "-"
              code_encoder: '-'
              city: '-'
        - stash_push_df: []
        - use_df:
            key: yk_rent_rate_detail1_city
        - stash_push_df: []
        - use_df:
            key: yk_rent_rate_detail1_code
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true

###出租率模块2
    - name: yk_rent_rate_detail2
      sync_result: true
      cooks:
        #导入车辆基础信息表
        - use_df:
            key: yk_car_baseinfo
            ignore_null_error: true
            columns: [license_num,city,car_source,车辆状态]
            empty_df_record:
              license_num: '-'
              city: '-'
              car_source: '-'
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset: [license_num]
        - df_groupby:
            by: [city,car_source]
        - df_count:
            column: [license_num]
        - df_rename_columns:
            - license_num: car_num
        - df_reset_index: []
        - stash_push_df: []
        #导入车辆收入信息表
        - use_df:
            key: yk_car_revenue_info
            ignore_null_error: true
            columns: [license_num,city,car_source]
            empty_df_record:
              license_num: '-'
              city: '-'
              car_source: '-'
        - drop_duplicates:
            subset: [license_num]
        - df_groupby:
            by: [city,car_source]
        - df_count:
            column: [license_num]
        - df_rename_columns:
            - license_num: rent_num
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [city,car_source]
            how: right
            drop_stash: true
        - df_fillna:
            columns: [ rent_num,car_num]
            value: 0.0
        - df_eval:
            - |
              [rent_rate] = [rent_num] / [car_num]
              [unrent_num] = [car_num] - [rent_num]


###code盈亏
    - name: yk_code_profit
      sync_result: true
      cooks:
        - use_df:
            key: yk_profit_detail
            ignore_null_error: true
            columns: [ cost_month,code_name,dimension,received_month,city_code ]
            empty_df_record:
              cost_month: 0.0
              code_encoder: '-'
        - df_select:
            - '[dimension] == @p1'
            - p1: 'code'
        - run_py:
            - |
              df = to_df(df).copy()
              df['code_profit'] = df['received_month'] - df['cost_month']
              df=df.rename(columns={'code_profit':'{}月'.format(np.datetime64('today').tolist().month)})[['code_name','{}月'.format(np.datetime64('today').tolist().month),'city_code']]
              result = to_dd(df)



    - name: yk_code_profit_month
      sync_result: true
      cooks:
        - fetch_dataset:
            dataset_type_code: yk_code_profit
            dataset_cate: std
            month_value: 202106
            ignore_null_error: true
            empty_df_record:
              code_name:
              6月:
              city_code:
        - stash_push_df: [ ]

        - fetch_dataset:
            dataset_type_code: yk_code_profit
            dataset_cate: std
            month_value: 202107
            ignore_null_error: true
            empty_df_record:
              code_name:
              7月:
              city_code:
        - stash_push_df: [ ]

        - fetch_dataset:
            dataset_type_code: yk_code_profit
            dataset_cate: std
            month_value: 202108
            ignore_null_error: true
            empty_df_record:
              code_name:
              8月:
              city_code:
        - stash_push_df: [ ]

        - fetch_dataset:
            dataset_type_code: yk_code_profit
            dataset_cate: std
            month_value: 202109
            ignore_null_error: true
            empty_df_record:
              code_name:
              9月:
              city_code:
        - stash_push_df: [ ]
        - fetch_dataset:
            dataset_type_code: yk_code_profit
            dataset_cate: std
            month_value: 202110
            ignore_null_error: true
            empty_df_record:
              code_name:
              10月:
              city_code:
        - stash_push_df: [ ]

        - fetch_dataset:
            dataset_type_code: yk_code_profit
            dataset_cate: std
            month_value: 202111
            ignore_null_error: true
            empty_df_record:
              code_name:
              11月:
              city_code:
        - stash_push_df: [ ]

        - fetch_dataset:
            dataset_type_code: yk_code_profit
            dataset_cate: std
            month_value: 202112
            ignore_null_error: true
            empty_df_record:
              code_name:
              12月:
              city_code:
        - stash_push_df: [ ]

        - stash_join_df:
            on: [ code_name,city_code ]
            how: outer
            drop_stash: true






yk_month_env:
  context_defaults:
    delay_compute: true
    sync_result_from_cluster: true
    play_on_dask_cluster: true
    platform_code: didi
    dask_client_set_as_default: true
    cluster_client_address: 'dask-scheduler-service.databus:8786'

  play:
    - name: yk_car_baseinfo           # 车辆基础信息表
      sync_result: true
      cooks:
        - fetch_dataset:
            template_code: rl_yk_day_16
            dataset_cate: raw
            datakit_pull_way: last_day
            ignore_null_error: true
            columns: [ '车型分类','城市','车牌号','车辆来源','车辆到期时间','应收租金','租金成本','关联code名称','车系','车型','code编码','VIN码（车架号）','车辆状态' ]
        - when_empty_fetch_dataset:
            template_code: rl_yk_day_16
            dataset_cate: raw
            datakit_pull_way: last_day
            month_offset: -1
            ignore_null_error: true
            columns: [ '车型分类','城市','车牌号','车辆来源','车辆到期时间','应收租金','租金成本','关联code名称','车系','车型','code编码','VIN码（车架号）','车辆状态' ]
            empty_df_record:
              车型分类: '-'
              城市: '-'
              车牌号: '-'
              车辆来源: '-'
              车辆到期时间: '1999-12-12'
              应收租金: 0.0
              租金成本: 0.0
              关联code名称: '-'
              车系: '-'
              车型: '-'
              code编码: '-'
              VIN码（车架号）: '-'
              车辆状态: '-'
        - df_rename_columns:
            - 车型分类: car_type_class
              城市: city
              车牌号: license_num
              车辆来源: car_source
              车辆到期时间: car_expire_time
              应收租金: receivable
              租金成本: rent_cost
              关联code名称: code_name
              车系: car_series
              车型: car_type
              code编码: code_encoder
        - stash_push_df: []
        - fetch_datasource:
            datasource: qcode-biz-code-book
            ignore_null_error: true
            empty_df_record:
              name: '-'
            rename:
              name: code_name
        - fetch_cols:
              columns: [ code_name,team_id ]

        - stash_push_df: []

        - stash_join_df:
            on: [ code_name ]
            how: right
            drop_stash: true

        - stash_push_df: []
        - fetch_datasource:
            datasource: qcode-biz-team-book
            ignore_null_error: true
            empty_df_record:
              Team_ID: '-'
              name: '-'
            rename:
              Team_ID: team_id
              name: team_name
        - fetch_cols:
              columns: [team_id,team_name]
        - stash_push_df: []
        - stash_join_df:
            on: [team_id]
            how: right
            drop_stash: true
        - add_cols:
            - supplier_name: 5ce296e5887d1f65604c5265
        - set_date_column:
            src_column: car_expire_time
        - drop_duplicates:
            subset: [ license_num,VIN码（车架号） ]
        - run_py:
            - |
              df = df[df['code_encoder'].notnull()]
              result = df


    - name: yk_car_revenue_info      # 车辆收入信息表
      sync_result: true
      cooks:
        - fetch_dataset:
            template_code: rl_yk_day_13
            dataset_cate: raw
            ignore_null_error: true
            columns: [ 交易金额,车辆VIN码,交易时间,交易名目,meta_day ]
        - when_empty_fetch_dataset:
            template_code: rl_yk_day_13
            dataset_cate: raw
            ignore_null_error: true
            month_offset: -1
            columns: [ 交易金额,车辆VIN码,交易时间,交易名目,meta_day ]
            empty_df_record:
              交易金额: 0.0
              车辆VIN码: '-'
              交易时间: '1999-12-12'
        - convert_month_day_time_column:
            src_column: 交易时间
            day_column: 交易时间
        - parse_time_span_cols:
            columns:
              - 交易时间
        - df_rename_columns:
            - 交易金额: received
              车辆VIN码: 车辆VIN码
              交易时间: time
        - run_py:
            - |
              df['车辆VIN码'] = df['车辆VIN码'].apply(lambda x:x.strip())
              df['交易名目'] = df['交易名目'].apply(lambda x:x.strip())
              result = df
        - df_select:
            - '[交易名目] == @v1'
            - v1: 租金
        - stash_push_df: [ ]
        - use_df:
            key: yk_car_baseinfo
            ignore_null_error: true
            columns: [ VIN码（车架号）,license_num ]
            empty_df_record:
              VIN码（车架号）: '-'
              车牌号: '-'
            rename:
              VIN码（车架号）: 车辆VIN码
        - run_py:
            - |
              df['车辆VIN码'] = df['车辆VIN码'].apply(lambda x:x.strip())
              result = df
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ 车辆VIN码 ]
            how: right
            drop_stash: true
        - fetch_cols:
            columns: [ license_num,received,time ]
        - stash_push_df: [ ]

        - fetch_dataset:
            template_code: rl_yk_day_14
            dataset_cate: raw
            ignore_null_error: true
            columns: [扣款金额,车牌号,扣款时间]
        - when_empty_fetch_dataset:
            template_code: rl_yk_day_14
            dataset_cate: raw
            ignore_null_error: true
            month_offset: -1
            columns: [扣款金额,车牌号,扣款时间]
            empty_df_record:
              扣款金额: 0.0
              车牌号: '-'
              扣款时间: '1999-12-12'
        - df_rename_columns:
            - 扣款金额: received
              车牌号: license_num
              扣款时间: time
        - set_date_column:
            src_column: time
        - stash_push_df: []

        - fetch_dataset:
            template_code: rl_yk_day_15
            dataset_cate: raw
            ignore_null_error: true
            columns: [收入,车牌号,日期]
        - when_empty_fetch_dataset:
            template_code: rl_yk_day_15
            dataset_cate: raw
            ignore_null_error: true
            month_offset: -1
            columns: [收入,车牌号,日期]
            empty_df_record:
              收入: 0.0
              车牌号: '-'
              日期: '1999-12-12'
        - df_rename_columns:
            - 收入: received
              车牌号: license_num
              日期: time
        - run_py:
            - |
              df = to_df(df).copy()
              df = df[df['license_num'].notnull()]
              df['time'] = pd.to_datetime(df['time'])
              df['time'] = pd.to_datetime(df['time'],format= '%Y-%m-%d')
              df['time'] = df['time'].map(lambda x:x.strftime('%Y-%m-%d'))#.str.strip('-').map(int)
              result = to_dd(df)
        - set_date_column:
            src_column: time
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true
        - df_groupby:
            by: [ license_num,time ]
        - df_sum:
            column: [ received ]
        - df_reset_index: [ ]
        - stash_push_df: []

        - use_df:
            key: yk_car_baseinfo
            columns: [license_num,city,code_name,receivable,car_source,team_name,code_encoder]
        - stash_push_df: []
        - stash_join_df:
            on: [license_num]
            how: right
            drop_stash: true

        - add_cols:
            - supplier_name: 5ce296e5887d1f65604c5265

    - name: yk_financia_statement_code         #财报表code维度
      sync_result: true
      cooks:
        - fetch_datasource:
            datasource: qcode-finance-databook
            ignore_null_error: true
            empty_df_record:
              industry_id: 'chu_xing'
              platform_id: 'didi'
              ac_rule_kind: 'code'
              project_id: '5fef0eac968939d2ba0a9593'
              tc_name: '-'
              ac_code: '-'
              money: 0
        - df_select:
            - '([industry_id] == @v1) & ([platform_id] in @v2) & ([ac_rule_kind] == @v3) & ([project_id] == @v4)'
            - v1: chu_xing
              v2: [ didi ]
              v3: code
              v4: 5fef0eac968939d2ba0a9593
        - df_pivot_table: # 透视表
            values: money
            index: [ tc_name ]
            columns: [ ac_code ]
            aggfunc: sum
        - df_reset_index: [ ]
        - pad_cols:
            columns: [ 'Q-2040101','Q-2040102','Q-2040201','Q-2040202','Q-21101','Q-2110201','Q-2110202','Q-21201','Q-21202','Q-2080101','Q-2080102','Q-2080103','Q-2080104','Q-2080105','Q-2080106','Q-2080201','Q-2080202','Q-2080301','Q-2080302','Q-2080303','Q-20804','Q-2080501','Q-2080502','Q-2080503','Q-2080504','Q-2080505','Q-2080506','Q-21301','Q-21302','Q-21303','Q-21304','Q-214' ]
            default_value: 0.0
        - df_fillna:
            value: 0.0
        - run_py:
            - |
              df = to_df(df).copy()
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20805'] = df['Q-2080501'] + df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df = df.set_index(['tc_name'])
              df = df.transpose()
              df = df / 100
              df = df.reset_index(drop=False)
              df['科目编号'] = df['ac_code']
              df['ac_code'] = df['ac_code'].replace('Q-2040101','存量').replace('Q-20401','经租成本').replace('Q-2040102','新增').replace('Q-20402','融租成本').replace('Q-2040201','融租存量').replace('Q-2040202','融租新增').replace('Q-211','运输服务成本').replace('Q-21101','车辆租金').replace('Q-21102','服务成本').replace('Q-2110201','经租服务成本').replace('Q-2110202','加盟服务成本').replace('Q-212','平台服务费').replace('Q-21201','曹操平台服务费').replace('Q-21202','聚合平台服务费').replace('Q-208','维护成本').replace('Q-20801','日常维护费').replace('Q-2080101','停车费').replace('Q-2080102','洗车费').replace('Q-2080103','挪车费').replace('Q-2080104','日常保养检测').replace('Q-2080105','交付整备费').replace('Q-2080106','上牌费').replace('Q-20802','半年度保养费').replace('Q-2080201','车辆轮胎费').replace('Q-2080202','车辆半年度保养费').replace('Q-20803','年度保养费用').replace('Q-2080301','车辆年检费').replace('Q-2080302','车辆保险费').replace('Q-2080303','车辆年度保养费').replace('Q-20804','维修费').replace('Q-20805','车辆附加费用').replace('Q-2080501','车辆GPS费用').replace('Q-2080502','车辆集中交付费用').replace('Q-2080503','车辆油电补费用').replace('Q-2080504','车辆管理费').replace('Q-2080505','车辆违章费').replace('Q-2080506','车辆杂费').replace('Q-213','佣金').replace('Q-21301','平台交付').replace('Q-21302','渠道销售').replace('Q-21303','续租佣金').replace('Q-21304','自营销售').replace('Q-214','司机福利费')
              result = to_dd(df)
        - df_rename_columns:
            - ac_code: 科目名称

    - name: yk_financia_statement_team         #财报表team维度
      sync_result: true
      cooks:
        - fetch_datasource:
            datasource: qcode-finance-databook
            ignore_null_error: true
            empty_df_record:
              org_bu: 'Q-YK'
              ac_rule_kind: 'team'
              team_code: '-'
              ac_code: '-'
              money: 0
        - df_select:
            - '([org_bu] == @v1) & ([ac_rule_kind] == @v2)'
            - v1: Q-YK
              v2: team
        - df_pivot_table:
            values: money
            index: [ team_code ]
            columns: [ ac_code ]
            aggfunc: sum
        - df_reset_index: [ ]
        - pad_cols:
            columns: [ 'Q-3','Q-30101','Q-30102','Q-30103','Q-30104','Q-30105','Q-30106','Q-30107','Q-30108','Q-3020101','Q-3020102','Q-30202','Q-30203','Q-30204','Q-30205','Q-30206','Q-30207','Q-30208','Q-30209','Q-30210','Q-30301','Q-3030201','Q-3030202','Q-3030203','Q-30303' ]
            default_value: 0.0
        - df_fillna:
            value: 0.0
        - run_py:
            - |
              df = to_df(df).copy()
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Q-3'] = df['Q-301'] + df['Q-30101'] + df['Q-30108'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-302'] + df['Q-30201'] + df['Q-3020101'] + df['Q-3020102'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210'] + df['Q-303'] + df['Q-30301'] + df['Q-30302'] + df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203'] + df['Q-30303']
              df = df.set_index(['team_code'])
              df = df.transpose()
              df = df / 100
              df = df.reset_index(drop=False)
              df['科目编号'] = df['ac_code']
              df['ac_code'] = df['ac_code'].replace('Q-3','管理费用').replace('Q-301','工资社保费用').replace('Q-30101','二线服务费（含BD)').replace('Q-30108','三线服务费').replace('Q-30102','工资').replace('Q-30103','社会保险费').replace('Q-30104','公积金').replace('Q-30105','商业补充保险').replace('Q-30106','残保金').replace('Q-30107','工会经费和职工教育经费').replace('Q-302','办公管理费用').replace('Q-30201','房屋费用').replace('Q-3020101','房屋租金').replace('Q-3020102','房屋其他费用').replace('Q-30202','团建福利费').replace('Q-30203','差旅费').replace('Q-30204','市内交通费').replace('Q-30205','招待费').replace('Q-30206','办公费').replace('Q-30207','咨询费').replace('Q-30208','印花税').replace('Q-30209','佣金').replace('Q-30210','房产税').replace('Q-303','物资采购费用').replace('Q-30301','低值易耗品摊销').replace('Q-30302','固定资产折旧').replace('Q-30303','无形资产摊销').replace('Q-3030201','电子设备').replace('Q-3030202','办公家具').replace('Q-3030203','运输工具')
              result = to_dd(df)
        - df_select:
            - '[科目编号] in @v1'
            - v1: [ 'Q-3','Q-301','Q-30101','Q-30102','Q-30103','Q-30104','Q-30105','Q-30106','Q-30107','Q-30108','Q-302','Q-30201','Q-3020101','Q-3020102','Q-30202','Q-30203','Q-30204','Q-30205','Q-30206','Q-30207','Q-30208','Q-30209','Q-30210','Q-303','Q-30301','Q-30302','Q-3030201','Q-3030202','Q-3030203','Q-30303' ]
        - df_rename_columns:
            - ac_code: 科目名称


    - name: yk_financia_statement_city              #财报表城市维度
      sync_result: true
      cooks:
        - fetch_datasource:
            datasource: qcode-finance-databook
            ignore_null_error: true
            empty_df_record:
              industry_id: 'chu_xing'
              platform_id: 'didi'
              ac_rule_kind: 'code'
              project_id: '5fef0eac968939d2ba0a9593'
              city_name: '-'
              ac_code: '-'
              money: 0
        - df_select:
            - '([industry_id] == @v1) & ([platform_id] in @v2) & ([ac_rule_kind] == @v3) & ([project_id] == @v4)'
            - v1: chu_xing
              v2: [ didi ]
              v3: code
              v4: 5fef0eac968939d2ba0a9593
        - df_pivot_table: # 透视表
            values: money
            index: [ city_name ]
            columns: [ ac_code ]
            aggfunc: sum
        - df_reset_index: [ ]
        - pad_cols:
            columns: [ 'Q-2040101','Q-2040102','Q-2040201','Q-2040202','Q-21101','Q-2110201','Q-2110202','Q-21201','Q-21202','Q-2080101','Q-2080102','Q-2080103','Q-2080104','Q-2080105','Q-2080106','Q-2080201','Q-2080202','Q-2080301','Q-2080302','Q-2080303','Q-20804','Q-2080501','Q-2080502','Q-2080503','Q-2080504','Q-2080505','Q-2080506','Q-21301','Q-21302','Q-21303','Q-21304','Q-214' ]
            default_value: 0.0
        - df_fillna:
            value: 0.0
        - run_py:
            - |
              df = to_df(df).copy()
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20805'] = df['Q-2080501'] + df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df = df.set_index(['city_name'])
              df = df.transpose()
              df = df / 100
              df = df.reset_index(drop=False)
              df['科目编号'] = df['ac_code']
              df['ac_code'] = df['ac_code'].replace('Q-2040101','存量').replace('Q-20401','经租成本').replace('Q-2040102','新增').replace('Q-20402','融租成本').replace('Q-2040201','融租存量').replace('Q-2040202','融租新增').replace('Q-211','运输服务成本').replace('Q-21101','车辆租金').replace('Q-21102','服务成本').replace('Q-2110201','经租服务成本').replace('Q-2110202','加盟服务成本').replace('Q-212','平台服务费').replace('Q-21201','曹操平台服务费').replace('Q-21202','聚合平台服务费').replace('Q-208','维护成本').replace('Q-20801','日常维护费').replace('Q-2080101','停车费').replace('Q-2080102','洗车费').replace('Q-2080103','挪车费').replace('Q-2080104','日常保养检测').replace('Q-2080105','交付整备费').replace('Q-2080106','上牌费').replace('Q-20802','半年度保养费').replace('Q-2080201','车辆轮胎费').replace('Q-2080202','车辆半年度保养费').replace('Q-20803','年度保养费用').replace('Q-2080301','车辆年检费').replace('Q-2080302','车辆保险费').replace('Q-2080303','车辆年度保养费').replace('Q-20804','维修费').replace('Q-20805','车辆附加费用').replace('Q-2080501','车辆GPS费用').replace('Q-2080502','车辆集中交付费用').replace('Q-2080503','车辆油电补费用').replace('Q-2080504','车辆管理费').replace('Q-2080505','车辆违章费').replace('Q-2080506','车辆杂费').replace('Q-213','佣金').replace('Q-21301','平台交付').replace('Q-21302','渠道销售').replace('Q-21303','续租佣金').replace('Q-21304','自营销售').replace('Q-214','司机福利费')
              result = to_dd(df)
        - df_rename_columns:
            - ac_code: 科目名称


    - name: yk_financia_statement_supplier         #财报表主体维度
      sync_result: true
      cooks:
        - fetch_datasource:
            datasource: qcode-finance-databook
            ignore_null_error: true
            empty_df_record:
              industry_id: 'chu_xing'
              platform_id: 'didi'
              ac_rule_kind: 'code'
              project_id: '5fef0eac968939d2ba0a9593'
              city_name: '-'
              ac_code: '-'
              money: 0
              supplier_name: '-'
        - df_select:
            - '([industry_id] == @v1) & ([platform_id] in @v2) & ([ac_rule_kind] == @v3) & ([project_id] == @v4)'
            - v1: chu_xing
              v2: [ didi ]
              v3: code
              v4: 5fef0eac968939d2ba0a9593
        - df_pivot_table: # 透视表
            values: money
            index: [ supplier_name ]
            columns: [ ac_code ]
            aggfunc: sum
        - df_reset_index: [ ]
        - pad_cols:
            columns: [ 'Q-2040101','Q-2040102','Q-2040201','Q-2040202','Q-21101','Q-2110201','Q-2110202','Q-21201','Q-21202','Q-2080101','Q-2080102','Q-2080103','Q-2080104','Q-2080105','Q-2080106','Q-2080201','Q-2080202','Q-2080301','Q-2080302','Q-2080303','Q-20804','Q-2080501','Q-2080502','Q-2080503','Q-2080504','Q-2080505','Q-2080506','Q-21301','Q-21302','Q-21303','Q-21304','Q-214' ]
            default_value: 0.0
        - df_fillna:
            value: 0.0
        - run_py:
            - |
              df = to_df(df).copy()
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20805'] = df['Q-2080501'] + df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df = df.set_index(['supplier_name'])
              df = df.transpose()
              df = df / 100
              df = df.reset_index(drop=False)
              df['科目编号'] = df['ac_code']
              df['ac_code'] = df['ac_code'].replace('Q-2040101','存量').replace('Q-20401','经租成本').replace('Q-2040102','新增').replace('Q-20402','融租成本').replace('Q-2040201','融租存量').replace('Q-2040202','融租新增').replace('Q-211','运输服务成本').replace('Q-21101','车辆租金').replace('Q-21102','服务成本').replace('Q-2110201','经租服务成本').replace('Q-2110202','加盟服务成本').replace('Q-212','平台服务费').replace('Q-21201','曹操平台服务费').replace('Q-21202','聚合平台服务费').replace('Q-208','维护成本').replace('Q-20801','日常维护费').replace('Q-2080101','停车费').replace('Q-2080102','洗车费').replace('Q-2080103','挪车费').replace('Q-2080104','日常保养检测').replace('Q-2080105','交付整备费').replace('Q-2080106','上牌费').replace('Q-20802','半年度保养费').replace('Q-2080201','车辆轮胎费').replace('Q-2080202','车辆半年度保养费').replace('Q-20803','年度保养费用').replace('Q-2080301','车辆年检费').replace('Q-2080302','车辆保险费').replace('Q-2080303','车辆年度保养费').replace('Q-20804','维修费').replace('Q-20805','车辆附加费用').replace('Q-2080501','车辆GPS费用').replace('Q-2080502','车辆集中交付费用').replace('Q-2080503','车辆油电补费用').replace('Q-2080504','车辆管理费').replace('Q-2080505','车辆违章费').replace('Q-2080506','车辆杂费').replace('Q-213','佣金').replace('Q-21301','平台交付').replace('Q-21302','渠道销售').replace('Q-21303','续租佣金').replace('Q-21304','自营销售').replace('Q-214','司机福利费')
              result = to_dd(df)
        - df_rename_columns:
            - ac_code: 科目名称


    - name: yk_profit_detail       #盈亏模块
      sync_result: true
      cooks:
        - use_df:               # code维度
            key: yk_car_revenue_info
            columns: [ received,code_name,city,team_name ]
        - df_groupby:
            by: [ code_name,city,team_name ]
        - df_sum:
            column: [ received ]
        - df_reset_index: [ ]
        - df_rename_columns:
            - received: received_month
        - stash_push_df: [ ]
        - use_df:
            key: yk_car_baseinfo
            columns: [ code_name,team_name,city ]
        - drop_duplicates:
            subset: [ code_name,team_name ]
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ code_name,team_name,city ]
            how: left
            drop_stash: ture
        - add_cols:
            - cost_month: 0.0
              manager_cost_month: 0.0
              profit: 0.0
              rental_rate: 0.0
              thaw_rental_rate: 0.0
              transport_service_rate: 0.0
              platform_service_rate: 0.0
              maintenance_rate: 0.0
              commisions_rate: 0.0
              driver_welfare_rate: 0.0
              code_encoder: '-'

        - run_py:
            - |
              df['received_month'] = df['received_month'].fillna(0)
              result = df
        - push_dataset:
            key: base_code

        - fetch_datasource:
            datasource: qcode-finance-databook
            ignore_null_error: true
            empty_df_record:
              industry_id: 'chu_xing'
              platform_id: 'didi'
              ac_rule_kind: 'code'
              project_id: '5fef0eac968939d2ba0a9593'
              city_name: '-'
              ac_code: '-'
              money: 0
              tc_name: '-'
        - df_select:
            - '([industry_id] == @v1) & ([platform_id] in @v2) & ([ac_rule_kind] == @v3) & ([project_id] == @v4)'
            - v1: chu_xing
              v2: [ didi ]
              v3: code
              v4: 5fef0eac968939d2ba0a9593
        - df_pivot_table: # 透视表
            values: money
            index: [ tc_name ]
            columns: [ ac_code ]
            aggfunc: sum
        - pad_cols:
            columns: [ 'Q-2040101','Q-2040102','Q-2040201','Q-2040202','Q-21101','Q-2110201','Q-2110202','Q-21201','Q-21202','Q-2080101','Q-2080102','Q-2080103','Q-2080104','Q-2080105','Q-2080106','Q-2080201','Q-2080202','Q-2080301','Q-2080302','Q-2080303','Q-20804','Q-2080501','Q-2080502','Q-2080503','Q-2080504','Q-2080505','Q-2080506','Q-21301','Q-21302','Q-21303','Q-21304','Q-214' ]
            default_value: 0.0
        - df_fillna:
            value: 0.0
        - run_py:
            - |
              df['Q-20401'] = df['Q-2040101'] + df['Q-2040102']
              df['Q-20402'] = df['Q-2040201'] + df['Q-2040202']
              df['Q-21102'] = df['Q-2110201'] + df['Q-2110202']
              df['Q-211'] = df['Q-21101'] + df['Q-21102']
              df['Q-212'] = df['Q-21201'] + df['Q-21202']
              df['Q-20801'] = df['Q-2080101'] + df['Q-2080102'] + df['Q-2080103'] + df['Q-2080104'] + df['Q-2080105'] + df['Q-2080106']
              df['Q-20802'] = df['Q-2080201'] + df['Q-2080202']
              df['Q-20803'] = df['Q-2080301'] + df['Q-2080302'] + df['Q-2080303']
              df['Q-20805'] = df['Q-2080501'] + df['Q-2080502'] + df['Q-2080503'] + df['Q-2080504'] + df['Q-2080505'] + df['Q-2080506']
              df['Q-208'] = df['Q-20801'] + df['Q-20802'] + df['Q-20803'] + df['Q-20804'] + df['Q-20805']
              df['Q-213'] = df['Q-21301'] + df['Q-21302'] + df['Q-21303'] + df['Q-21304']
              df = df / 100
              result = df
        - df_reset_index: [ ]
        - fetch_cols:
            columns: [ tc_name,Q-20401,Q-20402,Q-211,Q-212,Q-208,Q-213,Q-214 ]
        - df_rename_columns:
            - tc_name: code_name
              Q-20401: 经租成本
              Q-20402: 融租成本
              Q-211: 运输服务成本
              Q-212: 平台服务费
              Q-208: 维护成本
              Q-213: 佣金
              Q-214: 司机福利费

        - df_rename_columns:
            - 经租成本: rental_cost
              融租成本: thaw_rental_cost
              运输服务成本: transport_service_cost
              平台服务费: platform_service_cost
              维护成本: maintenance_cost
              佣金: commisions
              司机福利费: driver_welfare_cost
        - push_dataset:
            key: caibao_code

        - fetch_datasource:
            datasource: qcode-biz-code-book
            ignore_null_error: true
            empty_df_record:
              name: '-'
              biz_meta.city_code: '-'
            rename:
              name: code_name
              biz_meta.city_code: city_code
        - fetch_cols:
            columns: [ code_name,team_id,city_code ]

        - stash_push_df: [ ]

        - fetch_datasource:
            datasource: qcode-biz-team-book
            ignore_null_error: true
            empty_df_record:
              Team_ID: '-'
              name: '-'
            rename:
              Team_ID: team_id
              name: team_name
        - fetch_cols:
            columns: [ team_id,team_name ]
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ team_id ]
            how: right
            drop_stash: true
        - fetch_cols:
            columns: [ team_name,code_name,city_code ]
        - push_dataset:
            key: code_team_table

        - use_df:
            key: caibao_code
        - stash_push_df: [ ]
        - use_df:
            key: base_code
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ code_name ]
            how: outer
            drop_stash: true
        - stash_push_df: [ ]

        - use_df:
            key: code_team_table
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ code_name ]
            how: right
            drop_stash: true
        - add_cols:
            - dimension: 'code'
              supplier_name: 5ce296e5887d1f65604c5265
        - fetch_cols:
            columns: [ code_name,team_name,city_code,city,received_month,code_encoder,commisions_rate,cost_month,driver_welfare_rate,maintenance_rate,manager_cost_month,platform_service_rate,profit,rental_rate,thaw_rental_rate,transport_service_rate,driver_welfare_cost,thaw_rental_cost,commisions,maintenance_cost,platform_service_cost,transport_service_cost,rental_cost,dimension,supplier_name ]
        - df_fillna:
            columns: [ received_month,commisions_rate,cost_month,driver_welfare_rate,maintenance_rate,manager_cost_month,platform_service_rate,profit,rental_rate,thaw_rental_rate,transport_service_rate,driver_welfare_cost,thaw_rental_cost,commisions,maintenance_cost,platform_service_cost,transport_service_cost,rental_cost ]
            value: 0.0
        - df_eval:
            - |
              [cost_month] = [rental_cost] + [thaw_rental_cost] + [transport_service_cost] + [platform_service_cost] + [maintenance_cost] + [commisions] + [driver_welfare_cost]
              [profit] = [received_month] - [manager_cost_month] - [cost_month]
              [rental_rate] = [rental_cost] / [cost_month]
              [thaw_rental_rate] = [thaw_rental_cost] / [cost_month]
              [transport_service_rate] = [transport_service_cost] / [cost_month]
              [platform_service_rate] = [platform_service_cost] / [cost_month]
              [maintenance_rate] = [maintenance_cost] / [cost_month]
              [commisions_rate] = [commisions] / [cost_month]
              [driver_welfare_rate] = [driver_welfare_cost] / [cost_month]


        - push_dataset:
            key: code_yingkui


        - use_df:
            key: code_yingkui

        - df_groupby:
            by: [ city_code ]
        - df_sum:
            column: [ manager_cost_month,received_month,transport_service_cost,platform_service_cost,maintenance_cost,commisions,driver_welfare_cost,thaw_rental_cost,rental_cost ]
        - df_reset_index: [ ]

        - add_cols:
            - dimension: 'city'
              supplier_name: 5ce296e5887d1f65604c5265
              team_name: '-'
              code_encoder: '-'
              code_name: '-'

        - df_eval:
            - |
              [cost_month] = [rental_cost] + [thaw_rental_cost] + [transport_service_cost] + [platform_service_cost] + [maintenance_cost] + [commisions] + [driver_welfare_cost]
              [profit] = [received_month] - [manager_cost_month] - [cost_month]
              [rental_rate] = [rental_cost] / [cost_month]
              [thaw_rental_rate] = [thaw_rental_cost] / [cost_month]
              [transport_service_rate] = [transport_service_cost] / [cost_month]
              [platform_service_rate] = [platform_service_cost] / [cost_month]
              [maintenance_rate] = [maintenance_cost] / [cost_month]
              [commisions_rate] = [commisions] / [cost_month]
              [driver_welfare_rate] = [driver_welfare_cost] / [cost_month]

        - push_dataset:
            key: city_yingkui


        - use_df:
            key: code_yingkui

        - fetch_cols:
            columns: [ rental_cost,thaw_rental_cost,transport_service_cost,platform_service_cost,maintenance_cost,commisions,driver_welfare_cost,team_name ]
        - df_groupby:
            by: [ team_name ]
        - df_sum:
            column: [ driver_welfare_cost,rental_cost,maintenance_cost,transport_service_cost,commisions,platform_service_cost,thaw_rental_cost ]
        - df_reset_index: [ ]
        - stash_push_df: [ ]

        - fetch_datasource:
            datasource: qcode-finance-databook
            ignore_null_error: true
            empty_df_record:
              org_bu: 'Q-YK'
              ac_rule_kind: 'team'
              team_code: '-'
              ac_code: '-'
              money: 0
        - df_select:
            - '([org_bu] == @v1) & ([ac_rule_kind] == @v2)'
            - v1: Q-YK
              v2: team
        - df_pivot_table:
            values: money
            index: [ team_code ]
            columns: [ ac_code ]
            aggfunc: sum
        - pad_cols:
            columns: [ 'Q-3','Q-30101','Q-30102','Q-30103','Q-30104','Q-30105','Q-30106','Q-30107','Q-30108','Q-3020101','Q-3020102','Q-30202','Q-30203','Q-30204','Q-30205','Q-30206','Q-30207','Q-30208','Q-30209','Q-30210','Q-30301','Q-3030201','Q-3030202','Q-3030203','Q-30303' ]
            default_value: 0.0
        - df_fillna:
            value: 0.0
        - run_py:
            - |
              df['Q-301'] = df['Q-30101'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-30108']
              df['Q-30201'] = df['Q-3020101'] + df['Q-3020102']
              df['Q-302'] = df['Q-30201'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210']
              df['Q-30302'] = df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203']
              df['Q-303'] = df['Q-30301'] + df['Q-30302'] + df['Q-30303']
              df['Q-3'] = df['Q-301'] + df['Q-30101'] + df['Q-30108'] + df['Q-30102'] + df['Q-30103'] + df['Q-30104'] + df['Q-30105'] + df['Q-30106'] + df['Q-30107'] + df['Q-302'] + df['Q-30201'] + df['Q-3020101'] + df['Q-3020102'] + df['Q-30202'] + df['Q-30203'] + df['Q-30204'] + df['Q-30205'] + df['Q-30206'] + df['Q-30207'] + df['Q-30208'] + df['Q-30209'] + df['Q-30210'] + df['Q-303'] + df['Q-30301'] + df['Q-30302'] + df['Q-3030201'] + df['Q-3030202'] + df['Q-3030203'] + df['Q-30303']
              df = df / 100
              result = df
        - df_reset_index: [ ]
        - fetch_cols:
            columns: [ team_code,Q-3 ]
        - df_rename_columns:
            - team_code: team_name
              Q-3: manager_cost_month
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ team_name ]
            how: right
            drop_stash: true

        - stash_push_df: [ ]
        - use_df:
            key: yk_car_revenue_info
            columns: [ received,team_name ]
        - df_groupby:
            by: [ team_name ]
        - df_sum:
            column: [ received ]
        - df_reset_index: [ ]
        - df_rename_columns:
            - received: received_month
        - add_cols:
            - cost_month: 0.0
              profit: 0.0
              rental_rate: 0.0
              thaw_rental_rate: 0.0
              transport_service_rate: 0.0
              platform_service_rate: 0.0
              maintenance_rate: 0.0
              commisions_rate: 0.0
              driver_welfare_rate: 0.0
              code_name: '-'
              code_encoder: '-'
        - stash_push_df: [ ]

        - stash_join_df:
            on: [ team_name ]
            how: right
            drop_stash: true
        - add_cols:
            - dimension: 'team'
              supplier_name: 5ce296e5887d1f65604c5265
        - df_fillna:
            columns: [ received_month,commisions_rate,cost_month,driver_welfare_rate,maintenance_rate,manager_cost_month,platform_service_rate,profit,rental_rate,thaw_rental_rate,transport_service_rate,driver_welfare_cost,thaw_rental_cost,commisions,maintenance_cost,platform_service_cost,transport_service_cost,rental_cost ]
            value: 0.0
        - fetch_cols:
            columns: [team_name,received_month,code_encoder,code_name,commisions_rate,cost_month,driver_welfare_rate,maintenance_rate,platform_service_rate,profit,rental_rate,thaw_rental_rate,transport_service_rate,manager_cost_month,driver_welfare_cost,rental_cost,maintenance_cost,transport_service_cost,commisions,platform_service_cost,thaw_rental_cost,dimension,supplier_name]
        - df_eval:
            - |
              [cost_month] = [rental_cost] + [thaw_rental_cost] + [transport_service_cost] + [platform_service_cost] + [maintenance_cost] + [commisions] + [driver_welfare_cost]
              [profit] = [received_month] - [manager_cost_month] - [cost_month]
              [rental_rate] = [rental_cost] / [cost_month]
              [thaw_rental_rate] = [thaw_rental_cost] / [cost_month]
              [transport_service_rate] = [transport_service_cost] / [cost_month]
              [platform_service_rate] = [platform_service_cost] / [cost_month]
              [maintenance_rate] = [maintenance_cost] / [cost_month]
              [commisions_rate] = [commisions] / [cost_month]
              [driver_welfare_rate] = [driver_welfare_cost] / [cost_month]

        - stash_push_df: [ ]
        - use_df:
            key: code_team_table
            columns: [ team_name,city_code ]
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ team_name ]
            how: right
            drop_stash: true
        - drop_duplicates:
            subset: team_name
        - push_dataset:
            key: team_yingkui


        - use_df:               #主体维度
            key: team_yingkui
            columns: [ manager_cost_month,supplier_name,received_month ]
        - df_groupby:
            by: [ supplier_name ]
        - df_sum:
            column: [ manager_cost_month,received_month ]
        - df_reset_index: [ ]
        - add_cols:
            - cost_month: 0.0
              profit: 0.0
              rental_rate: 0.0
              thaw_rental_rate: 0.0
              transport_service_rate: 0.0
              platform_service_rate: 0.0
              maintenance_rate: 0.0
              commisions_rate: 0.0
              driver_welfare_rate: 0.0
              city: '-'
              code_name: '-'
              code_encoder: '-'
              dimension: '主体'
              team_name: '-'
        - stash_push_df: [ ]

        - use_df:
            key: code_yingkui
        - df_groupby:
            by: [ supplier_name ]
        - df_sum:
            column: [ driver_welfare_cost,rental_cost,maintenance_cost,transport_service_cost,commisions,platform_service_cost,thaw_rental_cost ]
        - df_reset_index: [ ]
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ supplier_name ]
            how: right
            drop_stash: true

        - df_eval:
            - |
              [cost_month] = [rental_cost] + [thaw_rental_cost] + [transport_service_cost] + [platform_service_cost] + [maintenance_cost] + [commisions] + [driver_welfare_cost]
              [profit] = [received_month] - [manager_cost_month] - [cost_month]
              [rental_rate] = [rental_cost] / [cost_month]
              [thaw_rental_rate] = [thaw_rental_cost] / [cost_month]
              [transport_service_rate] = [transport_service_cost] / [cost_month]
              [platform_service_rate] = [platform_service_cost] / [cost_month]
              [maintenance_rate] = [maintenance_cost] / [cost_month]
              [commisions_rate] = [commisions] / [cost_month]
              [driver_welfare_rate] = [driver_welfare_cost] / [cost_month]

        - stash_push_df: [ ]
        - use_df:
            key: code_yingkui
        - stash_push_df: [ ]
        - use_df:
            key: team_yingkui
        - stash_push_df: [ ]
        - use_df:
            key: city_yingkui
        - stash_push_df: [ ]
        - stash_concat_df:
            drop_stash: true


    - name: yk_car_distributioninfo       #车辆分布明细
      sync_result: true
      cooks:
        - use_df:
            key: yk_car_baseinfo
            columns: [ city,code_name,car_source,car_type_class,license_num,车辆状态 ]
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset:
              - license_num
        - df_groupby:
            by: [ code_name ]
        - df_count:
            column: license_num
            rename: cat_num
        - df_reset_index: [ ]


        - stash_push_df: [ ]
        - use_df:
            key: yk_car_revenue_info
            columns: [ city,code_name,license_num ]
        - drop_duplicates:
            subset:
              - license_num
        - df_groupby:
            by: [ code_name ]
        - df_count:
            column: license_num
            rename: rent_num
        - df_reset_index: [ ]


        - stash_push_df: [ ]
        - stash_join_df:
            on: [ code_name ]
            how: right
            drop_stash: true
        - df_fillna:
            columns: [ rent_num ]
            value: 0
        - stash_push_df: [ ]
        - use_df:
            key: yk_car_baseinfo
            columns: [ city,code_name,car_source,car_type_class ]
        - drop_duplicates:
            subset: code_name
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ code_name ]
            how: right
            drop_stash: true


    - name: yk_assets_detail       #资产分布
      sync_result: true
      cooks:
        - use_df: #主体维度
            key: yk_car_baseinfo
            columns: [ license_num,车辆状态 ]
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset:
              - license_num
        - add_cols:
            - dimension: '主体'
        - df_groupby:
            by: [ dimension ]
        - df_count:
            column: license_num
            rename: car_num
        - df_reset_index: [ ]
        - add_cols:
            - supplier_name: 5ce296e5887d1f65604c5265
        - stash_push_df: [ ]

        - use_df:
            key: yk_car_baseinfo
            columns: [ car_source,license_num,车辆状态 ]
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset:
              - license_num
        - df_select:
            - '[car_source] == @v1'
            - v1: 自采
        - add_cols:
            - dimension: '主体'
        - df_groupby:
            by: [ dimension ]
        - df_count:
            column: license_num
            rename: purchase_num
        - df_reset_index: [ ]
        - add_cols:
            - rent_num: 0.0
              city: '-'
              code_name: '-'
              numrate: 0.0
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ dimension ]
            how: left
            drop_stash: true
        - run_py:
            - |
              df['rent_num'] = df['car_num'] - df['purchase_num']
              df['numrate'] = df['car_num'] / df['car_num'].sum()
              result = df

        - push_dataset:
            key: zichan_sup

        - use_df:
            key: yk_car_baseinfo
            columns: [ license_num,city,车辆状态 ]                     #城市维度
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset: license_num
        - df_groupby:
            by: [ city ]
        - df_count:
            column: license_num
            rename: car_num
        - df_reset_index: [ ]
        - add_cols:
            - dimension: '城市'
              supplier_name: 5ce296e5887d1f65604c5265
        - stash_push_df: [ ]

        - use_df:
            key: yk_car_baseinfo
            columns: [ car_source,license_num,city,车辆状态 ]
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset:
              - license_num
        - df_select:
            - '[car_source] == @v1'
            - v1: 自采
        - df_groupby:
            by: [ city ]
        - df_count:
            column: license_num
            rename: purchase_num
        - df_reset_index: [ ]
        - add_cols:
            - rent_num: 0.0
              code_name: '-'
              numrate: 0.0
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ city ]
            how: right
            drop_stash: true
        - run_py:
            - |
              df['purchase_num'] = df['purchase_num'].fillna(0)
              df['rent_num'] = df['car_num'] - df['purchase_num']
              df['numrate'] = df['car_num'] / df['car_num'].sum()
              result = df


        - push_dataset:
            key: zichan_city


        - use_df:
            key: yk_car_baseinfo
            columns: [ license_num,city,code_name,车辆状态 ]                     #code维度
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset:
              - license_num
        - df_groupby:
            by: [ city,code_name ]
        - df_count:
            column: license_num
            rename: car_num
        - df_reset_index: [ ]
        - add_cols:
            - dimension: 'code'
              supplier_name: 5ce296e5887d1f65604c5265
        - stash_push_df: [ ]

        - use_df:
            key: yk_car_baseinfo
            columns: [ car_source,license_num,code_name,车辆状态 ]
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset:
              - license_num
        - df_select:
            - '[car_source] == @v1'
            - v1: 自采
        - df_groupby:
            by: [ code_name ]
        - df_count:
            column: license_num
            rename: purchase_num
        - df_reset_index: [ ]
        - add_cols:
            - rent_num: 0.0
              numrate: 0.0
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ code_name ]
            how: right
            drop_stash: true
        - stash_push_df: [ ]
        - use_df:
            key: zichan_city
            columns: [ city,car_num ]
        - df_rename_columns:
            - car_num: car_num_city
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ city ]
            how: right
            drop_stash: true
        - run_py:
            - |
              df['purchase_num'] = df['purchase_num'].fillna(0)
              df['rent_num'] = df['car_num'] - df['purchase_num']
              df['numrate'] = df['car_num'] / df['car_num_city']
              result = df

        - fetch_cols:
            columns: [ city,code_name,purchase_num,numrate,rent_num,car_num,dimension,supplier ]



        - stash_push_df: [ ]
        - use_df:
            key: zichan_sup
        - stash_push_df: [ ]
        - use_df:
            key: zichan_city
        - stash_push_df: [ ]
        - stash_concat_df:
            drop_stash: true

    - name: car_num_list                         #车型台数
      sync_result: true
      cooks:
        - use_df:                                     #城市维度
            key: yk_car_baseinfo
            columns: [ city,code_name,car_source,car_type,license_num,车辆状态 ]
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset: license_num
        - df_groupby:
            by: [ city,car_type,car_source ]
        - df_count:
            column: [ license_num ]
        - df_reset_index: [ ]
        - df_rename_columns:
            - license_num: car_num
        - add_cols:
            - dimension: '城市'
              code_name: '-'
        - stash_push_df: [ ]

        - use_df:                                       #code维度
            key: yk_car_baseinfo
            columns: [ city,code_name,car_source,car_type,license_num,车辆状态 ]
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset: license_num
        - df_groupby:
            by: [ city,code_name,car_type,car_source ]
        - df_count:
            column: [ license_num ]
        - df_reset_index: [ ]
        - df_rename_columns:
            - license_num: car_num
        - add_cols:
            - dimension: 'code'
        - stash_push_df: [ ]

        - stash_concat_df:
            drop_stash: true




    - name: jurisdiction                       #权限表
      sync_result: true
      cooks:
        - fetch_datasource:
            datasource: qcode-biz-code-book
            ignore_null_error: true
            empty_df_record:
              biz_meta.supplier_id: '-'
              biz_meta.project_id: '-'
              biz_meta.platform_id: '-'
              biz_meta.city_code: '-'
            query:
              biz_meta.supplier_id: 5ce296e5887d1f65604c5265
              biz_meta.project_id: 5fef0eac968939d2ba0a9593
              biz_meta.platform_id: didi
            rename:
              biz_meta.supplier_id: supplier_id
              biz_meta.platform_id: platform_code
              biz_meta.city_code: city_code
        - fetch_cols:
            columns: [ supplier_id,platform_code,city_code ]





###收入模块1
    - name: yk_revenue_rent_detail
      sync_result: true
      cooks:
        - use_df:
            key: yk_car_revenue_info
            ignore_null_error: true
            columns: [ received,receivable,license_num,code_encoder,city,time,code_name ]
            empty_df_record:
              received: 0.0
              receivable: 0.0
              license_num: '-'
              code_encoder: '-'
              city: '-'
              time: '9999-04-14'
        - add_cols:
            - supplier_name: 5ce296e5887d1f65604c5265
        - push_dataset:
            key: yk_car_revenue_info_min
        #获取车辆基础信息表所需字段
        - use_df:
            key: yk_car_baseinfo
            ignore_null_error: true
            columns: [ receivable,license_num,code_encoder,city,code_name ]
            empty_df_record:
              receivable: 0.0
              license_num: '-'
              code_encoder: '-'
              city: '-'
              code_name: '-'
        - add_cols:
            - supplier_name: 5ce296e5887d1f65604c5265
        - push_dataset:
            key: yk_car_baseinfo_min

        ##计算code维度指标
        - use_df:
            key: yk_car_revenue_info_min
        - df_groupby:
            by: [ city,code_name,code_encoder ]
        - df_sum:
            column: [ received ]
        - df_reset_index: [ ]
        - df_rename_columns:
            - received: received_day
        - stash_push_df: [ ]

        - use_df:
            key: yk_car_revenue_info_min
        - drop_duplicates:
            subset: [ license_num ]
        - df_groupby:
            by: [ city,code_encoder,code_name ]
        - df_sum:
            column: [ receivable ]
        - df_reset_index: [ ]
        - stash_push_df: [ ]

        - use_df:
            key: yk_car_revenue_info_min
        - drop_duplicates:
            subset: [ license_num ]
        - df_groupby:
            by: [ city,code_encoder,code_name ]
        - df_count:
            column: [ license_num ]
        - df_rename_columns:
            - license_num: rent_num
        - df_reset_index: [ ]
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ city,code_encoder,code_name ]
            how: left
            drop_stash: true
        - stash_push_df: [ ]
        #关于基础表的指标
        - use_df:
            key: yk_car_baseinfo_min
        - drop_duplicates:
            subset: [ license_num ]
        - df_groupby:
            by: [ city,code_encoder,code_name ]
        - df_count:
            column: [ license_num ]
        - df_rename_columns:
            - license_num: car_num
        - df_reset_index: [ ]

        - add_cols:
            - dimension: code
              supplier_name: 5ce296e5887d1f65604c5265
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ city,code_encoder,code_name ]
            how: left
            drop_stash: true
        - df_eval:
            - |
              [unrent_num] = [car_num] - [rent_num]
              [rent_rate] = [rent_num]/[car_num]
              [diff_receive_day] = [receivable] - [received_day]
        - push_dataset:
            key: yk_revenue_rent_detail_code



        ##计算city维度指标
        #关于收入表的指标
        - use_df:
            key: yk_revenue_rent_detail_code
        - df_groupby:
            by: [ city ]
        - df_sum:
            column: [ received_day,car_num,rent_num,receivable ]
        - df_reset_index: [ ]
        - add_cols:
            - dimension: 'city'
              supplier_name: 5ce296e5887d1f65604c5265
              code_name: '-'
              code_encoder: '-'
        - df_eval:
            - |
              [unrent_num] = [car_num] - [rent_num]
              [rent_rate] = [rent_num]/[car_num]
              [diff_receive_day] = [receivable] - [received_day]

        - push_dataset:
            key: yk_revenue_rent_detail_city


        ##计算主体维度指标
        #关于收入表的指标
        - use_df:
            key: yk_revenue_rent_detail_city
        - df_groupby:
            by: [supplier_name]
        - df_sum:
            column: [received_day,car_num,receivable,rent_num]
        - df_reset_index: []
        - add_cols:
            - dimension: '主体'
              city: '-'
              code_name: '-'
              code_encoder: '-'
        - df_eval:
            - |
              [unrent_num] = [car_num] - [rent_num]
              [rent_rate] = [rent_num]/[car_num]
              [diff_receive_day] = [receivable] - [received_day]

        - stash_push_df: []
        - use_df:
            key: yk_revenue_rent_detail_city
        - stash_push_df: []
        - use_df:
            key: yk_revenue_rent_detail_code
        - stash_push_df: []

        - stash_concat_df:
            drop_stash: true



    ###收入模块2
    - name: yk_accumulat_detail
      sync_result: true
      cooks:
        - use_df:
            key: yk_car_revenue_info
            columns: [ time,code_name,received ]
        - df_pivot_table:
            values: received
            index: [ code_name ]
            columns: [ code_name ]
            aggfunc: sum
        - df_reset_index: [ ]
        - fetch_cols:
            columns: [ code_name ]
        - add_cols:
            - supplier_name: 5ce296e5887d1f65604c5265
        - stash_push_df: [ ]
        - use_df:
            key: yk_car_revenue_info
            columns: [ time,code_name,received ]
        - df_pivot_table:
            values: received
            index: [ time ]
            columns: [ code_name ]
            aggfunc: sum
        - df_reset_index: [ ]
        - fetch_cols:
            columns: [ time ]
        - add_cols:
            - supplier_name: 5ce296e5887d1f65604c5265
        - stash_push_df: [ ]
        - stash_join_df:
            on: supplier_name
            how: outer
            drop_stash: true
        - fetch_cols:
            columns: [ time,code_name ]
        - push_dataset:
            key: time_code
        - use_df:
            key: yk_car_revenue_info
            columns: [ time,code_name,received ]
        - stash_push_df: [ ]
        - use_df:
            key: time_code
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ code_name,time ]
            how: outer
            drop_stash: true
        - df_fillna:
            columns: [ received ]
            value: 0.0
        - run_py:
            - |
              df = to_df(df).copy()
              df = df.groupby(by=['code_name','time']).sum()
              df['acc_received']=df['received'].groupby(['code_name']).cumsum()
              result = df.reset_index()
        - stash_push_df: [ ]
        - use_df:
            key: yk_car_revenue_info
            columns: [ code_name,receivable,license_num,city ]
        - drop_duplicates:
            subset: license_num
        - df_groupby:
            by: [ code_name,city ]
        - df_sum:
            column: [ receivable ]
        - df_reset_index: [ ]
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ code_name ]
            how: right
            drop_stash: true
        - add_cols:
            - dimension: 'code'
              supplier_name: 5ce296e5887d1f65604c5265
        - df_eval:
            - |
              [acc_diff_recrive] = [receivable] - [acc_received]
              [acc_diff_rate] = [acc_diff_recrive] / [acc_received]
        - stash_push_df: [ ]
        - use_df:
            key: yk_car_revenue_info
            columns: [ time,code_name,license_num,received,receivable ]
        - df_eval:
            - |
              [acc_diff_recrive] = [receivable] - [received]
        - df_select:
            - '[acc_diff_recrive] > @v1'
            - v1: 0

        - df_groupby:
            by: [ time,code_name ]
        - df_count:
            column: license_num
        - df_reset_index: [ ]
        - df_rename_columns:
            - license_num: acc_diff_num
        - stash_push_df: [ ]
        - stash_join_df:
            on: [ time,code_name ]
            how: right
            drop_stash: true
        - df_fillna:
            columns: [ acc_diff_num ]
            value: 0
        - fetch_cols:
            columns: [ time,code_name,acc_diff_num,city,receivable,acc_received,dimension,supplier_name,acc_diff_recrive,acc_diff_rate ]

        - push_dataset:
            key: code_shouru2

        - use_df:                     #city维度
            key: code_shouru2

        - df_groupby:
            by: [ time,city,supplier_name ]
        - df_sum:
            column: [ acc_received,receivable,acc_diff_num ]
        - df_reset_index: [ ]
        - df_eval:
            - |
              [acc_diff_recrive] = [receivable] -  [acc_received]
              [acc_diff_rate]  = [acc_diff_recrive] / [acc_received]
        - add_cols:
            - dimension: 'city'
              code_name: '-'
        - run_py:
            - |
              df = to_df(df).copy()
              df['rank'] = df.groupby(by=['time'])['acc_received'].rank(method='min',ascending=False)
              result = to_dd(df)
        - push_dataset:
            key: city_shouru2

        - use_df:                       #主体维度
            key: city_shouru2
        - df_groupby:
            by: [ supplier_name,time ]
        - df_sum:
            column: [ acc_received,receivable,acc_diff_num ]
        - df_reset_index: [ ]
        - df_eval:
            - |
              [acc_diff_recrive] = [receivable] -  [acc_received]
              [acc_diff_rate]  = [acc_diff_recrive] / [acc_received]
        - add_cols:
            - dimension: '主体'
              code_name: '-'
              city: '-'
        - stash_push_df: [ ]
        - use_df:
            key: code_shouru2
        - stash_push_df: [ ]
        - use_df:
            key: city_shouru2
        - stash_push_df: [ ]
        - stash_concat_df:
            drop_stash: true




    ###收入模块3
    - name: yk_car_detail
      sync_result: true
      cooks:
      ##站点维度指标
        - use_df:
            key: yk_car_baseinfo
            ignore_null_error: true
            columns: [receivable,license_num,code_encoder,city,car_type,code_name,rent_cost,car_source]
            empty_df_record:
              rent_cost: 0.0
              receivable: 0.0
              license_num: '-'
              code_encoder: '-'
              city: '-'
              car_type: '-'
              code_name: '-'
              car_source: '-'
        - stash_push_df: []
        - use_df:
            key: yk_car_revenue_info
            ignore_null_error: true
            columns: [received,license_num]
            empty_df_record:
              received: 0.0
              license_num: '-'
        - df_groupby:
            by: [license_num]
        - df_sum:
            column: [received]
        - df_rename_columns:
            - received: acc_received
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [license_num]
            how: inner
            drop_stash: true
        - df_to_float:
            column: receivable
        - df_to_float:
            column: acc_received
        - df_eval:
            - |
              [diff_receive] = [receivable] - [acc_received]



###出租率模块
    - name: yk_rent_rate_detail1
      sync_result: true
      cooks:
        - use_df:
            key: yk_car_baseinfo
            ignore_null_error: true
            columns: [license_num,code_encoder,city,code_name,supplier_name,车辆状态]
            empty_df_record:
              license_num: '-'
              code_encoder: '-'
              city: '-'
              supplier_name: 5ce296e5887d1f65604c5265
              code_name: '-'
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset: [license_num]
        - df_groupby:
            by: [supplier_name,city,code_encoder,code_name]
        - df_count:
            column: [license_num]
        - df_rename_columns:
            - license_num: car_num
        - df_reset_index: []
        - stash_push_df: []

        - use_df:
            key: yk_car_revenue_info
            ignore_null_error: true
            columns: [license_num,code_encoder,city,supplier_name]
            empty_df_record:
              license_num: '-'
              code_encoder: '-'
              city: '-'
              supplier_name: 5ce296e5887d1f65604c5265
        - drop_duplicates:
            subset: [license_num]
        - df_groupby:
            by: [supplier_name,city,code_encoder]
        - df_count:
            column: [license_num]
        - df_rename_columns:
            - license_num: rent_num
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [code_encoder,city,supplier_name]
            how: right
            drop_stash: true

        - df_fillna:
            columns: [ rent_num,car_num]
            value: 0.0
        - df_eval:
            - |
              [rent_rate] = [rent_num] / [car_num]
              [unrent_num] = [car_num] - [rent_num]
        - add_cols:
            - dimension: code
        - push_dataset:
            key: yk_rent_rate_detail1_code
        ##城市维度指标
        - use_df:
            key: yk_car_baseinfo
            ignore_null_error: true
            columns: [license_num,code_encoder,city,code_name,supplier_name,车辆状态]
            empty_df_record:
              license_num: '-'
              code_encoder: '-'
              city: '-'
              supplier_name: 5ce296e5887d1f65604c5265
              code_name: '-'
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset: [license_num]
        - df_groupby:
            by: [supplier_name,city]
        - df_count:
            column: [license_num]
        - df_rename_columns:
            - license_num: car_num
        - df_reset_index: []
        - stash_push_df: []

        - use_df:
            key: yk_car_revenue_info
            ignore_null_error: true
            columns: [license_num,code_encoder,city,supplier_name]
            empty_df_record:
              license_num: '-'
              code_encoder: '-'
              city: '-'
              supplier_name: 5ce296e5887d1f65604c5265

        - drop_duplicates:
            subset: [license_num]
        - df_groupby:
            by: [supplier_name,city]
        - df_count:
            column: [license_num]
        - df_rename_columns:
            - license_num: rent_num
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [city,supplier_name]
            how: right
            drop_stash: true

        - df_fillna:
            columns: [ rent_num,car_num]
            value: 0.0
        - df_eval:
            - |
              [rent_rate] = [rent_num] / [car_num]
              [unrent_num] = [car_num] - [rent_num]
        - add_cols:
            - dimension: 城市
              code_name: "-"
              code_encoder: '-'
        - push_dataset:
            key: yk_rent_rate_detail1_city
        ##主体维度指标
        - use_df:
            key: yk_car_baseinfo
            ignore_null_error: true
            columns: [license_num,code_encoder,city,code_name,supplier_name,车辆状态]
            empty_df_record:
              license_num: '-'
              code_encoder: '-'
              city: '-'
              supplier_name: 5ce296e5887d1f65604c5265
              code_name: '-'
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset: [license_num]
        - df_groupby:
            by: [supplier_name]
        - df_count:
            column: [license_num]
        - df_rename_columns:
            - license_num: car_num
        - df_reset_index: []
        - stash_push_df: []

        - use_df:
            key: yk_rent_rate_detail1_city
        - df_groupby:
            by: [supplier_name]
        - df_sum:
            column: [car_num,rent_num]
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [supplier_name]
            how: right
            drop_stash: true

        - df_fillna:
            columns: [ rent_num,car_num]
            value: 0.0
        - df_eval:
            - |
              [rent_rate] = [rent_num] / [car_num]
              [unrent_num] = [car_num] - [rent_num]
        - add_cols:
            - dimension: 主体
              code_name: "-"
              code_encoder: '-'
              city: '-'
        - stash_push_df: []
        - use_df:
            key: yk_rent_rate_detail1_city
        - stash_push_df: []
        - use_df:
            key: yk_rent_rate_detail1_code
        - stash_push_df: []
        - stash_concat_df:
            drop_stash: true

###出租率模块2
    - name: yk_rent_rate_detail2
      sync_result: true
      cooks:
        #导入车辆基础信息表
        - use_df:
            key: yk_car_baseinfo
            ignore_null_error: true
            columns: [license_num,city,car_source,车辆状态]
            empty_df_record:
              license_num: '-'
              city: '-'
              car_source: '-'
        - df_select:
            - '[车辆状态] != @v1'
            - v1: '已退车'
        - drop_duplicates:
            subset: [license_num]
        - df_groupby:
            by: [city,car_source]
        - df_count:
            column: [license_num]
        - df_rename_columns:
            - license_num: car_num
        - df_reset_index: []
        - stash_push_df: []
        #导入车辆收入信息表
        - use_df:
            key: yk_car_revenue_info
            ignore_null_error: true
            columns: [license_num,city,car_source]
            empty_df_record:
              license_num: '-'
              city: '-'
              car_source: '-'
        - drop_duplicates:
            subset: [license_num]
        - df_groupby:
            by: [city,car_source]
        - df_count:
            column: [license_num]
        - df_rename_columns:
            - license_num: rent_num
        - df_reset_index: []
        - stash_push_df: []
        - stash_join_df:
            on: [city,car_source]
            how: right
            drop_stash: true
        - df_fillna:
            columns: [ rent_num,car_num]
            value: 0.0
        - df_eval:
            - |
              [rent_rate] = [rent_num] / [car_num]
              [unrent_num] = [car_num] - [rent_num]


###code盈亏
    - name: yk_code_profit
      sync_result: true
      cooks:
        - use_df:
            key: yk_profit_detail
            ignore_null_error: true
            columns: [ cost_month,code_name,dimension,received_month,city_code ]
            empty_df_record:
              cost_month: 0.0
              code_encoder: '-'
        - df_select:
            - '[dimension] == @p1'
            - p1: 'code'
        - set_meta_month_column:
            column: month
        - run_py:
            - |
              df = to_df(df).copy()
              df['month'] = df['month'].apply(lambda x:str(x)[4:].split('.')[0])
              df['code_profit'] = df['received_month'] - df['cost_month']
              a = df['month'].values[0]
              df=df.rename(columns={'code_profit':str(int(a)) + '月'})[['code_name',str(int(a)) + '月','city_code']]
              result = to_dd(df)


    - name: yk_code_profit_month
      sync_result: true
      cooks:
        - fetch_dataset:
            dataset_type_code: yk_code_profit
            dataset_cate: std
            month_value: 202106
            ignore_null_error: true
            empty_df_record:
              code_name:
              6月:
              city_code:
        - stash_push_df: []

        - fetch_dataset:
            dataset_type_code: yk_code_profit
            dataset_cate: std
            month_value: 202107
            ignore_null_error: true
            empty_df_record:
              code_name:
              7月:
              city_code:
        - stash_push_df: [ ]

        - fetch_dataset:
            dataset_type_code: yk_code_profit
            dataset_cate: std
            month_value: 202108
            ignore_null_error: true
            empty_df_record:
              code_name:
              8月:
              city_code:
        - stash_push_df: [ ]

        - fetch_dataset:
            dataset_type_code: yk_code_profit
            dataset_cate: std
            month_value: 202109
            ignore_null_error: true
            empty_df_record:
              code_name:
              9月:
              city_code:
        - stash_push_df: [ ]
        - fetch_dataset:
            dataset_type_code: yk_code_profit
            dataset_cate: std
            month_value: 202110
            ignore_null_error: true
            empty_df_record:
              code_name:
              10月:
              city_code:
        - stash_push_df: [ ]

        - fetch_dataset:
            dataset_type_code: yk_code_profit
            dataset_cate: std
            month_value: 202111
            ignore_null_error: true
            empty_df_record:
              code_name:
              11月:
              city_code:
        - stash_push_df: [ ]

        - fetch_dataset:
            dataset_type_code: yk_code_profit
            dataset_cate: std
            month_value: 202112
            ignore_null_error: true
            empty_df_record:
              code_name:
              12月:
              city_code:
        - stash_push_df: [ ]

        - stash_join_df:
            on: [code_name,city_code]
            how: outer
            drop_stash: true

